<?php// ========================================================================================// FILE: ProjectManagement_ProjectManagementBase.php// ========================================================================================class ProjectManagement_ProjectManagementBase extends BaseClass{    public $Show_Query                     = false;    public $Global_Form_Start              = '';    public $Global_Form_End                = '';        public $Barcode                        = '';    public $Add_Record_Link                = '';        public $Error                           = "";    public $Message                         = "";            public $title_template    = "<span class=\"formtitle\" style='font-weight:bold;'>@</span>\n";       // -------- Template for the title    public $info_template     = "<br /><span class=\"forminfo\">@</span>\n\n";                          // -------- templete for the input field            public $Classname                       = "";           // call in class construct with "$this->Classname = get_class($this);"        public function  __construct()    {        parent::__construct();                setlocale(LC_MONETARY, 'en_US');                        // set money locality        date_default_timezone_set('America/Los_Angeles');       // set to PST timezone                /*        $this->SetParameters(func_get_args());        $this->Barcode          = $this->GetParameter(0);        $this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        */                //$this->Close_On_Success = false;                    } // -------------- END __construct --------------    public function _InventoryMenu($cur)    {        $this->AddScriptSessionHold();        AddStyle("            .menu {                width:70px; height:20px; border:1px solid #ccc;                 font-size:10px; padding:10px; text-align:center; float:left;                background-color:#cecece; color:#000;                text-decoration:none;                margin-right:10px;            }            .menu_current {                background-color:yellow;            }        ");                $extra_class_1 = ($cur == 'SCANS') ? 'menu_current' : '';        $extra_class_2 = ($cur == 'ORDERS') ? 'menu_current' : '';        $extra_class_3 = ($cur == 'HOLDS') ? 'menu_current' : '';        $extra_class_4 = ($cur == 'PRODUCTS') ? 'menu_current' : '';        $extra_class_5 = ($cur == 'PO') ? 'menu_current' : '';                echo "            <a class='menu $extra_class_1' href='/office/inventory/inventory_scan'>SCANS</a>            <a class='menu $extra_class_2' href='/office/inventory/inventory_order'>ORDERS</a>            <a class='menu $extra_class_3' href='/office/inventory/inventory_hold'>HOLDS</a>            <a class='menu $extra_class_4' href='/office/inventory/inventory_products'>PRODUCTS</a>            <a class='menu $extra_class_5' href='/office/inventory/inventory_po;t=place'>PURCHASE ORDER PLACE</a>            <a class='menu $extra_class_5' href='/office/inventory/inventory_po;t=receive'>PURCHASE ORDER RECEIVE</a>                                                <div class='clear'></div>            <br />            <div style='border-bottom:2px dashed #cecece;'></div>            <br /><br />        ";    }        /*    public function GetTableHeading($colcount)    {        $export = ($this->Show_Export)? $this->GetExportBlock() : '';        $RESULT = '            <tr class="TABLE_TITLE">                <td colspan="'. $colcount. '">                ' . $export . '                    Search Results : ' . $this->GetTableTitle() . '                                </td>            </tr>';        return $RESULT;    }    */        public function AddScriptSessionHold()    {        AddScript("            var holdSessionInterval = 300000;  // 5-minutes                        function holdSessionOpenAction()            {                $.get('HOLDSESSION');            }            setInterval('holdSessionOpenAction()', holdSessionInterval);        ");    }        /*    public function SuccessfulAddRecord()    {        if (Session('scan_message')) {            $_SESSION['scan_message'] .= "<br />SCAN SUCCESSFUL";        } else {            $_SESSION['scan_message'] = "<br />SCAN SUCCESSFUL";        }                header("Location: {$this->Success_Redirect}");    }    */        public function AddRecordLoc($table, $db_record)     {        $keys   = '';        $values = '';                    foreach ($db_record as $var => $val) {            $val = addslashes($val);                        $keys   .= "`$var`, ";            $values .= "'$val', ";        }        $keys   = substr($keys, 0, -2);        $values = substr($values, 0, -2);                $result = $this->SQL->AddRecord(array(            'table'     => $table,            'keys'      => $keys,            'values'    => $values,        ));        //if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                $return = ($result) ? true : false;        return $return;    }        public function UpdateRecordLoc($table, $db_record, $where)     {        $key_values = '';        foreach ($db_record as $var => $val) {            $val = addslashes($val);            $key_values .= "`$var`='$val', ";        }        $key_values = substr($key_values, 0, -2);                $result = $this->SQL->UpdateRecord(array(            'table'         => $table,            'key_values'    => $key_values,            //'where'         => "{$where} AND active=1",            'where'         => "{$where} ",        ));        //if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                $return = ($result) ? true : false;        return $return;    }    public function getPageURL()    {        // FUNCTION :: Returns complete URL of page currently on                if (isset($_SERVER["HTTPS"])) {            $pageURL = (@$_SERVER["HTTPS"] == "on") ? "https://" : "http://";        } else {            $pageURL = "http://";        }                if ($_SERVER["SERVER_PORT"] != "80")        {            $pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];        }         else         {            $pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];        }        return $pageURL;    }            public function AddMessage($MSG)    {        if ($MSG) { $this->Message .= "<br />" . $MSG;  }    }        public function AddError($MSG)    {        if ($MSG) { $this->Error .= "<br />" . $MSG;    }    }        public function EchoVar($NAME='', $VAR='', $COLOR='black')    {        if (is_array($VAR)) {            echo "<br /><span style='color:{$COLOR};'><b>{$NAME}</b></span> ----> " . ArrayToStr($VAR);        } else {            if ($NAME || $VAR) {                echo "<br /><span style='color:{$COLOR};'><b>{$NAME}</b></span> ----> {$VAR}";            } else {                echo "<br />";            }        }    }        public function EchoQuery($FORCE_ON=false)    {        if ($this->Show_Query || $FORCE_ON)         {             echo "            <br />            <div style='border:1px solid #ddd;'>                <div style='padding:5px; background-color:#e3e3e3;'>QUERY</div>                <div style='padding:5px;'>{$this->SQL->Db_Last_Query}</div>            </div>            <br />";        }    }        public function JavascriptToggleFunctionality()    {        $script = "        $('.toggle').each(function() {            var id = $(this).attr('id');            $('#' + id + ' span').toggleClass('updown_down');            $(this).click(function (){                $('#div_' + id).slideToggle('normal', function (){                    $('#' + id + ' span').toggleClass('updown_down');                });                return false;            });        });        ";        AddScriptOnReady($script);    }        public function JavascriptDatepickerFunctionality ($ARR)    {        # FUNCTION :: Add datepicker functionality to all field IDs passed in                if (is_array($ARR)) {            foreach ($ARR as $field) {                AddScriptOnReady("$('#{$field}').datepicker({dateFormat: 'yy-mm-dd'});");            }        }    }        public function JavascriptTimepickerFunctionality ($ARR)    {        # FUNCTION :: Add timepicker functionality to all field IDs passed in                if (is_array($ARR)) {            foreach ($ARR as $field) {                AddScriptOnReady("$('#{$field}').timepicker();");            }        }    }        public function JavascriptDisableFunctionality ($ARR)    {        # FUNCTION :: Disable all field IDs passed in (jQuery 1.6+)                if (is_array($ARR)) {            foreach ($ARR as $field) {                AddScriptOnReady("$('#{$field}').prop('disabled', true);");            }        }    }        public function JavascriptInputNoBorder ($ARR)    {        # FUNCTION :: Disable all field IDs passed in (jQuery 1.6+)                if (is_array($ARR)) {            foreach ($ARR as $field) {                AddScriptOnReady("$('#{$field}').addClass('noborder');");            }        }    }        public function JavascriptConfirmDeleteAndOpenWindow()    {                AddScript("            function ConfirmDeleteAndOpenWindow (link) {                if (confirm('Are you sure you want to delete (inactivate) row?')) {                    //alert(link);                    top.parent.appformCreate('Window', link, 'apps');                    return false;                }            }        ");            }        public function JavascriptDisplaySessionMessage()    {                // ----- If a message has been sent in - display it - then unset it        // ----- Messages put into $_SESSION['alert_message'] variable        $msg = Session('alert_message');        if  ($msg) {            AddScriptOnReady("alert('{$msg}');");            unset($_SESSION['alert_message']);        }    }        public function ScriptJSONTableGeneric()    {        # FUNCTION :: Generic parts of JavaScript for handling the JSON HTML table                // ----- SCRIPTS NEEDED FOR CREATING HTML TABLE FROM JSON DATA        AddScriptInclude("http://webmanager.whhub.com/jslib/jsontable/json_to_table.js");       // convert JSON to HTML table        AddScriptInclude("http://webmanager.whhub.com/jslib/jsontable/jquery.csv-0.7.min.js");  // process CSV to JSON object                        $script = <<<SCRIPT                                                function tableDeleteRow(deleteRowId) {                                // get the content rows                // loop through each row                // if this is the one we want to delete - remove it                // renumber each row after this point to one less than current - so they are associated to correct row                                                var targetText          = $("#" + targetTextID);            // where the array will be stored                var targetTableDiv      = $("#" + targetTableDivID);        // where the table will be displayed                var content             = targetText.val().trim();          // trim to remove extra linebreak                var split               = content.split("\\n");             // actual data rows                targetText.val('');                                         // clear the textbox area                                for(var contentRow in split){                    // check to see if the deleteRowId is in this row - in which case we want to delete it                    var pos = split[contentRow].search(deleteRowId);                                        if (pos == -1) {                        // -- output the row because its not the one we're deleting                        targetText.val(targetText.val() + split[contentRow] + "\\n");                    }                }                                // ----- create the table from this new content                createTableFromTextbox(targetText, targetTableDiv);                        }                        function addDataToTable() {                                // Usage Website --> http://jquery-csv.googlecode.com/git/examples/basic-usage.html                // Usage Website --> http://code.google.com/p/jquery-csv/wiki/API                // -- get contents of textbox                // -- convert contents to an array                // -- convert array to JSON                // -- process JSON into a table                                                // ===== USER DEFINED VARIABLES =====                //var requiredFieldArray  = requiredFieldArray;   // fields that must have values                //var headerText          = headerText;           // header for the table display                                                // ----- Check if required fields have been filled in                var passedCheck         = true;                var checkFieldVal       = "";                var checkFieldName      = "";                var outputMessage       = "";                                for (var i = 0; i < requiredFieldArray.length; i++) {                    checkFieldVal   = $("#" + requiredFieldArray[i]).val();                    checkFieldName  = $("#" + requiredFieldArray[i]).attr('alt');                                        if (checkFieldVal == "") {                        passedCheck = false;                        outputMessage += "A required field ("+ checkFieldName +") hasn't been filled in. \\n";                    }                }                                                // ----- output the error message to screen                if (!passedCheck) {                    alert(outputMessage);                }                                                // ----- complete adding data to table if no errors                if (passedCheck) {                                        var targetText          = $("#" + targetTextID);        // where the array will be stored                    var targetTableDiv      = $("#" + targetTableDivID);    // where the table will be displayed                    var contentInTable      = false;                        // will hold state of content                                                            // ----- build a delete row button                    var content     = targetText.val().trim();          // trim to remove extra linebreak                    var count       = content.split("\\n").length;      // number of rows in the textbox                    var newCount    = (count == 0) ? 1 : count--;       // gives count without counting title row or extra line break                    var id          = "row_" + newCount;                // id for this row                    var delBtn      = "<div class='button_delete' id='"+ id +"' onclick='tableDeleteRow(\" "+ id +" \")'>X</div>";                                                            // -- check to see if textbox is empty                    // -- if it is - then we need a header row for table function                    // -- create it - add it - then continue                    if (targetText.val() == '') {                        targetText.val(headerText + '\\n');                    }                                                            // -- move the values into the textbox                    var rowData = formTableRow();                    targetText.val(targetText.val() + rowData + '|' + delBtn + '\\n');                                                            // -- call table creation function                     createTableFromTextbox(targetText, targetTableDiv);                                                            // -- clear the textboxes (do after table creation in case it fails - saves reentering data)                    clearDataTextboxes()                                                        } // end checking if passed checks            }                        function createTableFromTextbox(sourceText, targetTableDiv) {                            // -- determine if some content in the textbox - otherwise next stuff will error                contentInTable = (sourceText.val() == '') ? false : true;                                if (contentInTable) {                    // -- Create the HTML table                     var input           = sourceText.val();                    var objectArray     = $.csv.toObjects(input, {                            separator: '|',                            delimiter: '~'                        });                    var jsonHtmlTable   = ConvertJsonToTable(eval(objectArray), 'jsonTable', null, 'Download');                                        // -- Put the HTML table into the display                    targetTableDiv.html(jsonHtmlTable);                }            }SCRIPT;        AddScript($script);    }        public function ScriptCalculatePrice()    {        AddScript("            function calculatePriceFromEach (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromEach');                if(!isNaN(priceEach.val()) && priceEach.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    var qty         = parseFloat(fieldQty.val());                    var price       = parseFloat(priceEach.val());                    var priceNew    = (price * qty);                                         priceTotal.val(priceNew.toFixed(2));                }            }                        function calculatePriceFromTotal (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromTotal');                if(!isNaN(priceTotal.val()) && priceTotal.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    var qty         = parseFloat(fieldQty.val());                    var price       = parseFloat(priceTotal.val());                    var priceNew    = (price / qty);                                         priceEach.val(priceNew.toFixed(2));                }            }        ");                AddScriptOnReady("            $('#' + priceEach).keyup(function() {                var IDfieldQty      = $('#' + fieldQty);                var IDpriceEach     = $('#' + priceEach);                var IDpriceTotal    = $('#' + priceTotal);                            calculatePriceFromEach(IDfieldQty, IDpriceEach, IDpriceTotal);            });                        $('#' + priceTotal).keyup(function() {                var IDfieldQty      = $('#' + fieldQty);                var IDpriceEach     = $('#' + priceEach);                var IDpriceTotal    = $('#' + priceTotal);                 calculatePriceFromTotal(IDfieldQty, IDpriceEach, IDpriceTotal);            });        ");    }            public function ScriptCalculatePriceArray()    {        # FUNCTION :: Allows auto-completing price information - needs livequery for this version                AddScriptInclude('/jslib/jquery.livequery.js');        AddScript("            function calculatePriceFromQuantity (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromQuantity');                if(!isNaN(priceEach.val()) && priceEach.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    // ----- uses the calculate price from each function                    calculatePriceFromEach (fieldQty, priceEach, priceTotal);                }            }                        function calculatePriceFromEach (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromEach');                if(!isNaN(priceEach.val()) && priceEach.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    var qty         = parseFloat(fieldQty.val());                    var price       = parseFloat(priceEach.val());                    var priceNew    = (price * qty);                                         priceTotal.val(priceNew.toFixed(2));                }            }                        function calculatePriceFromTotal (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromTotal');                if(!isNaN(priceTotal.val()) && priceTotal.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    var qty         = parseFloat(fieldQty.val());                    var price       = parseFloat(priceTotal.val());                    var priceNew    = (price / qty);                                         priceEach.val(priceNew.toFixed(2));                }            }        ");                AddScriptOnReady("            $('.calc_price_quantity').livequery('keyup', function(event) {                 var ID              = $(this).attr('jqVar1');                var IDfieldQty      = $('#qty_' + ID);                var IDpriceEach     = $('#price_each_' + ID);                var IDpriceTotal    = $('#price_total_' + ID);                calculatePriceFromQuantity(IDfieldQty, IDpriceEach, IDpriceTotal);            });                        $('.calc_price_each').livequery('keyup', function(event) {                 var ID              = $(this).attr('jqVar1');                var IDfieldQty      = $('#qty_' + ID);                var IDpriceEach     = $('#price_each_' + ID);                var IDpriceTotal    = $('#price_total_' + ID);                calculatePriceFromEach(IDfieldQty, IDpriceEach, IDpriceTotal);            });                        $('.calc_price_total').livequery('keyup', function(event) {                 var ID              = $(this).attr('jqVar1');                var IDfieldQty      = $('#qty_' + ID);                var IDpriceEach     = $('#price_each_' + ID);                var IDpriceTotal    = $('#price_total_' + ID);                calculatePriceFromTotal(IDfieldQty, IDpriceEach, IDpriceTotal);            });        ");    }                public function CleanNumber($STR)    {        # FUNCTION :: Strip off all characters except numbers        return preg_replace('/[^0-9]+/', '', $STR);    }    public function CleanMoney($STR)    {        # FUNCTION :: Strip off all characters except numbers and decimal point        return preg_replace('/[^0-9.]+/', '', $STR);     }        public function CleanStringForJqueryHTML($STR)    {        # FUNCTION :: Swap out characters that can't go into a jQuery HTML area        $STR        = htmlentities($STR);                           // convert to HTML entities        $STR        = nl2br($STR);                                  // convert new lines to <br>        $STR        = str_replace(array("\r","\n"),"",$STR);        // removes excessive lines                return $STR;    }                        public function orderBy ($unsorted, $column, $adesc = 'ASC')     {        $sorted = $unsorted;        for ($i=0; $i < sizeof($sorted)-1; $i++) {            for ($j=0; $j<sizeof($sorted)-1-$i; $j++) {                if ($sorted[$j][$column] > $sorted[$j+1][$column]) {                    $tmp = $sorted[$j];                    $sorted[$j] = $sorted[$j+1];                    $sorted[$j+1] = $tmp;                };            };        };                if ($adesc == 'DESC') {            return array_reverse($sorted);        } else {            return $sorted;        };    }    public function ConvertArrayToTable($ARR)    {        $output = '';                if (is_array($ARR)) {                        $first = true;            $output .= "<table border='1' id='_jsonTable'>";                        foreach ($ARR as $id => $record) {                                $row_first      = ($first) ? "<tr>" : '';                $row            = "<tr>";                foreach ($record as $k => $v) {                    $row_first     .= ($first) ? "<th>{$k}</th>" : '';                    $row           .= "<td>{$v}</td>";                }                $row_first      .= ($first) ? "</tr>" : '';                $row            .= "</tr>";                                $output .= $row_first . $row;                $first = false;            }                        $output .= "</table>";        }                return $output;    }        }  // -------------- END CLASS --------------