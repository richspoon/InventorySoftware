<?phpclass ProjectManagement_PurchaseList extends ProjectManagement_ProjectManagementBase{    public $Show_Query                  = false;    public $Email_Type_Html             = true;        public $From_Name                   = "Richard Witherspoon";    public $From_Email                  = "richard@apdm.com";    public $Email_Subject               = "APDM Purchase Request (#@@ID@@) - Status Update - (@@ORDERSTATUS@@)";        public $Criticality_Values_List = array(        '9'         => 'Low',        '5'         => 'Normal',        '1'         => 'High',    );        public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-02-14',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-02-20',            'Filename'      => $this->Classname,            'Version'       => '1.2',            'Description'   => 'Management of items that need to be purchased. Allows requests from team members.',            'Update Log'    => array(                '2013-02-14_1.0'    => "Created class and database tables",                '2013-02-15_1.1'    => "Created class and database tables",                '2013-02-20_1.2'    => "Added additional database fields",            ),        );                /*        $this->SetParameters(func_get_args());        $this->Barcode          = $this->GetParameter(0);        $this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        $this->Retailer_Code    = $this->GetParameter(2);        */                $this->Table            = 'pm_purchase_list';        $this->Add_Submit_Name  = 'PM_PURCHASELIST_SUBMIT_ADD';        $this->Edit_Submit_Name = 'PM_PURCHASELIST_SUBMIT_EDIT';        $this->Index_Name       = 'pm_purchase_list_id';        $this->Flash_Field      = 'pm_purchase_list_id';        $this->Default_Where    = '';  // additional search conditions        $this->Default_Sort     = '';  // field for default table sort                $this->Field_Titles = array(            "$this->Table.pm_purchase_list"             => 'Purchase List Id',                        "$this->Table.requestor"                    => 'Requestor',            "$this->Table.requestor_email_address"      => 'Requestor Email Address',            "$this->Table.requestor_notes"              => 'Requestor Notes',            "$this->Table.date_requested"               => 'Date Requested',            "$this->Table.project"                      => 'Project',            "$this->Table.category"                     => 'Category',            "$this->Table.phase"                        => 'Phase',                        "$this->Table.item_name"                    => 'Name',            "$this->Table.item_description"             => 'Description',            "$this->Table.item_url"                     => 'URL',            "$this->Table.item_manufacturer"            => 'Manufacturer',            "$this->Table.item_price"                   => 'Price',            "$this->Table.item_quantity"                => 'Quantity',                        "$this->Table.date_needed"                  => 'Date Needed',            "$this->Table.criticality"                  => 'Criticality',                        "$this->Table.order_status"                 => 'Order Status',            "$this->Table.order_status_notes"           => 'Order Status Notes',            "$this->Table.date_ordered"                 => 'Date Ordered',                        "$this->Table.cost_item"                    => 'Actual Item Cost',            "$this->Table.cost_shipping"                => 'Actual Item Shipping',            "$this->Table.ref_document_link"            => 'Document Reference',                        "$this->Table.status_display"               => 'Display',                                    "$this->Table.active"                       => 'Active',            "$this->Table.updated"                      => 'Updated',            "$this->Table.created"                      => 'Created',                                    "$this->Table.active AS EMAIL"              => 'Email',        );                                $this->Join_Array           = Array();        $this->Default_Fields       = 'phase,requestor, date_requested, project, category, item_name, item_description, item_price, item_quantity, date_needed, criticality, order_status, date_ordered, order_status_notes, cost_item, cost_shipping, EMAIL';        $this->Edit_Links_Count     = 3;        $this->Unique_Fields        = '';                $this->Default_Values       = array(            'date_requested'        => date('Y-m-d'),            'criticality'           => 5,            'project'               => 'v2',            'category'              => 'Development',            'status_display'        => 1,            'order_status'          => 'Requested',            'active'                => 1,        );                $this->Close_On_Success     = true;                                    } // -------------- END __construct --------------    public function Execute()    {        # FUNCTION :: Initial function call and handler for this class                $action = Get('action');        switch ($action) {            case 'add':                $this->AddRecord();            break;                        case 'email':                $pm_purchase_list_id = Get('pmplid');                $this->SendEmailUpdate($pm_purchase_list_id);            break;                        case 'list':            default:                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                        $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                        // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {            case 'autocomplete_assembly_lookup':                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_assemblies',                    'keys'  => 'inventory_assemblies_id, assembly_name, barcode',                    'where' => "(assembly_name LIKE '%{$query}%' OR barcode LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $arr[] = array(                        'label'             => "{$record['assembly_name']} - {$record['barcode']}",                        'description'       => $record['assembly_name'],                        'id'                => $record['inventory_assemblies_id'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                        case 'backorder':                $result = $this->ProductBackorderStatusChange($QDATA['id'], 1);                $return = ($result) ? 1 : 0;            break;                        case 'instock':                $result = $this->ProductBackorderStatusChange($QDATA['id'], 0);                $return = ($result) ? 1 : 0;            break;                        case 'reverse':                $result = $this->ProductBackorderStatusReverse($QDATA['id']);                $return = $result;            break;                        case 'nextbarcode':                // get the next unique barcode in the system (starting with a 3)                                do {                    $count  = $this->SQL->Count('inventory_products', 'active=0 OR active=1');                                        $max_length     = 5;                    // how long should barcode be                    $lead           = 30000;                // what should first lead character be                    $value          = $count + 1;           // value of main part of number                    $count_length   = strlen($value);       // get number length                                        // ----- add middle gap 0's                    if ($count_length < $max_length) {                        $value = str_pad($value, ($max_length - 1), 0, STR_PAD_LEFT);                    }                                        // ----- tack on the leading number                    $value  = $lead + $value;               // form up the final number                    $lead   = $lead + 10000;                // increment lead number (for next loop)                                                            if ($lead > 9) {                        $return = "ERROR :: Max Inventory Count";                    }                                        // ----- verify its unique                    $unique = $this->SQL->IsUnique('inventory_products', 'barcode', $value);                                    } while (!$unique);                                $return = $value;                            break;        }                echo $return;    }        public function SetFormArrays()    {        AddStylesheet("/css/inventory.css");                        // ----- create some needed lists        $criticality_list       = "9=9 (Low - can wait for funds)|5=5 (Normal)|1=1 (High - Project will fail)";        $order_status_list      = "Requested|Ordered|Received|Delayed|Rejected|Cancelled";                // ----- create list of all previously entered data        $requestors             = $this->SQL->GetFieldValues($this->Table, 'requestor', "requestor != ''");        $requestor_emails       = $this->SQL->GetFieldValues($this->Table, 'requestor_email_address', "requestor_email_address != ''");        $manufacturers          = $this->SQL->GetFieldValues($this->Table, 'item_manufacturer', "item_manufacturer != ''");        $projects               = $this->SQL->GetFieldValues($this->Table, 'project', "project != ''");        $categories             = $this->SQL->GetFieldValues($this->Table, 'category', "category != ''");        $phases                 = $this->SQL->GetFieldValues($this->Table, 'phase', "phase != ''");        $requestor_list         = Form_ArrayToList($requestors);        $requestor_email_list   = Form_ArrayToList($requestor_emails);        $manufacturer_list      = Form_ArrayToList($manufacturers);        $project_list           = Form_ArrayToList($projects);        $category_list          = Form_ArrayToList($categories);        $phase_list             = Form_ArrayToList($phases);                // ----- add in needed javascript        $this->JavascriptDatepickerFunctionality(array('FORM_date_requested', 'FORM_date_needed', 'FORM_date_ordered'));     // Javascript for datepicker        $this->JavascriptToggleFunctionality();         // Javascript for toggling show/hide a div area                        // ----- determine if showing or hiding order status div        $style_show_hide = ($this->Action == 'ADD') ? 'display:none;' : '';                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                                    "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">REQUESTOR DETAILS</div>',                            "selecttext|Requestor|requestor|N|40|80||{$requestor_list}",                "selecttext|Requestor Email|requestor_email_address|N|40|80||{$requestor_email_list}",                                'text|Date Requested|date_requested|N|10|10',                                "selecttext|Project|project|N|40|80||{$project_list}",                "selecttext|Category|category|N|40|80||{$category_list}",                "selecttext|Phase|phase|N|40|80||{$phase_list}",                                'text|Needed Date|date_needed|N|10|10',                "select|Criticality|criticality|N||{$criticality_list}",                'textarea|Notes|requestor_notes|N|30|2',            'code|</div>',            'code|<br /><br />',                                    "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">ITEM DETAILS</div>',                'text|Name|item_name|Y|60|255',                'textarea|Description|item_description|N|30|2',                'textarea|URL|item_url|N|30|2',                "selecttext|Manufacturer|item_manufacturer|N|40|80||{$manufacturer_list}",                'text|Quantity|item_quantity|Y|10|10',                'text|Price|item_price|N|10|10',            'code|</div>',                                    "code|<div style='{$style_show_hide}'>",            'code|<br /><br />',            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">ORDER STATUS <a class="toggle" href="#" id="group_a"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_group_a">',                                                "select|Order Status|order_status|N||{$order_status_list}",                        'text|Date Ordered|date_ordered|N|10|10',                        'text|Item Cost|cost_item|N|10|10',                        'text|Shipping Cost|cost_shipping|N|10|10',                                                'textarea|Order Status Notes|order_status_notes|N|30|2',                        'checkbox|Display|status_display||1|0',                                                'text|Reference Document|ref_document_link|N|69|5000',                        'checkbox|Active|active||1|0',                    'code|</div>',            'code|</div>',            'code|</div>',        );                if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        $field_kickout_string   = 'temp_';                // ----- remove any temp fields from the array so they don't get processed        foreach ($FormArray as $field => $value) {            echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                return $FormArray;    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        switch ($field) {                        case 'EMAIL':                            $CLASS_EXECUTE_LINK     = '/office/class_execute';                $eq3                    = EncryptQuery("class={$this->Classname};v1={$id};");                $link3                  = $CLASS_EXECUTE_LINK . '?eq=' . $eq3 . "&action=email&pmplid={$id}";                $script3                = "top.parent.appformCreate('Window', '{$link3}', 'apps'); return false;";                                                                                                $this->Edit_Links  = qqn("                <td align=`center`><a href=`#` class=`row_edit`     title=`Edit`        onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a></td>                <td align=`center`><a href=`#` class=`row_mail`     title=`Send Email`  onclick=`{$script3}; return false;`></a></td>                <td align=`center`><a href=`#` class=`row_delete`   title=`Delete`      onclick=`tableDeleteClick('@IDX@','@VALUE@','@EQ@'); return false; `></a></td>");                                            break;                        case 'requestor_notes':            case 'item_description':            case 'order_status_notes':                $value      = TruncStr(strip_tags($value), 100);                $value      = nl2br($value);            break;                        case 'date_needed':            case 'date_ordered':            case 'date_requested':                $value = ($value != '0000-00-00') ? $value : '';                                // possibly convert date to human-readable form            break;                        case 'criticality':                //$criticality_list       = "9=9 (Low - can wait for funds)|5=5 (Normal)|1=1 (High - Project will fail)";                $colors = array(                    '9'         => 'C0C0C0',    // gray = C0C0C0                    '5'         => 'C0C0C0',    // gray = C0C0C0                    '1'         => 'FF0000',    // red = FF0000                );                                if (ArrayValue($colors, $value)) {                    $td_options = "style=\"background-color:#{$colors[$value]};\"";                                }                                                                if (ArrayValue($colors, $value)) {                    $value = $this->Criticality_Values_List[$value];                                }            break;                                    case 'order_status':                $colors = array(                    'Requested'         => 'FFFF00',    // yellow = FFFF00                    'Pending'           => 'FFFF00',    // yellow = FFFF00                    'Ordered'           => '00FF00',    // green = 00FF00                    'Received'          => 'C0C0C0',    // gray = C0C0C0                    'Delayed'           => 'FF0000',    // red = FF0000                    'Rejected'          => 'FF0000',    // red = FF0000                    'Cancelled'         => 'FF0000',    // red = FF0000                );                                if (ArrayValue($colors, $value)) {                    $td_options = "style=\"background-color:#{$colors[$value]};\"";                                }            break;                        case 'status_display':                $value      = ($value==1) ? 'YES' : 'NO';            break;                        case 'cost_item':            case 'cost_shipping':            case 'item_price':                $value      = ($value != 0) ? money_format("%n", $value) : '';            break;        }    }                public function SendEmailUpdate($pm_purchase_list_id)    {        $passed     = true;                                        // ----- form up the body of the email        $record = $this->GetRecord_PurchaseList($pm_purchase_list_id);        if ($record) {                                    $recipient = $record['requestor_email_address'];            if (!$recipient) {                $this->EchoVar('ERROR', "{$this->Classname} :: SendEmailUpdate() :: No email address for recipient found. Email not sent.", 'red');                $passed = false;            }                                    // ----- format the body content -----            $arr = array(                'Requestor'             => $record['requestor'],                'Date_Requested'        => ($record['date_requested'] != '0000-00-00') ? $record['date_requested'] : '',                'Requestor_Notes'       => $record['requestor_notes'],                '1'                     => "\n",                'Project'               => $record['project'],                'Category'              => $record['category'],                '2'                     => "\n",                'Name'                  => $record['item_name'],                'Description'           => $record['item_description'],                'Price'                 => ($record['item_price']) ? money_format("%n", $record['item_price']) : '',                'Quantity'              => $record['item_quantity'],                'Manufacturer'          => $record['item_manufacturer'],                'URL'                   => $record['item_url'],                '3'                     => "\n",                'Date_Needed'           => ($record['date_needed'] != '0000-00-00') ? $record['date_needed'] : '',                'Criticality'           => ($record['criticality']) ? $this->Criticality_Values_List[$record['criticality']] : '',                '4'                     => "\n",                'Order_Status'          => $record['order_status'],                'Order_Status_Notes'    => $record['order_status_notes'],                'Date_Ordered'          => ($record['date_ordered'] != '0000-00-00') ? $record['date_ordered'] : '',                '5'                     => "\n",                'Actual_Item_Cost'      => ($record['cost_item']) ? money_format("%n", $record['cost_item']) : '',                'Actual_Item_Shipping'  => ($record['cost_shipping']) ? money_format("%n", $record['cost_shipping']) : '',                'Document_Reference'    => $record['ref_document_link'],            );                                                // ----- make the body -----            $body = "An APDM purchase request tied to your email address has been created or updated. Please see the details below:\n\n";                        foreach ($arr as $title => $value) {                $title  = str_replace('_', ' ', $title);                $value  = ($value) ? $value : '';                                if ($value == "\n") {                    $body .= "\n";                } else if ($title && $value) {                    $body .= "<b>{$title}</b>: {$value}\n";                }            }                                    if ($this->Email_Type_Html) {                // ----- convert to HTML encoding for new lines                $body = nl2br($body);                $body = "<div style='border:5px solid #003399; margin:10px; padding:10px;'>{$body}</div>";                            } else {                // ----- remove HTML formatting                $body = str_replace(array('<b>', '</b>',), '', $body);            }                                    // ----- make the headers -----            $headers  = 'MIME-Version: 1.0' . "\r\n";            $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";            $headers .= "From: {$this->From_Name} <{$this->From_Email}>" . "\r\n";                                    // ----- make the subject line -----            $arr_search     = array('@@ID@@', '@@ORDERSTATUS@@');            $arr_replace    = array($pm_purchase_list_id, $record['order_status']);            $subject        = str_replace($arr_search, $arr_replace, $this->Email_Subject);                                    // ----- try to send the email -----            if ($passed) {                if (mail($recipient, $subject, $body, $headers)) {                    $output = "                    <div style='min-width:300px; min-height:200px; font-size:14px;'>                        <div>To: {$recipient}</div><br />                        <div style='color:blue;'>Message successfully sent!</div>                    </div>                    ";                    echo $output;                } else {                    $output = "                    <div style='min-width:300px; min-height:200px; font-size:14px;'>                        <div>To: {$recipient}</div><br />                        <div style='color:red;'>Message delivery failed!</div>                    </div>                    ";                    echo $output;                }            }                } else {            $this->EchoVar('ERROR', "{$this->Classname} :: SendEmailUpdate() :: No record found. Email not sent.", 'red');        }    }        public function GetRecord_PurchaseList($pm_purchase_list_id)    {        $record = $this->SQL->GetRecord(array(            'table' => 'pm_purchase_list',            'keys'  => '*',            'where' => "pm_purchase_list_id='{$pm_purchase_list_id}'",        ));        $this->EchoQuery();                return $record;    }            }  // -------------- END CLASS --------------