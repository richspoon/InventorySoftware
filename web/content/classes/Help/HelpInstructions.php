<?phpclass Help_HelpInstructions extends BaseClass{    public $Show_Query                  = false;    public $Classname                   = '';        public $Show_Id_In_Window_Title     = false;    // (false) TRUE = show the help id record in the window title    public $Help_Instructions_Id        = 0;        // will hold value                public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-04-18',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-08-27',            'Filename'      => $this->Classname,            'Version'       => '1.2',            'Description'   => 'Managing help instructions for website',            'Update Log'    => array(                '2013-04-18_1.0'    => "Module Created",                '2013-04-22_1.1'    => "Added function GetHelpContent()",                '2013-08-27_1.2'    => "Added video link",            ),        );                                        // ========== GET VARIABLES PASSED INTO THE CLASS ==========        $this->SetParameters(func_get_args());        $this->Help_Instructions_Id = $this->GetParameter(0);                                        // ========== CONFIGURE THE DATABASE FIELDS ==========        $this->Table                = 'help_instructions';        $this->Add_Submit_Name      = 'HELP_INSTRUCTIONS_SUBMIT_ADD';        $this->Edit_Submit_Name     = 'HELP_INSTRUCTIONS_SUBMIT_EDIT';        $this->Index_Name           = 'help_instructions_id';        $this->Flash_Field          = 'help_instructions_id';        $this->Default_Where        = '';                                           // additional search conditions        $this->Default_Sort         = '';                                           // field for default table sort        $this->Unique_Fields        = '';        $this->Group_By             = '';        $this->Default_Fields       = 'help_instructions_id, title, instructions, video';                $this->Field_Titles     = array(            "{$this->Table}.help_instructions_id"                       => 'Help Instructions Id',            "{$this->Table}.title"                                      => 'Title',            "{$this->Table}.instructions"                               => 'Instructions',            "{$this->Table}.video"                                      => 'Video',            "{$this->Table}.video_width"                                => 'Width',            "{$this->Table}.video_height"                               => 'Height',            "{$this->Table}.active"                                     => 'Active',            "{$this->Table}.updated"                                    => 'Updated',            "{$this->Table}.created"                                    => 'Created',        );                $this->Join_Array       = array();                                        // ========== CONFIGURE OTHER INFORMATION ==========        $this->Edit_Links_Count     = 5;        $this->Default_Values       = array();      // default values for the FormArray        $this->Use_Selection_Tab    = true;         // (TRUE) false = hide the search tab on the table        $this->Default_List_Size    = 1000;         // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window            } // -------------- END __construct --------------    public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $action = Get('action');        switch ($action) {                        case 'displayhelp':                echo $this->DisplayHelp($this->Help_Instructions_Id);            break;                                    case 'add':                // ----- Adding a new record                $this->AddRecord();            break;                        case 'edit':                // ----- Edit an existing record                $this->EditRecord($this->Inventory_Production_Board_Id);            break;                        case 'list':            default:                // ----- display list of all assemblies that bave been built                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                        $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                        // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                        switch ($action) {                        default:                $result = '';                $return = ($result) ? 1 : 0;            break;                    }                echo $return;    }            public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE OF ALL RECORDS ============                parent::ProcessTableCell($field, $value, $td_options, $id);                switch ($field) {                        default:                                /*                $CLASS_EXECUTE_LINK     = '/office/class_execute';                                                // ----- create print link                 $barcode                = $this->GetInventoryBarcodeFromID($id);                $sku                    = $this->GetInventoryItemRetailerCodeFromBarcode($barcode);                $description            = $this->GetInventoryItemDescriptionFromBarcode($barcode);                $eq_print               = EncryptQuery("class=Dymo_PrintInventoryLabel;v1={$barcode};v2={$sku};v3={$description};");                $link_print             = $CLASS_EXECUTE_LINK . '?eq=' . $eq_print . '&action=';                $script_print           = "top.parent.appformCreate('Window', '{$link_print}', 'apps'); return false;";                                                // ----- create value report link                $eq_value               = EncryptQuery("class=Inventory_InventoryProducts;v1={$barcode};");                $link_value             = $CLASS_EXECUTE_LINK . '?eq=' . $eq_value . '&action=valuereport';                $script_value           = "top.parent.appformCreate('Window', '{$link_value}', 'apps'); return false;";                                // ----- output the action buttons                $col_view   = ($this->Flags['view'] == 'false')   ? ''    : "<a href=`#` class=`row_view`         title=`View`            onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_edit   = ($this->Flags['edit'] == 'false')   ? ''    : "<a href=`#` class=`row_edit`         title=`Edit`            onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_delete = ($this->Flags['delete'] == 'false') ? ''    : "<a href=`#` class=`row_delete`       title=`Delete`          onclick=`tableDeleteClick('@IDX@','@VALUE@','@EQ@'); return false; `></a>";                $col_value  = ($this->Flags['value'] == 'false')  ? ''    : "<a href=`#` class=`row_dollarsign`   title=`Value Report`    onclick=`{$script_value}; return false;`></a>";                $col_print  = ($this->Flags['print'] == 'false')  ? ''    : "<a href=`#` class=`row_print`        title=`Print Label`     onclick=`{$script_print}; return false;`></a>";                                $this->Edit_Links = qqn("                    <td align=`center`>{$col_view}</td>                    <td align=`center`>{$col_edit}</td>                    <td align=`center`>{$col_delete}</td>                    <td align=`center`>{$col_value}</td>                    <td align=`center`>{$col_print}</td>                    ");                */            break;        }    }                    public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                // ----- required javascript functions        //$this->JavascriptToggleFunctionality();                                             // toggling show/hide a div area                                $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">BASIC DETAILS</div>',                "text|Title|title|N|60|255",                'textarea|Instructions|instructions|N|30|15',                'textarea|Video|video|N|30|2',                "text|Width|video_width|N|60|255",                "text|Height|video_height|N|60|255",            'code|</div>',            'code|<br /><br />',                                    "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">INSTRUCTIONS</div>',                'code|<div class="menu_group" style="display:_none;" id="div_menu_group_advanceddetail">',                                        "info|Class|                    You can use any HTML in this description",                                    'code|</div>',            'code|</div>',                    );        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        $FormArray = $this->FormArray_CleanUp($FormArray);                return $FormArray;    }            public function FormArray_CleanUp($FormArray)    {        $field_kickout_string   = 'temp_';                // ----- remove any temp fields from the array so they don't get processed        foreach ($FormArray as $field => $value) {            echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                return $FormArray;    }            public function ShowHelpIndicator($HELP_INSTRUCTIONS_ID)    {        # FUNCTION :: Create the clickable help icon        #        # NOTE :: There is a wierd error in software. If you put an image inside the href to be clickable - the        #         window will open, but be behind the parent. Only clicking text in the href allows the window        #         to open above the parent.                        global $ROOT;        global $CLASS_EXECUTE_LINK;                $return = '';        if ($HELP_INSTRUCTIONS_ID) {                        $id_display             = ($this->Show_Id_In_Window_Title) ? " ({$HELP_INSTRUCTIONS_ID})" : '';            $eq                     = EncryptQuery("class={$this->Classname};v1={$HELP_INSTRUCTIONS_ID};");            $link                   = $CLASS_EXECUTE_LINK . '?eq=' . $eq . '&action=displayhelp';            $script                 = "top.parent.appformCreate('Help Instructions {$id_display}', '{$link}', 'apps'); return false;";                        //$src                    = "/wo/images/menu_icons/help.png";            $src                    = "/wo/images/help_2.png";            $img                    = "(?)";            //$img                    = "<img src='{$src}' alt='Help' height='20' border='0' >";            $return                 = "<a href='#' class='' title='Help' style='text-decoration:none; color:#fff;' onclick=\"{$script};\" >{$img}</a>";                    }                return $return;    }        function MakeModuleHeader($title='', $help_link='')    {        # FUNCTION :: Make a top-of-page help header                $output = "        <div id='dropdownmenu' class='shadow' style='color:#fff; font-size:14px; font-weight:bold;'>            <div style='float:left'>{$title}</div>            <div style='float:right; padding-right:20px;'>{$help_link}</div>            <div class='clear'></div>        </div>        <div class='clear'></div></br>";                return $output;    }            public function DisplayHelp($HELP_INSTRUCTIONS_ID, $NOWRAP=false)    {        # FUNCTION :: Load and display the help and instructions from the database                // ----- make sure an id has been passed in        if (!$HELP_INSTRUCTIONS_ID) {            echo "ERROR :: {$this->Classname} :: DisplayHelp() :: No HELP_INSTRUCTIONS_ID passed into function.";            exit();        }                // ----- get record from the database        $record = $this->SQL->GetRecord(array(            'table' => $this->Table,            'keys'  => '*',            'where' => "help_instructions_id={$HELP_INSTRUCTIONS_ID} and active=1",        ));                // ----- process the record and format it                if ($record) {                        // ----- format the record            $title          = strtoupper($record['title']);                                     // format title            $search         = array("\r\n", "\n", "\r");                                        // what line return types to search for            $instructions   = str_replace($search, '<br />', $record['instructions']);          // make line returns be HTML formatted             $instructions   = html_entity_decode($instructions);                                // convert to HTML characters            $video          = '';                                                               // initialize variable                        if ($record['video']) {                $CLASS_EXECUTE_LINK     = '/office/class_execute';                $path                   = $record['video'];                $videowidth             = (isset($record['video_width'])) ? $record['video_width'] : 0;                $videoheight            = (isset($record['video_height'])) ? $record['video_height'] : 0;                $eq                     = EncryptQuery("class=Help_CamtasiaVideo;v1={$path};v2={$videowidth};v3={$videoheight};");                $link                   = $CLASS_EXECUTE_LINK . '?eq=' . $eq;                $script                 = "top.parent.appformCreate('Window', '{$link}', 'apps'); return false;";                $video                  = "<div style='margin-top:20px; padding-top:0px; border:5px solid #cecece;'>                <table border='0'><tr>                <td valign='center'><img src='/wo/images/play_video.jpg' width='50'></td>                <td valign='center'><a style='color:blue;' href='#' title='View Help Video' onclick=\"{$script}; return false;\">VIEW INSTRUCTIONAL VIDEO</a></td>                </tr></table>                </div>";            }                                    $output = '';            $output .= ($NOWRAP) ? "<div>" : "<div style='width:300px; padding:5px;'>";            $output .= "<div style='font-weight:bold; font-size:14px; color:blue; background-color:#ccc; padding:5px;'>{$title}</div>                        </br>                        {$instructions}                        {$video}                        </div>";        } else {            $output = 'No help information found!';        }                // ----- return formatted help window content        return $output;    }            public function GetHelpContent($HELP_INSTRUCTIONS_ID)    {        # FUNCTION :: Get help contant for injection onto a page - removes wrapping                // ----- make sure an id has been passed in        if (!$HELP_INSTRUCTIONS_ID) {            echo "ERROR :: {$this->Classname} :: GetHelpContent() :: No HELP_INSTRUCTIONS_ID passed into function.";            exit();        }                        // ----- get content and return it        return $this->DisplayHelp($HELP_INSTRUCTIONS_ID, true);    }            }  // -------------- END CLASS --------------