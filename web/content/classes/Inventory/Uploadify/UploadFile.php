<?phpclass Inventory_Uploadify_UploadFile extends Inventory_InventoryBase{        // ===== MODULE SETTINGS ====================    public $Show_Query                  = false;        // (false) TRUE = show all database queries in this module    public $Module_Offline              = false;        // (false) TRUE = show message to user that module is offline    public $Save_To_Database            = false;        // (false) TRUE = save information to database table            // ===== INPUTS ====================    public $Folder_Upload_Base          = "";              // default folder for uploads (can be changed by calling function) (Relative to root) (NEED TRAILING SLASH)    public $Folder_Upload_Subfolder     = "";              // additional directory beyond the base upload destination (can be changed by calling function) (Relative to Folder_Upload_Base) (NEED TRAILING SLASH)    public $UID                         = "";              // UID to link to a record    public $Upload_Type                 = "";              // UID to link to a record    public $Record_Id                   = "";        // ===== OUTPUTS ====================            // ===== GENERAL ====================    public $File_Types_List             = "";                                                   // will hold the file types that get transferred to this->File_Types    public $File_Types                  = array();                                              // File extensions allowed to upload    public $Path_CSS                    = "/jslib/uploadify/uploadify.css";                     // Path and file to CSS file (NO TRAILING SLASH)    public $Path_Script                 = "/jslib/uploadify/jquery.uploadify.min.js";           // Path and file to script file (NO TRAILING SLASH)    public $Path_SWF                    = "/jslib/uploadify/uploadify.swf";                     // Path and filename to SWF file (NO TRAILING SLASH)    public $Path_Handler_File           = "/uploadify/uploadify.php";                           // Path and filename to helper file (NO TRAILING SLASH)    private $Username                   = '';                                                   // will hold login username for record tagging    private $Target_Folder_Mode         = 0777;        private $Upload_Path_Full           = "";               // will hold the path WITh document root    private $Upload_Path_Limited        = "";               // will hold the path WITHOUT document root        //public $Debug = true;        public function  __construct()    {        parent::__construct();                if (!Post('bypass_db_connect')) {            $this->SetSQLInventory();   // set the database connection to the inventory database        }                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-07-09',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-07-19',            'Filename'      => $this->Classname,            'Version'       => '1.1.0',            'Description'   => 'Upload files to the inventory system.',            'Update Log'    => array(                '2013-07-09_1.0.0'  => "Module Created",                '2013-07-19_1.1.0'  => "File types moved to settings and support for upper and lower-case extensions",            ),        );                        $this->SetParameters(func_get_args());                                          // get passed in parameters from class contruct        $this->Upload_Type                              = $this->GetParameter(0);       // store passed in parameter        $this->UID                                      = $this->GetParameter(1);       // store passed in parameter        $this->Record_Id                                = $this->GetParameter(2);       // store passed in parameter                        //$this->File_Types_List = $this->GetSetting('upload_file_extensions');           // get setting from inventory_settings table        //$this->CreateUploadFileTypes();                                                 // store file types to the array                        $this->Username                     = "{$_SESSION['USER_LOGIN']['LOGIN_RECORD']['first_name']} {$_SESSION['USER_LOGIN']['LOGIN_RECORD']['last_name']}";                        $this->Default_Values   = array(            'username_uploaded'     => $this->Username,        );                                    } // -------------- END __construct --------------        public function Execute()    {        echo $this->CheckModuleOffline();                   // display message to user if module is offine        //$passed = $this->CheckUIDFolder();                  // verify folder and UID match        $passed = true;                if (!$passed) {            exit();        }                switch (Get('action')) {            case 'upload':                $this->EchoVar('action', 'UPLOAD');                $this->UploadFile();            break;            default:                $this->AddStyle();                              // add needed styles or stylesheet                $this->AddScript();                             // add needed scripts                $this->AddRecord();                             // ----- Adding a new record            break;        }            }        public function AddStyle()    {        AddStyleSheet("{$this->Path_CSS}");                    // add stylesheet    }        public function AddScript()    {        $timestamp      = time();        $salt           = md5('unique_salt' . $timestamp);        $session_name   = session_name();        $session_id     = session_id();                AddScriptInclude("{$this->Path_Script}");       // add jQuery script        AddScript("                $(function() {                    $('#file_upload').uploadify({                        'formData'          : {},               // info updated in the submit function                        'method'            : 'post',                        'auto'              : false,                        'multi'             : false,                        'simUploadLimit'    : 1,                        'swf'               : '{$this->Path_SWF}',                        'uploader'          : '{$this->Path_Handler_File}',                        'onError': function (event, ID, fileObj, errorObj) {                            alert(errorObj.type + ' Error: ' + errorObj.info);                        },                        'onUploadError' : function(file, errorCode, errorMsg, errorString) {                            alert('The file ' + file.name + ' could not be uploaded: ' + errorString);                        },                        'onUploadSuccess' : function(file, data, response) {                                                        // ----- call function in parent to reload notes area                            LoadFilesArea();                            //ResetForm();                                                        alert('The file ' + file.name + ' was successfully uploaded with a response of ' + response + ':' + data);                        },                        'onUploadComplete' : function(file) {                            //alert('The file ' + file.name + ' finished processing.');                        },                        'onSelect' : function(file) {                            //alert('The file ' + file.name + ' was added to the queue.');                            //$('#file_upload').uploadify('stop');                        }                                            });                });        ");                        // ----- add script for submitting the form        AddScript("            function submitUploadForm() {                // ----- set all the form variables                $('#file_upload').uploadify('settings', 'formData', {                    'timestamp'             : '{$timestamp}',                    'token'                 : '{$salt}',                    'username_uploaded'     : $('#FORM_username_uploaded').val(),                    'reference_uid'         : $('#FORM_reference_uid').val(),                    'file_name_reference'   : $('#FORM_file_name_reference').val(),                    'file_category'         : $('#FORM_file_category  :selected').text(),                    'folder_name'           : $('#FORM_folder_name').val(),                    'source_type'           : $('#FORM_source_type').val(),                    'file_types'            : $('#FORM_file_types').val(),                    '{$session_name}'       : '{$session_id}'                });                                // ----- submit the form                $('#file_upload').uploadify('upload');      // upload and process the file            }                        function ResetForm() {                // ----- reset parts of the upload form                $('#FORM_file_name_reference').val('');                $('#FORM_file_category')[0].selectedIndex = 0;            }        ");                        // ----- add script for checking correct Flash version is availabale        AddScriptOnReady("            var playerVersion = swfobject.getFlashPlayerVersion();              if(playerVersion.major==0){                    swfobject.embedSWF('/images/test.swf', 'get_flash_player', '120', '21','9.0.0','images/expressInstall.swf');              } else{                  $('#get_flash_player').html('');              }         ");                    }        public function DisplayUploadForm()    {        # FUNCTION :: Display form so user can upload files                $this->AddRecord();    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                $this->CreateUploadPath();                                                                      // Create path information        $this->Default_Values['reference_uid']  = $this->UID;                                           // store information        $this->Default_Values['folder_name']    = $this->Upload_Path_Limited;                           // store information        $this->Default_Values['source_type']    = $this->Upload_Type;                                   // store information                $this->File_Types_List                  = $this->GetSetting('upload_file_extensions');          // get setting from inventory_settings table        $this->Default_Values['file_types']     = $this->File_Types_List;                               // store information                $file_category_list     = $this->GetSetting('upload_file_category');              // get values from inventory_settings table        $btn_submit             = MakeButton('positive', 'UPLOAD FILE', '', '', 'btn_add', "submitUploadForm()", 'button', 'btn_add');                $base_array = array(                //"form|post|upload_file_form",                                "code|<div class='shadow form_section_wrapper'>",                'code|<div style="padding-right:20px;">',                                                'hidden|username_uploaded',                        'hidden|reference_uid',                        'hidden|folder_name',                        'hidden|source_type',                        'hidden|file_types',                                                #'text|Username|username_uploaded|N|50|255',                        #'text|Reference UID|reference_uid|N|50|255',                        #'text|Folder Name|folder_name|N|50|255',                        #'text|Source Type|source_type|N|50|255',                        #'text|File Types|file_types|N|50|255',                                                                                                "code|<div style='min-height:100px;'>",                                                "code|<div style='align:center; text-align:center;'>",                        "code|<div id='queue'></div>",                        "code|<input id='file_upload' name='file_upload' type='file' multiple='true'>",                        "code|</div>",                                            //    'text|Alternate Filename|file_name_reference|N|50|255',                    //    "select|File Category|file_category|N||{$file_category_list}",                                                //"code|<div style='align:center; text-align:center;'>",                        "info||{$btn_submit}",                        //"code|</div>",                                                                        // ----- get flash player if not present                        "code|  <div id='get_flash_player'>                                <a href='http://www.adobe.com/go/getflashplayer'>                                 <img src='http://www.adobe.com/images/shared/download_buttons/get_flash_player.gif' alt='Get Adobe Flash player' /></a>                                </div>",                                                        "code|</div>",                                "code|</div>",                "code|</div>",            );                    if ($this->Action == 'ADD') {            //$base_array[] = "submit|Add Record|$this->Add_Submit_Name";            //$base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            //$base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            //$base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }            }            public function CreateUploadPath()    {        # FUNCTION :: Create the actual upload path                global $ROOT;                if (!$this->Upload_Type) {            $error = "No Upload_Type";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                // ----- determine the subfolder to use        switch ($this->Upload_Type) {            case 'salesorder':            case 'salesorders':                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_path_salesorder');                        // get values from inventory_settings table                $this->Folder_Upload_Subfolder      = $this->UID;                                if (!$this->UID) {                    if ($this->Record_Id) {                        $this->UID                      = $this->GetSalesOrderUIDFromRecordID($this->Record_Id);                        $this->Folder_Upload_Subfolder  = $this->UID;                    } else {                        $error = "NO UID or Record_Id";                        $this->AddError($this->Classname, __FUNCTION__, $error);                        $this->EchoError($this->Classname, __FUNCTION__, $error, true);                        exit();                    }                }            break;                        case 'purchaseorder':            case 'purchaseorders':                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_path_purchaseorder');                        // get values from inventory_settings table                $this->UID                          = $this->UID;                $this->Folder_Upload_Subfolder      = $this->UID;            break;                        case 'inventorymovement':            case 'inventorymovements':                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_path_inventorymovement');                        // get values from inventory_settings table                $this->UID                          = $this->UID;                $this->Folder_Upload_Subfolder      = $this->UID;            break;                        case 'product':            case 'products':                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_path_products');                        // get values from inventory_settings table                $this->Folder_Upload_Subfolder      = $this->UID;                                if (!$this->UID) {                    if ($this->Record_Id) {                        $this->UID                      = $this->GetBarcodeFromRecordID($this->Record_Id);                        $this->Folder_Upload_Subfolder  = $this->UID;                    } else {                        $error = "NO UID or Record_Id";                        $this->AddError($this->Classname, __FUNCTION__, $error);                        $this->EchoError($this->Classname, __FUNCTION__, $error, true);                        exit();                    }                }            break;                        default:                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_rootpath');                        // get values from inventory_settings table                $this->UID                          = $this->Record_Id;                $this->Folder_Upload_Subfolder      = "{$this->Upload_Type}_{$this->Record_Id}";            break;        }                // ----- prepare the path information        $root           = rtrim($ROOT,'/') . '/';           // make sure / on both ends        $subfolder_1    = trim($this->Folder_Upload_Base,'/') . '/';            // make sure no / on start and / on end        $subfolder_2    = trim($this->Folder_Upload_Subfolder,'/') . '/';       // make sure no / on start and / on end                // ----- store the path information        $this->Upload_Path_Full         = $root . $subfolder_1 . $subfolder_2;        $this->Upload_Path_Limited      = '/' . $subfolder_1 . $subfolder_2;    }                public function UploadFile()    {        # FUNCTION :: Upload file to the uploads directory                global $FORM_VAR;                        $output                 = "";                                               // initialize variable        $passed                 = true;                                             // holds status to go ahead and upload / make db entry        $verifyToken            = md5('unique_salt' . $_POST['timestamp']);         // verify security token                $username_uploaded      = Post('username_uploaded');                        // Get posted variable        $reference_uid          = Post('reference_uid');                            // Get posted variable        $folder_name            = Post('folder_name');                              // Get posted variable        $file_name_reference    = Post('file_name_reference');                      // Get posted variable        $file_category          = Post('file_category');                            // Get posted variable        $source_type            = Post('source_type');                              // Get posted variable        $file_types             = Post('file_types');                               // Get posted variable                $file_category          = ($file_category == $FORM_VAR['start_select']) ? '' : $file_category;       // make sure valid file category                $this->Folder_Upload_Subfolder  = $folder_name;                             // store folder to upload file to        $this->File_Types_List          = $file_types;                              // store the file types passed in        $this->CreateUploadFileTypes();                                             // store file types to the array                        if (false) {            $output .= "\n\n file_types ==> $file_types";            $output .= ArrayToStr($_POST);            $output .= ArrayToStr($_FILES);            $output .= "\n\n username_uploaded ==> $username_uploaded";            $output .= "\n\n reference_uid ==> $reference_uid";            $output .= "\n\n folder_name ==> $folder_name";            $output .= "\n\n file_name_reference ==> $file_name_reference";            $output .= "\n\n file_category ==> $file_category";        }                        global $ROOT;        if (true) {        if (!empty($_FILES) && $_POST['token'] == $verifyToken) {                        // initialize variables            $fileParts      = pathinfo($_FILES['Filedata']['name']);            $tempFile       = $_FILES['Filedata']['tmp_name'];            $final_name     = $_FILES['Filedata']['name'];            $targetPath     = $ROOT . $this->Folder_Upload_Subfolder;            $targetFile     = rtrim($targetPath,'/') . '/' . $final_name;                                    // check if directory exists and creat it if not            if (!file_exists($targetPath)) {                $recursive_flag     = true;                $result             = mkdir($targetPath, $this->Target_Folder_Mode, $recursive_flag);                $passed             = ($result) ? true : $passed;            }                                    // check if file exists and creat it if not            if (file_exists($targetFile)) {                                $file_name          = $final_name;                $path_file_temp     = rtrim($targetPath,'/') . '/' . $final_name;     // store the full path and file we're checking                                for ($i=1; file_exists($path_file_temp); $i++) {                    $file_ext                   = (strpos($file_name,'.')===false?'':'.'.substr(strrchr($file_name, "."), 1));                    $final_name_new_temp        = substr($file_name, 0, strlen($file_name)-strlen($file_ext)).'['.$i.']'.$file_ext;                    $path_file_temp             = rtrim($targetPath,'/') . '/' . $final_name_new_temp;                }                                                $final_name     = $final_name_new_temp;                                 // store the new filename                $targetFile     = rtrim($targetPath,'/') . '/' . $final_name;           // store the new path & filename            }                                    // ----- perform file checks            //$passed         = ($this->CheckFileExist($final_name)) ? false : $passed;            //$passed         = (!$this->CheckFileNameLength($final_name)) ? false : $passed;            //$passed         = (!$this->CheckFileNameEnglishCharacters($final_name)) ? false : $passed;            // else {            //    $output .= '\n\n Failed filename checks';            //}                                    // ----- verify file TYPE can be uploaded            $extension = strtolower($fileParts['extension']);            if (!in_array($extension, $this->File_Types)) {                $output .= "\n\n ERROR :: Invalid file type.";                $passed = false;            }                                    // ----- move the file (if allowed)            if ($passed) {                                // ----- MOVE FILE                move_uploaded_file($tempFile,$targetFile);                $output .= "\n\n File Uploaded";                                                // ----- DATABASE RECORD                if ($this->Save_To_Database) {                    $db_record = array(                        'folder_name'               => $this->Folder_Upload_Base . $this->Folder_Upload_Subfolder,                        'file_name_original'        => $final_name,                        'file_name_reference'       => $file_name_reference,                        'file_category'             => $file_category,                        'username_uploaded'         => $username_uploaded,                        'reference_uid'             => $reference_uid,                        'source_type'               => $source_type,                    );                                        // ----- add the record to database                    $result = $this->SQL->AddRecord(array(                        'table'     => 'inventory_files',                        'keys'      => $this->SQL->Keys($db_record),                        'values'    => $this->SQL->Values($db_record),                    ));                    //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, false);                                        // ----- return success variable                    $return = (!$result) ? 0 : 1;                    $output .= ($result) ? "\n\n DATABASE RECORD CREATED" : "\n\n ERROR :: FAILED DATABASE RECORD";                }            }                    } else {            $output .= "No file submitted";        }        }                //echo "UID ==> " . Post('uid') . "</br></br>";        //$output .=  "\n\n targetFile ==> $targetFile";        //$output .= "\n\n\n more text here \n\n\n";                        echo $output;    }        public function CheckFileExist($FILENAME="")    {        # FUNCTION :: Determine if the given file exists in the upload folder        $output = 0;                global $ROOT;                if ($FILENAME) {            if (file_exists($ROOT . $this->Folder_Upload_Base . $this->Folder_Upload_Subfolder . $FILENAME)) {                $output = true;            } else {                $output = false;            }        }                return $output;    }        public function CheckFileNameLength ($FILENAME="")    {        /**        * Check $_FILES[][name] length.        *        * @param (string) $FILENAME - Uploaded file name.        * @author Yousef Ismaeil Cliprz.                FUNCTION :: Don't let filenames be over 255 characters        */        if ($FILENAME) {            return (bool) ((mb_strlen($FILENAME,"UTF-8") > 225) ? true : false);        } else {            return false;        }    }        public function CheckFileNameEnglishCharacters ($FILENAME="")    {        /**        * Check $_FILES[][name]        *        * @param (string) $FILENAME - Uploaded file name.        * @author Yousef Ismaeil Cliprz                FUNCTION :: Verify filename only has english characters in it        */                if ($FILENAME) {            return (bool) ((preg_match("`^[-0-9A-Z_\.]+$`i",$FILENAME)) ? true : false);        } else {            return false;        }    }        public function CheckModuleOffline()    {        # FUNCTION :: Show a message to user if module is currently offline.                $return = "";        if ($this->Module_Offline) {            $style      = "border:1px solid red; color:red; border:5px; margin:5px; font-size:14px; font-weight:bold;";            $message    = "Module is currently offline. Please check back later.";            $return     = "<div style='{$style}'>{$message}</div>";        }                return $return;    }        public function CheckUIDFolder()    {        # FUNCTION :: Make sure folder and UID match                $output         = true;        $folder_check   = trim($this->Folder_Upload_Subfolder, '/');          // remove backslashes from folder                if ($folder_check != $this->UID) {            echo "<h1 style='color:red;'>ERROR :: UID AND FOLDER DO NOT MATCH !!!</h1>";            $output = false;        }                return $output;    }            private function CreateUploadFileTypes()    {        if (!$this->File_Types_List) {            $error = "No File_Types_List ()";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                // ----- convert the list of files to an array        $parts = explode(',', $this->File_Types_List);        foreach ($parts AS $part) {            array_push($this->File_Types, $part);        }    }                /*    Uploadify    Copyright (c) 2012 Reactive Apps, Ronnie Garcia    Released under the MIT License <http://www.opensource.org/licenses/mit-license.php>     */        }  // -------------- END CLASS --------------