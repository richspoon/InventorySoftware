<?phpclass Inventory_Uploadify_UploadedFiles extends Inventory_InventoryBase{        // ===== MODULE SETTINGS ====================    public $Show_Query                  = false;        // (false) TRUE = show all database queries in this module    public $Module_Offline              = false;         // (false) TRUE = show message to user that module is offline            // ===== INPUTS ====================    public $Folder_Upload_Base          = "/uploads/";              // default folder for uploads (can be changed by calling function) (Relative to root) (NEED TRAILING SLASH)    public $Folder_Upload_Subfolder     = "";                       // additional directory beyond the base upload destination (can be changed by calling function) (Relative to Folder_Upload_Base) (NEED TRAILING SLASH)    public $UID                         = 0;                        // will hold UID for this record    public $Upload_Type                 = "";            // ===== OUTPUTS ====================        // ===== OTHER VARIABLES ====================    public $File_Types                  = array('jpg','jpeg','gif','png', 'pdf');               // File extensions allowed to upload    public $Path_CSS                    = "/jslib/uploadify/uploadify.css";                     // Path and file to CSS file (NO TRAILING SLASH)    public $Path_Script                 = "/jslib/uploadify/jquery.uploadify.min.js";           // Path and file to script file (NO TRAILING SLASH)    public $Path_SWF                    = "/jslib/uploadify/uploadify.swf";                      // Path and filename to SWF file (NO TRAILING SLASH)    public $Path_Handler_File           = "/uploadify/uploadify.php";        // Path and filename to helper file (NO TRAILING SLASH)    	public $Table_Width                         = 500;    public $Files_Font_Size                     = 13;    public $Files_Font_Size_2                   = 10;    private $Special_Prefix                     = "FILE_";    private $Files_Folder_Location              = "";    public $Existing_Files_Count                = 0;    private $Username                           = '';                                                   // will hold login username for record tagging            private $Upload_Path_Full           = "";               // will hold the path WITh document root    private $Upload_Path_Limited        = "";               // will hold the path WITHOUT document root                public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-07-10',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'View files that have been uploaded to the inventory system.',            'Update Log'    => array(                '2013-07-10_1.0'    => "Module Created",            ),        );                $this->Table            = 'inventory_files';        $this->Add_Submit_Name  = 'INVENTORY_FILES_SUBMIT_ADD';        $this->Edit_Submit_Name = 'INVENTORY_FILES_SUBMIT_EDIT';        $this->Index_Name       = 'inventory_files_id';        $this->Flash_Field      = 'inventory_files_id';        $this->Default_Where    = '';                               // additional search conditions        $this->Default_Sort     = '';                               // field for default table sort                $this->Field_Titles = array(            "{$this->Table}.inventory_files_id"         => "ID",            "{$this->Table}.folder_name"                => "Folder Location",            "{$this->Table}.file_name_original"         => "Filename Original",            "{$this->Table}.file_name_reference"        => "Filename Reference",            "{$this->Table}.file_category"              => "File Category",            "{$this->Table}.username_uploaded"          => "Uploading User",            "{$this->Table}.reference_uid"              => "UID Reference",            "{$this->Table}.note"                       => "Note",                        "{$this->Table}.active"                     => 'Active',            "{$this->Table}.updated"                    => 'Updated',            "{$this->Table}.created"                    => 'Created',        );                        $this->Join_Array = Array();        $this->Group_By         = "";        $this->Default_Fields   = 'folder_name,file_name_original,file_name_reference,file_category,username_uploaded,reference_uid,note';        $this->Edit_Links_Count = 5;        $this->Unique_Fields    = '';                $this->Default_Values   = array(                    );                $this->Use_Selection_Tab    = true;         // (TRUE) false = hide the search tab on the table        $this->Default_List_Size    = 50;           // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window                        $this->Username                     = "{$_SESSION['USER_LOGIN']['LOGIN_RECORD']['first_name']} {$_SESSION['USER_LOGIN']['LOGIN_RECORD']['last_name']}";            } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $this->ModuleOfflineMessage();  // show module offline essage - if activated                //echo "<div style='padding:5px; background-color:pink; font-size:14px;'>SALES ORDER DEV</div>";                $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;                        case 'list':            default:                // ----- display list of all assemblies that can be built				#$this->AddStyle();                #$this->AddScript();                #$this->ListTableHeader();                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {            case 'delete_file':                                $output_error           = "";                $passed                 = false;                $path                   = Post('path');                $user                   = Post('user');                $inventory_files_id     = Post('ifid');                                 $output_error .= " \n path ---> {$path}";                $output_error .= " \n user ---> {$user}";                $output_error .= " \n inventory_files_id ---> {$inventory_files_id}";                                if ($path && $user) {                    //$this->EchoVar('path', $path);                    //$this->EchoVar('user', $user);                                        $passed = $this->DeleteFileFolder($path);                    $output_error .= " \n folder passed ---> {$passed}";                                        if ($passed && $inventory_files_id) {                        $result     = $this->DeleteFileDatabase($inventory_files_id, $user);                        $passed     = (!$result) ? false : $passed;                                                $output_error .=  " \n db result ---> {$result}";                        $output_error .=  " \n db passed ---> {$passed}";                                            }                                    } else {                    $passed = false;                }                                                if (!$passed) {                    echo $output_error;                }                                $return = ($passed) ? 1 : 0;            break;            default:            break;        }                echo $return;    }        public function AddScript()    {                $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                AddScript("            function DeleteFile(divId, filePath, fileId) {                var result = confirm('Are you sure you want to delete file?');                if (result==true) {                    var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=delete_file';                    var data    = { path:filePath, ifid:fileId, user: '{$this->Username}'};                    $.post(url, data)                        .done(function(data) {                            if (data == 1) {                                alert('SUCCESSFULLY DELETED FILE');                                $('#' + divId).fadeOut('slow');             // ----- fade out the div area                            } else {                                alert('ERROR DELETING FILE. Message: ' + data);                                //alert(data);                            }                    });                }            }        ");    }            public function ViewAllRecords($RETURN=false)    {        # FUNCTION :: View all the records tied to a specific UID                if (!$this->UID) {            $error = "Missing UID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $records        = $this->GetExisting($this->UID);        $output         = '';        $table_rows     = '';                if ($records) {            foreach ($records as $id => $record) {                $output .= $this->FormatRecordForOutput($record);            }                    } else {            $output = "NO FILES FOUND FOR RECORD";        }                if ($RETURN) {            return $output;        } else {            echo $output;        }    }            public function GetExisting($UID)    {        $records = $this->SQL->GetArrayAll(array(            'table' => $this->Table,            'keys'  => '*',            'where' => "reference_uid='{$UID}' AND active=1",            'order' => "",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                return $records;    }        public function GetExistingCount($UID)    {        $count = $this->SQL->Count(array(            'table' => $this->Table,            'where' => "reference_uid='{$UID}' AND active=1",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                return $count;    }                    public function ViewAllRecordsFromFolder($RETURN=false)    {        # FUNCTION :: View all the records tied to a specific UID                if (!$this->UID) {            $error = "Missing UID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $records        = $this->GetExistingFromFolder($this->UID);        $output         = '';        $table_rows     = '';                if ($records) {            foreach ($records as $id => $record) {                $output .= $this->FormatRecordForOutput($record);            }                    } else {            $output = "NO FILES FOUND FOR RECORD";        }                if ($RETURN) {            return $output;        } else {            echo $output;        }    }        public function CreateUploadPath()    {        # FUNCTION :: Create the actual upload path                if (!$this->Upload_Type) {            $error = "No Upload_Type";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                // ----- determine the subfolder to use        switch ($this->Upload_Type) {            case 'salesorder':            case 'salesorders':                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_path_salesorder');                        // get values from inventory_settings table                $this->Folder_Upload_Subfolder      = $this->UID;                                if (!$this->UID) {                    if ($this->Record_Id) {                        $this->UID                      = $this->GetSalesOrderUIDFromRecordID($this->Record_Id);                        $this->Folder_Upload_Subfolder  = $this->UID;                    } else {                        $error = "NO UID or Record_Id";                        $this->AddError($this->Classname, __FUNCTION__, $error);                        $this->EchoError($this->Classname, __FUNCTION__, $error, true);                        exit();                    }                }            break;            case 'purchaseorder':            case 'purchaseorders':                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_path_purchaseorder');                        // get values from inventory_settings table                $this->UID                          = $this->UID;                $this->Folder_Upload_Subfolder      = $this->UID;            break;            case 'product':            case 'products':                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_path_products');                        // get values from inventory_settings table                $this->Folder_Upload_Subfolder      = $this->UID;                                if (!$this->UID) {                    if ($this->Record_Id) {                        $this->UID                      = $this->GetBarcodeFromRecordID($this->Record_Id);                        $this->Folder_Upload_Subfolder  = $this->UID;                    } else {                        $error = "NO UID or Record_Id";                        $this->AddError($this->Classname, __FUNCTION__, $error);                        $this->EchoError($this->Classname, __FUNCTION__, $error, true);                        exit();                    }                }            break;            default:                $this->Folder_Upload_Base           = $this->GetSetting('upload_file_rootpath');                        // get values from inventory_settings table                $this->UID                          = $this->Record_Id;                $this->Folder_Upload_Subfolder      = "{$this->Upload_Type}_{$this->Record_Id}";            break;        }                // ----- prepare the path information        global $ROOT;                $root           = rtrim($ROOT,'/') . '/';           // make sure / on both ends        $subfolder_1    = trim($this->Folder_Upload_Base,'/') . '/';            // make sure no / on start and / on end        $subfolder_2    = trim($this->Folder_Upload_Subfolder,'/') . '/';       // make sure no / on start and / on end                // ----- store the path information        $this->Upload_Path_Full         = $root . $subfolder_1 . $subfolder_2;        $this->Upload_Path_Limited      = '/' . $subfolder_1 . $subfolder_2;    }            public function GetExistingFromFolder($UID)    {        # FUNCTION :: Get files in a given directory                $this->UID = $UID;        $this->CreateUploadPath();                $records                        = array();                                          // initialize variable        $files                          = glob($this->Upload_Path_Full  . '*');             // get all files in the folder        $date_format                    = $this->GetSetting('uploaded_file_date_format');   // get values from inventory_settings table                // create a record for each file        foreach($files as $file) {                        $file_time      = date ($date_format, filemtime($file));                        // get file time            $file_size      = $this->FormatSizeUnits(filesize($file));                      // get file size            $file           = str_replace($this->Upload_Path_Full, '', $file);              // remove path information                        $records[$file] = array(                'reference_uid'         => $UID,                'folder_name'           => $this->Upload_Path_Limited,                'file_name_original'    => $file,                'file_name_reference'   => '',                'file_category'         => '',                'username_uploaded'     => 'Unknown',                'file_size'             => $file_size,                'file_time'             => $file_time,            );        }                #$this->EchoVar('records', $records);        return $records;    }                    public function ViewAllRecordsFromFolderWithDatabaseCrosscheck()    {        # FUNCTION :: Get all files from a folder, then determine if a DB record exists for it                $output = '';                        if (!$this->UID) {            $error = "Missing UID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- get the records        $records_folder         = $this->GetExistingFromFolder($this->UID);             // get files found in folder        $records_database       = $this->GetExisting($this->UID);                       // get files found in database                        // ----- clean up the records        if ($records_folder || $records_database) {            $records_folder                 = $this->CleanUpFolderAndDatabaseRecords($records_folder, $records_database);        }                        // ----- get count of records        $this->Existing_Files_Count     = count($records_folder);                        // ----- format records        if ($records_folder) {            foreach ($records_folder as $id => $record) {                $output .= $this->FormatRecordForOutput($record);            }        } else {            $output = "NO FILES FOUND FOR RECORD";        }                        return $output;    }        private function CleanUpFolderAndDatabaseRecords($FOLDER, $DATABASE)    {        # FUNCTION :: Adjust database to match files found in folder                $passed = true;                // ----- change keys on database records        $database_temp = array();        foreach ($DATABASE as $id => $record) {            $database_temp[$record['file_name_original']] = $record;        }        $DATABASE = $database_temp;                        //$this->EchoVar('FOLDER', $FOLDER);        //$this->EchoVar('DATABASE', $DATABASE);                                // ----- update folder records with database information        foreach ($FOLDER as $id => $record) {            if (isset($DATABASE[$id])) {                                // ----- record exists in database                                // get extension from original filename for the reference filename                $parts      = explode('.', $record['file_name_original']);                $part_last  = count($parts);                $ext        = $parts[$part_last-1];                $filename   = ($DATABASE[$id]['file_name_reference'] != '') ? "{$DATABASE[$id]['file_name_reference']}.{$ext}" : '';                                // update the folder record                $FOLDER[$id]['file_name_reference']     = $filename;                $FOLDER[$id]['file_category']           = $DATABASE[$id]['file_category'];                $FOLDER[$id]['username_uploaded']       = $DATABASE[$id]['username_uploaded'];                $FOLDER[$id]['note']                    = $DATABASE[$id]['note'];                $FOLDER[$id]['inventory_files_id']      = $DATABASE[$id]['inventory_files_id'];                                // remove the database record                unset($DATABASE[$id]);                            } else {                            // ----- record does NOT exist in database - so create it                $db_record = array(                    'reference_uid'         => $this->UID,                    'folder_name'           => $this->Files_Folder_Location,                    'file_name_original'    => $record['file_name_original'],                    'file_name_reference'   => '',                    'file_category'         => '',                    'username_uploaded'     => '',                    'note'                  => 'File found by class Inventory_Uploadify_UploadedFiles :: CleanUpFolderAndDatabaseRecords()',                );                                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_files',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $passed = (!$result) ? false : $passed;                //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                            }        }                        // ----- de-activate remaining database records (where file is no longer present)        foreach ($DATABASE as $id => $record) {                        $db_record = array(                'note'      => $record['note'] . " Record deleted by Inventory_Uploadify_UploadedFiles :: CleanUpFolderAndDatabaseRecords().",                'active'    => 0,            );                        $result = $this->SQL->UpdateRecord(array(                'table'         => 'inventory_files',                'key_values'    => $this->SQL->KeyValues($db_record),                'where'         => "`inventory_files_id`='{$record['inventory_files_id']}' AND `active`=1",            ));            $passed = (!$result) ? false : $passed;            //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);        }                                #$this->EchoVar('FOLDER', $FOLDER);        #$this->EchoVar('DATABASE', $DATABASE);                return $FOLDER;    }        public function FormatRecordForOutput($RECORD)    {        # FUNCTION :: Format a record for output to the screen                //$folder_base    = $this->GetSetting('upload_file_rootpath');        // get values from inventory_settings table        //$folder_base    = rtrim($folder_base,'/') . '/';                    // ensure there's a traling slash on directory        $folder_base    = '';        $folder_sub     = ($RECORD['folder_name'] != '') ? rtrim($RECORD['folder_name'],'/') . '/' : '';          // ensure there's a traling slash on directory                $output         = "";                //$this->EchoVar('RECORD', $RECORD);                if (is_array($RECORD)) {                        $div_id                 = $this->Special_Prefix . str_replace(array('.', ' ') , '_', microtime());            $inventory_files_id     = $RECORD['inventory_files_id'];            $file_link              = $folder_base . $folder_sub . $RECORD['file_name_original'];            $view_link_start        = "<a href='{$file_link}' target='_{$RECORD['file_name_original']}' style='text-decoration:none;'>";            $view_link_end          = "</a>";            $folder_file            = rtrim( $RECORD['folder_name'],'/') . '/' . $RECORD['file_name_original'];             $delete_link            = "<a onclick='DeleteFile(\"{$div_id}\", \"{$folder_file}\", \"{$inventory_files_id}\"); return false;' href='#' style='text-decoration:none; font-color:red; font-weight:bold; color:red;' alt='Delete File'>X</a>";                        $file_name              = ($RECORD['file_name_reference'] != '') ? "<b>Filename:</b> {$view_link_start}{$RECORD['file_name_reference']}{$view_link_end}</br>" : "<b>Filename:</b> {$view_link_start}{$RECORD['file_name_original']}{$view_link_end}</br>";            $file_name_original     = ($RECORD['file_name_original'] != '' && $RECORD['file_name_reference'] != '') ? "<b>Original Name:</b> {$RECORD['file_name_original']}</br>" : '';            #$file_name_extended     = "{$file_name_reference} {$file_name_original}</br>";                        $file_category          = ($RECORD['file_category'] != '' && $RECORD['file_category'] != '-- select --') ? "<b>Type:</b> {$RECORD['file_category']}</br>" : '';                        $user                   = ($RECORD['username_uploaded'] != '') ? "<b>User:</b> {$RECORD['username_uploaded']}</br>" : '';            $file_size              = "<b>Size:</b> {$RECORD['file_size']} </br>";            $file_time              = "<b>Time:</b> {$RECORD['file_time']} </br>";                        $width_col_2            = 300;            $width_col_3            = 30;            $width_col_1            = $this->Table_Width - $width_col_2 - $width_col_3 - 20;                                                $output = "            <div id='{$div_id}' class='pb_day_data' style='width:{$this->Table_Width}px; font-size:{$this->Files_Font_Size}px;'>                <div class='pb_day_data_title' style='display:none;'></div>                <div class='pb_day_data_description' style=''>                    <div style='float:left; width:{$width_col_1}px;'>                        {$file_category}                        {$file_name}                    </div>                                        <div style='float:right; width:{$width_col_3}px; text-align:center;'>                        {$delete_link}                    </div>                                        <div class='' style='float:right; width:{$width_col_2}px; background-color:#ddd; padding:3px; font-size:{$this->Files_Font_Size_2}px;'>                        {$user}                        {$file_size}                        {$file_time}                        {$file_name_original}                    </div>                    <div style='clear:both;'></div>                </div>            </div>            ";        }                                return $output;    }                private function FormatSizeUnits($bytes)    {        if ($bytes >= 1073741824) {            $bytes = number_format($bytes / 1073741824, 2) . ' GB';        } elseif ($bytes >= 1048576) {            $bytes = number_format($bytes / 1048576, 2) . ' MB';        } elseif ($bytes >= 1024) {            $bytes = number_format($bytes / 1024, 2) . ' KB';        } elseif ($bytes > 1) {            $bytes = $bytes . ' bytes';        } elseif ($bytes == 1) {            $bytes = $bytes . ' byte';        } else {            $bytes = '0 bytes';        }        return $bytes;    }        private function DeleteFileFolder($PATH='')    {        # FUNCTION :: Delete an actual file                 global $ROOT;        $output = false;                if ($PATH) {            $ROOT               = rtrim($ROOT,'/') . '/';           // ensure there's a traling slash on directory            $folder_file        = trim($PATH,'/');                  // ensure there's a traling slash on directory            $fullpath           = $ROOT . $folder_file;             // create the path to the file                        unlink($fullpath);                                      // delete file            $exists     = file_exists($fullpath);                   // check if file still exists            $output     = ($exists) ? false : true;                 // store output based on delete success        }                return $output;    }        private function DeleteFileDatabase($IFID='', $USER='')    {        $db_record = array(            'username_deleted'  => $USER,            'active'            => 0,        );                $result = $this->SQL->UpdateRecord(array(            'table'         => 'inventory_files',            'key_values'    => $this->SQL->KeyValues($db_record),            'where'         => "`inventory_files_id`='{$IFID}' AND `active`=1",        ));        $passed = (!$result) ? false : true;        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                return $passed;    }            }  // -------------- END CLASS --------------