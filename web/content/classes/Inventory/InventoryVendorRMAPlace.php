<?phpclass Inventory_InventoryVendorRMAPlace extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Header_Row                  = "Barcode|APDM SKU|Description|QTY|COGS (ea)|DEL";    public $Locked                      = false;        public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-03',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Create a vendor RMA - will draw down inventory',            'Update Log'    => Array(                '2013-01-03_001'  => "Module Created",            ),        );                $this->Classname = get_class($this);                #$this->SetParameters(func_get_args());        #$this->Barcode          = $this->GetParameter(0);        #$this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        #$this->Retailer_Code    = $this->GetParameter(2);                $this->Table                = 'inventory_vendor_rmas';        $this->Index_Name           = 'inventory_vendor_rmas_id';        $this->Default_Sort         = 'rma_number';      // field for default table sort                $this->Field_Titles = array(            "{$this->Table}.inventory_vendor_rmas_id"               => 'Inventory RMA Id',                        "{$this->Table}.rma_number"                             => 'RMA Number',            "{$this->Table}.vendor_rma_number"                      => 'Vendor RMA Number',            "{$this->Table}.vendor"                                 => 'Vendor',            "{$this->Table}.ref_document_url"                       => 'Ref URL',            "{$this->Table}.ref_document_number"                    => 'Ref Number',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.cost_shipping"                          => 'Cost (shipping)',            "{$this->Table}.cost_other"                             => 'Cost (other)',                        "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Status',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',                        #"(SELECT SUM(`price_total`) AS EST_LINE_ITEM_COST FROM `inventory_sales_order_lines` WHERE `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number` AND `inventory_sales_order_lines`.active=1) AS EST_LINE_ITEM_COST" => 'Estimated Line Item Cost',        );                        #$this->Join_Array = Array(        #    'inventory_counts'  => "LEFT OUTER JOIN `inventory_sales_order_lines` ON `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number`",        #);                $this->Default_Fields   = 'rma_number, vendor_rma_number, vendor, date, EST_LINE_ITEM_COST, cost_shipping, cost_other, active';        $this->Unique_Fields    = 'rma_number';                $this->Default_Values   = array(            'status'    => 'open',            'date'      => date('Y-m-d'),        );                        $this->Default_Where        = '';               // additional search conditions        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Close_On_Success     = true;        $this->Edit_Links_Count     = '4';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {                $action = Get('action');        switch ($action) {            case 'add':                $this->AddRecord();            break;                        case 'list':            default:                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        $QDATA = GetEncryptQuery('eq');        $action = Get('action');                //$_GET['show'] = true;                if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                $return = 0;                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => ' inventory_products',                    'keys'  => 'description, retailer_code, barcode, status_retired',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $retired    = ($record['status_retired'] == 1) ? "[Retired] - " : "";                    $cogs       = $this->InventoryItemLastCost($record['barcode']);                                        $arr[] = array(                        'label'             => "{$record['barcode']} - {$retired}{$record['retailer_code']}",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                        'cogs'              => $cogs,                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;        }                echo $return;    }        private function JavascriptAutocomplete()    {        $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_0').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=autocomplete_inventory_lookup',                minChars        : 0,    // how many characters to type before starting function call                selectFirst     : true,                autoFocus       : true,                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_0" ).val( ui.item.label );                    $( "#FORM_temp_1" ).val( ui.item.barcode );                 // store Barcode                    $( "#FORM_temp_2" ).val( ui.item.sku );                     // store APDM SKU                    $( "#FORM_temp_4" ).val( ui.item.description );             // store Description                    $( "#FORM_temp_6" ).val( ui.item.cogs );                    // store COGS value                                        return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "<br>" + item.description + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        private function JavascriptCreateTable()    {        $this->ScriptJSONTableGeneric();                                // Add in the generic code held in the BaseClass        //$this->ScriptCalculatePrice();                                  // Add in the generic code held in the BaseClass                $script = <<<SCRIPT                    // ===== USER DEFINED VARIABLES =====            var targetTextID        = "FORM_autotable_holder";          // defines hidden textarea that will hold the text array            var targetTableDivID    = "autotable_table_display";        // defines the div that wraps the created table            var requiredFieldArray  = ["FORM_temp_1","FORM_temp_5"];            var headerText          = "{$this->Header_Row}";                        var fieldQty            = "FORM_temp_5";                    // In form - field holding quantity            var priceEach           = "FORM_temp_6";                    // In form - field for COGS price each            //var priceTotal          = "FORM_temp_7";                    // In form - field for price total                                    function formTableRow() {                var delimiter       = "|";                var barcode         = $("#FORM_temp_1").val();                var sku             = $("#FORM_temp_2").val();                var description     = $("#FORM_temp_4").val();                var qty             = $("#FORM_temp_5").val();                var priceCOGS       = $("#FORM_temp_6").val();                //var priceTotal      = $("#FORM_temp_7").val();                                // ----- create the string that will be added to table.                // ----- no starting or ending delimiter                // ----- action buttons will be added by other function                var output = barcode + delimiter + sku + delimiter + description + delimiter + qty + delimiter + priceCOGS;                return output;            }                        function clearDataTextboxes() {                // -- clear the textboxes used to search on table data                $("#FORM_temp_0").val('');                $("#FORM_temp_1").val('');                $("#FORM_temp_2").val('');                $("#FORM_temp_4").val('');                $("#FORM_temp_5").val('');                $("#FORM_temp_6").val('');                $("#FORM_temp_7").val('');            }            SCRIPT;        AddScript($script);                AddScriptOnReady("            // -- call table creation function on load            // -- rebuilds table after coming back from form errors            var targetText          = $('#' + targetTextID);        // defines hidden textarea that will hold the text array            var targetTableDiv      = $('#' + targetTableDivID);    // defines the div that wraps the created table            createTableFromTextbox(targetText, targetTableDiv);        ");    }        public function GetLockedStatus($RMA_NUMBER)    {        // ----- determine if sales order shold be locked        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_vendor_rma_sent",            'keys'      => "*",            'where'     => "`rma_number`='{$RMA_NUMBER}' AND active=1",        ));        $this->EchoQuery();                $locked = ($records) ? true : false;                return $locked;    }        public function GetExistingRecords($RMA_NUMBER)    {        // ----- get all records from the database        $so_number = $this->GetSalesOrderNumberFromID($this->Edit_Id);        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_vendor_rma_lines",            'keys'      => "inventory_vendor_rma_lines.*, inventory_products.description, inventory_products.retailer_code",            'where'     => "`rma_number`='{$RMA_NUMBER}' and `inventory_vendor_rma_lines`.`active`=1",            'joins'     => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_vendor_rma_lines`.`barcode`",        ));        $this->EchoQuery();                // ----- format records for output        $count = 1;        $table = $this->Header_Row . "\n";        foreach ($records as $record) {            $del            = ($this->Locked) ? "LOCKED" : "<div class='button_delete' id='row_1' onclick='tableDeleteRow(\" row_{$count} \")'>X</div>";            $price_total    = money_format("%n", $record['price_total']);            $price_each     = money_format("%n", ($record['price_total'] / $record['quantity']));                        $table .= "{$record['barcode']}|{$record['retailer_code']}|{$record['description']}|{$record['quantity']}|{$price_each}|{$del}\n";            $count++;        }                // ----- put formatted records into POST array and add javascript to add extra needed line break        $_POST['FORM_autotable_holder'] = $table;        AddScriptOnReady('$("#FORM_autotable_holder").val($("#FORM_autotable_holder").val() + "\n");');    }        public function SetFormArrays()    {        AddStylesheet("/css/inventory.css??20121108-1");                // ----- if editing record - need to get the records from database and put on the page        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                        $rma_number = $this->GetVendorRMANumberFromID($this->Edit_Id);            $this->Locked = $this->GetLockedStatus($rma_number);            $this->GetExistingRecords($rma_number);                        if ($this->Locked) {                //echo "<h2>RMA IS LOCKED</h2>";                AddScriptOnReady("$('#FORM_rma_number').val('{$rma_number}');");                AddScriptOnReady("$('#temp_rmanumber').html('{$rma_number}');");                AddScriptOnReady("$('#FORM_temp_locked').val(1);");            }        }                        // ----- Javascript Functionality -----        $this->JavascriptDisplaySessionMessage();   // Display alert messages        $this->JavascriptAutocomplete();            // Javascript for autocomplete functionality        $this->JavascriptCreateTable();             // Javascript for creating table from array of data        $this->JavascriptToggleFunctionality();     // Javascript for taggling show/hide a div area                $this->JavascriptDatepickerFunctionality(array('FORM_date','FORM_commission_date'));        $this->JavascriptDisableFunctionality(array('FORM_temp_1','FORM_temp_2','FORM_temp_4'));        $this->JavascriptInputNoBorder(array('FORM_temp_1','FORM_temp_2','FORM_temp_4'));                                $btn_add            = MakeButton('positive', 'ADD', '', '', 'btn_add', "addDataToTable()", 'button', 'btn_add');        $btn_clear          = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');                        // ----- create list of all previously entered vendors        $vendors        = $this->SQL->GetFieldValues('inventory_purchase_orders', 'vendor', "vendor != ''");        $vendor_list    = Form_ArrayToList($vendors);                        if (!$this->Locked) {            $base_array = array(                "form|$this->Action_Link|post|db_edit_form",                                "code|<div style='min-width:60px;'>&nbsp;</div>",                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">RMA INFORMATION</div>',                    'text|RMA Number|rma_number|Y|60|255',                    'text|Vendor RMA Number|vendor_rma_number|N|60|255',                    'text|Date|date|N|20|20',                    "selecttext|Vendor|vendor|N|40|80||$vendor_list",                    #'text|Shipping Cost|cost_shipping|N|20|20',                    #'text|Other Cost|cost_other|N|20|20',                    'textarea|Notes|notes|N|60|2',                'code|</div>',                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                                        "text|Search|temp_0|N|60|100",                    "text|Barcode|temp_1|N|60|100",                    "text|APDM SKU|temp_2|N|60|100",                    "text|Description|temp_4|N|60|100",                                        "titletemplate|{$this->title_template}",                    "infotemplate|{$this->info_template}",                                        "code|<div style='padding-left:120px;'><table><tr>",                    "code|<td>",                        "text|QTY|temp_5|N|10|100",                    "code|</td>",                    "code|<td>",                        "text|COGS (ea)|temp_6|N|10|100",                    "code|</td>",                    "code|<td>",                                        "code|</td>",                    "code|</tr></table></div>",                                        "titletemplate|STD",                    "infotemplate|STD",                                        "info||$btn_add &nbsp;&nbsp;&nbsp; $btn_clear",                                    "code|</div>",                'code|<br /><br />',                                                "code|<div id='autotable_table_display'></div>",                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">REFERENCE INFORMATION <a class="toggle" href="#" id="menu_group_a"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_a">',                        'text|Ref. Document|ref_document_number|N|60|1024',                        'text|Ref. Document URL|ref_document_url|N|60|255',                    'code|</div>',                'code|</div>',                                                'code|<div style="display:none;">',                    'textarea|Temp 3|autotable_holder|N|60|4',                    'text|Locked|temp_locked|N|60|255',                    "text|Price (ea)|temp_6|N|10|100",                    "text|Price (total)|temp_7|N|10|100",                'code|</div>',            );                    } else {                    $base_array = array(                "form|$this->Action_Link|post|db_edit_form",                                "code|<div style='font-size:16px; color:blue; padding:5px; background-color:#ccc;'>RMA Number: <span id='temp_rmanumber'></span></div><br />",                "code|<div class='shadow form_section_wrapper_error'>",                    "code|RMA IS LOCKED BECAUSE INVENTORY HAS ALREADY BEEN SENT. TO MAKE MODIFICATION YOU MUST DELETE THE RMA - WHICH WILL UNSEND ALL ITEMS.",                "code|</div>",                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">RMA INFORMATION</div>',                    'text|Vendor RMA Number|vendor_rma_number|N|60|255',                    'text|Date|date|N|20|20',                    "selecttext|Vendor|vendor|N|40|80||$vendor_list",                    #'text|Shipping Cost|cost_shipping|N|20|20',                    #'text|Other Cost|cost_other|N|20|20',                    'textarea|Notes|notes|N|60|2',                'code|</div>',                'code|<br /><br />',                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">REFERENCE INFORMATION <a class="toggle" href="#" id="menu_group_a"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_a">',                        'text|Ref. Document|ref_document_number|N|60|1024',                        'text|Ref. Document URL|ref_document_url|N|60|255',                    'code|</div>',                'code|</div>',                'code|<br /><br />',                                                "code|<div id='autotable_table_display'></div>",                                                'code|<div style="display:none;">',                    'textarea|Temp 3|autotable_holder|N|60|4',                    "text|Search|temp_0|N|60|100",                    'text|RMA Number|rma_number|Y|60|255',                    'text|Locked|temp_locked|N|60|255',                'code|</div>',            );                    }                if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {                /* ======================== PSEUDOCODE ========================                Check each inventory item to make sure they still exist (superfulous but do it)        Verify the RMA number is unique        For each line set the RMA line TOTAL (derived from qty and each price)                Start Transaction        Create the RMA entry        Create each RMA LINE entry        End Transaction                Clear out the entire array        Put a success message on the screen        Re-direct to the entry page                Note: This bypasses normal action of BaseClass doing the entry into database - but this is needed        because its a multi-table entry                Note: Need to put in failure checks before a transaction is allowed to go through.                =============================================================== */                $delimiter              = '|';        $table_holder           = 'autotable_holder';        $field_kickout_string   = 'temp_';        $lines_array_add        = array();                                      // will hold lines being added        $lines_array_delete     = array();                                      // will hold lines being deleted        $passed                 = true;                                         // holds check-passed status        $adding                 = ($this->Action == 'ADD') ? true : false;      // hold edit status        $locked                 = (isset($FormArray['temp_locked']) && ($FormArray['temp_locked'] == 1)) ? true : false;                                // ----- if locked - the only thing we can do is modify the form        if ($locked) {            # ----- Create the RMA entry            $db_record = array(                'vendor_rma_number'     => $FormArray['vendor_rma_number'],                'ref_document_url'      => $FormArray['ref_document_url'],                'ref_document_number'   => $FormArray['ref_document_number'],                'date'                  => $FormArray['date'],                'notes'                 => $FormArray['notes'],            );            $where      = "`rma_number`='{$FormArray['rma_number']}' AND `active`=1";            $result     = $this->UpdateRecordLoc('inventory_vendor_rmas', $db_record, $where);            $this->EchoQuery();                        if ($result) {                // ----- Do A force redirect to bypass BaseClass further procesing this                $link = $this->getPageURL();                $_SESSION['alert_message'] = "RMA UPDATED SUCESSFULLY";                header("Location: {$link}");            } else {                echo "ERROR :: Unable to update RMA.";                exit();            }        }                                // ----- remove any temp fields from the array so they don't get processed        // ----- NOTE :: WASTED STEP IF WE BLOW OUT ARRAY AT END OF FUNCTION        foreach ($FormArray as $field => $value) {            echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                //echo ArrayToStr($_POST);        //exit();                                        // ----- check for unique RMA #        if ($adding) {            $unique = $this->SQL->IsUnique('inventory_vendor_rmas', 'rma_number', $FormArray['rma_number'], 'active=1');            if (!$unique) {                $this->Error .= "<br />ERROR :: RMA number is not unique. RMA Number: {$FormArray['rma_number']}";                $passed = false;            }        }                                        // ----- get the main table holder value to process        $table = $FormArray[$table_holder];                //echo "table ===> {$table}";                if ($table) {            $lines = explode("\n", $table);            $header_row = true;            #echo ArrayToStr($lines);                        foreach ($lines as $key => $line) {                                //echo "<br />line ===> $line";                if ($line) {                                        //echo ArrayToStr($line);                                    if ($header_row == false) {                        $parts          = explode($delimiter, $line);                                                #echo ArrayToStr($parts);                                                $barcode        = trim($parts[0]);                        $sku            = trim($parts[1]);                        $description    = trim($parts[2]);                        $quantity       = trim($parts[3]);                        $price_each     = trim($parts[4]);                        $price_each     = ($price_each != '') ? $price_each : ($price_total / $quantity);                        $price_total    = ($quantity * $price_each);                                                //$price_total    = trim($parts[5]);                        //$price_total    = ($price_total != '') ? $price_total : ($quantity * $price_each);                                                                                                // ----- check that inventory still exists                        $exist = $this->StatusInventoryItemExist($barcode);                                                if (!$exist) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        } else {                                                        $lines_array_add[] = array(                                'rma_number'    => $FormArray['rma_number'],                                'barcode'       => $barcode,                                'quantity'      => $quantity,                                'price_each'    => $price_each,                                'price_total'   => $price_total,                                'status'        => 'open',                            );                                                    }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                                //$this->Error .= "<br />PURPOSFUL HALTING ERROR";                                                // ----- verify if any good lines made it to processing - we don't want to allow a 0-line PO        if (!$lines_array_add) {            $passed = false;            $this->Error .= "THIS RMA HAS NO VALID LINES TO PROCESS";        }        //exit();//$passed = false;                                // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed && $lines_array_add) {                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                        # ----- Create the RMA entry            $db_record = array(                'rma_number'            => $FormArray['rma_number'],                'vendor_rma_number'     => $FormArray['vendor_rma_number'],                'vendor'                => $FormArray['vendor'],                'ref_document_url'      => $FormArray['ref_document_url'],                'ref_document_number'   => $FormArray['ref_document_number'],                'date'                  => $FormArray['date'],                'cost_shipping'         => $FormArray['cost_shipping'],                'cost_other'            => $FormArray['cost_other'],                'notes'                 => $FormArray['notes'],            );                        if ($adding) {                $result     = $this->AddRecordLoc('inventory_vendor_rmas', $db_record);                $passed     = (!$result) ? false : $passed;                $this->EchoQuery();            } else {                $where      = "`rma_number`='{$FormArray['rmq_number']}' AND `active`=1";                $result     = $this->UpdateRecordLoc('inventory_vendor_rmas', $db_record, $where);                $passed     = (!$result) ? false : $passed;                $this->EchoQuery();            }                                                # ----- Delete old Sales Order LINES entry            // ---- currently this is the fastest way to deal with editing lines - because we don't need            //      to track the IDs in the on-screen table. Just deactivate lines and let them be added again.            if (!$adding) {                $db_record = array(                    'active'            => 0,                );                $where      = "`rma_number`='{$FormArray['rma_number']}' AND `active`=1";                $result     = $this->UpdateRecordLoc('inventory_vendor_rma_lines', $db_record, $where);                $passed     = (!$result) ? false : $passed;                $this->EchoQuery();            }                                    # ----- Create the Sales Order LINES entry            foreach ($lines_array_add as $line) {                $db_record = array(                    'rma_number'        => $line['rma_number'],                    'barcode'           => $line['barcode'],                    'quantity'          => $line['quantity'],                    'price_each'        => $line['price_each'],                    'price_total'       => $line['price_total']                );                                $result     = $this->AddRecordLoc('inventory_vendor_rma_lines', $db_record);                $passed     = (!$result) ? false : $passed;                $this->EchoQuery();            }                                                                                                # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                // ----- Do A force redirect to bypass BaseClass further procesing this                $link = $this->getPageURL();                $_SESSION['alert_message'] = ($adding) ? "RMA ADDED SUCESSFULLY" : "RMA UPDATED SUCESSFULLY";                header("Location: {$link}");            }        } else {            // ----- return form array to process any legitimate errors            return $FormArray;        }    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/class_execute';                $eq                     = EncryptQuery("class=Inventory_InventoryVendorRMASend;v1={$id};");                $link                   = $CLASS_EXECUTE_LINK . '?eq=' . $eq;                $script                 = "top.parent.appformCreate('Window', '{$link}', 'apps'); return false;";                                                $eq2                    = EncryptQuery("class=Inventory_InventorySalesOrderCalculateCOGS;v1={$id};");                $link2                  = $CLASS_EXECUTE_LINK . '?eq=' . $eq2;                $script2                = "top.parent.appformCreate('Window', '{$link2}', 'apps'); return false;";                                                $this->Edit_Links = qqn("                    <td align=`center`><a href=`#` class=`row_edit`     title=`Edit`   onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a></td>                    <td align=`center`><a href=`#` class=`row_receive`  title=`Ship Items`  onclick=`{$script}; return false;`></a></td>                    <td align=`center`><a href=`#` class=`row_viewline` title=`Calculate COGS`  onclick=`{$script2}; return false;`></a></td>                    <td align=`center`><a href=`#` class=`row_delete`   title=`Delete` onclick=`tableDeleteClick('@IDX@','@VALUE@','@EQ@'); return false; `></a></td>                    ");                                        //<td align=`center`><a href=`#` class=`row_view`     title=`View`   onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a></td>                                break;                        case 'active':                // convert the "ACTIVE" field to a status                $value = $this->StatusVendorRMA(0, $id);                                switch ($value) {                    case 'open':                        $td_options = "style=\"background-color:#b2ffb2;\"";                    break;                    case 'partial':                        $td_options = "style=\"background-color:#ffff80;\"";                    break;                    case 'closed':                        $td_options = "style=\"background-color:#ffcccc;\"";                    break;                }                               break;        }    }    }  // -------------- END CLASS --------------