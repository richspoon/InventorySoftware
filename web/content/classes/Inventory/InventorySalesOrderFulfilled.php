<?phpclass Inventory_InventorySalesOrderFulfilled extends Inventory_InventoryBase{    public $Show_Query      = false;    //public $Record_ID       = 0;    //public $SO_Number       = 0;    public $Inventory_Sales_Orders_Id    = 0;            public function  __construct()    {        parent::__construct();        		$this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-12',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-03-13',            'Filename'      => $this->Classname,            'Version'       => '1.2',            'Description'   => 'Show what lines have alrady been fulfilled on a SO',            'Update Log'    => array(                '2012-12-02_1.1'    => "Fixed bug with deleting sent inventory - transactions enabled in AJAX database stuff.",				'2013-03-13_1.2'	=> "Modified to support database change - track by id not SO#",            ),        );                $this->SetParameters(func_get_args());        $this->PO_Number         = $this->GetParameter(0);                        $this->Table                = 'inventory_sales_order_sent';        $this->Index_Name           = 'inventory_sales_order_sent_id';                $this->Default_Where        = "`so_number`='{$this->PO_Number}' AND inventory_sales_order_sent.active=1";        $this->Default_Sort         = 'date';      // field for default table sort                $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                $this->Field_Titles = array(            "{$this->Table}.inventory_sales_order_sent_id"          => 'Inventory Sales Order Received Id',            "{$this->Table}.inventory_sales_order_lines_id"         => 'PO Line ID',            "{$this->Table}.so_number"                              => 'PO Number',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.quantity"                               => 'Quantity',            //"{$this->Table}.price_shipping"                         => 'Shipping Price',            "{$this->Table}.price_total"                            => 'Total Price',            "{$this->Table}.barcode"                                => 'Barcode',            "inventory_products.description"                        => 'Description',            //"inventory_products.manufacturer_code"                  => 'Manufacturer SKU',            "inventory_products.retailer_code"                      => 'APDM SKU',            "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                        $this->Join_Array = Array(            'inventory_products'  => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_sales_order_sent`.`barcode`",        );                        $this->Default_Fields   = 'date, barcode, description, retailer_code, quantity, price_total, so_number';        $this->Unique_Fields    = '';        $this->Default_Values   = array();        $this->Close_On_Success = true;                $this->Edit_Links_Count     = '1';          // number of links at end of table        $this->Add_Link             = '';           // don't allow adding a record        $this->Show_Export          = false;        // false = don't allow export of this table        $this->Default_List_Size    = 1000;         // how many lines to allow in table before pagination        $this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class        		// not used				/*        // Call the AddRecord to get a form onto the screen        // Convert the Record_Id into the barcode        // Pull the entire order info from the barcode        // Convert the order to a table for display                        $this->AddRecord();        $record     = $this->GetRecordInfoFromBarcode($this->Record_ID);        $content    = $this->ConvertRecordInfoToArray($record);        $this->ScriptJSONTableGeneric();                                // Add in the generic code held in the BaseClass        $this->MoveArrayIntoForm($content);                AddScriptOnReady("$('#FORM_so_number').val('{$this->PO_Number}');");                // ----- add the jQuery UI datepicker functionality        AddScriptOnReady('$("#FORM_date").datepicker({dateFormat: "yy-mm-dd"});');        */    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'delete_received_inventory':                                /* P-CODE =================================================                Start Transaction                Deactivate the 'inventory_sales_order_sent' line                Remove the inventory from 'inventory_counts'                Update 'inventory_sales_order_lines' to 'partial' or 'open'                Update 'inventory_sales_orders' to 'partial' or 'open'                End Transaction                ================================================= */                                $this->Show_Query = false;                $passed = true;                                $inventory_sales_order_sent_id = Get('id'); //0;                                if ($inventory_sales_order_sent_id != 0) {                                        # ===== START TRANSACTION ============================================================                    $this->SQL->StartTransaction();                                        # ----- Deactivate the 'inventory_sales_order_sent' line -----                    $db_record = array(                        'active'    => 0,                        'notes'     => 'Inventory previously sent deleted by user',                    );                    $where      = "`inventory_sales_order_sent_id`='{$inventory_sales_order_sent_id}'";                    $result     = $this->UpdateRecordLoc('inventory_sales_order_sent', $db_record, $where);                    $passed     = (!$result) ? false : $passed;                    $this->EchoQuery();                                                            # ----- Remove the inventory from 'inventory_counts' -----                    $db_record = array(                        'active'    => 0,                        'notes'     => 'Inventory previously sent deleted by user',                    );                    $where      = "`ref_sales_order_sent_id`='{$inventory_sales_order_sent_id}'";                    $result     = $this->UpdateRecordLoc('inventory_counts', $db_record, $where);                    $passed     = (!$result) ? false : $passed;                    $this->EchoQuery();                                                                                # ===== COMMIT TRANSACTION ============================================================                    if ($passed) {                        $this->SQL->TransactionCommit();                        $return = 1;                    } else {                        $return = 0;                    }                                                                        } // end checking for 'inventory_sales_order_sent_id'            break;        }                echo $return;    }                function ScriptUnreceiveInventory()    {        $CLASS_EXECUTE_LINK     = '/office/AJAX/class_execute';        $eq                     = EncryptQuery("class={$this->Classname}");                $script = <<<SCRIPT                    function tableUnreceiveInventoryClick(idx, value, eq)            {                var idbase = 'TABLE_ROW_ID' + idx + '_';                var rowNumber = $('#' + idbase + value + ' td:first-child').html().replace('.', '');                $('#' + idbase + value +' td').css('background-color','#ff7');                if (confirm('Are you sure you want to delete row (' + rowNumber + ')?')) {                    $.get('{$CLASS_EXECUTE_LINK}?eq={$eq}&action=delete_received_inventory&id=' + value, '', function(data){                        if (data == 1) {                            location.reload();  // reload the page as many items need to be updated                            //$('#' + idbase + value +' td').fadeOut();                        } else {                            alert('Error: Could not delete record! :: ' + data);                        }                    });                }                $('#' + idbase + value +' td').css('background-color','');                return false;            }                SCRIPT;AddScript($script);    }        public function SetFormArrays()    {        // not using function because we won't edit these lines    }        public function PostProcessFormValues($FormArray)     {        /* ======================== PSEUDOCODE ========================                Check each inventory item to make sure they still exist (superfulous but do it)        Verify the PO number is unique        For each line set the sales line TOTAL (derived from qty and each price)                Start Transaction        Create the sales Order entry        Create each sales Order LINE entry        End Transaction                Clear out the entire array        Put a success message on the screen        Re-direct to the entry page                Note: This bypasses normal action of BaseClass doing the entry into database - but this is needed        because its a multi-table entry                =============================================================== */                $debug                  = false;                // (false) true = dispaly array lines        $delimiter              = '|';                  // delimiter in the textbox array        $table_holder           = 'autotable_holder';   // ID of textbox holding the array        $lines_array            = array();              // will hold lines        $passed                 = true;                 // holds check-passed status        $qty_total_for_shipping = 0;                    // will hold total number of items received - for calculating ship cost                if ($debug) {            echo ArrayToStr($FormArray);            echo ArrayToStr($_POST);            echo ArrayToStr($_GET);        }                        // ----- check that PO exists and is still active -----        $record = $this->SQL->GetRecord(array(            'table' => 'inventory_sales_orders',            'keys'  => 'status',            'where' => "so_number='{$FormArray['so_number']}' AND active=1",        ));                if ($record) {            if ($record['status'] == 'closed') {                $this->Error .= "<br />ERROR :: Sales Order has been received in full already. SO Number: {$FormArray['so_number']}";                $passed = false;            }            if ($record['status'] == 'canceled') {                $this->Error .= "<br />ERROR :: Sales Order has been cancelled. SO Number: {$FormArray['so_number']}";                $passed = false;            }        } else {            $this->Error .= "<br />ERROR :: Sales Order not found. SO Number: {$FormArray['so_number']}";            $passed = false;        }                                // ----- get the main table holder value to process        $table = $FormArray[$table_holder];        if ($debug) { echo "table ===> {$table}"; }                if ($table) {            $lines = explode("\n", $table);            $header_row = true;            if ($debug) { echo ArrayToStr($lines); }                        $count = 0;            foreach ($lines as $key => $line) {                                if ($line) {                                        if ($debug) { echo ArrayToStr($line); }                                        if ($header_row == false) {                                                $count++;                                           // do here so we get the correct row were on                        $parts = explode($delimiter, $line);                        if ($debug) { echo ArrayToStr($parts); }                                                // ----- Get the information from the table row -----                        $inventory_sales_order_lines_id  = trim($parts[0]);                        $barcode                            = trim($parts[1]);                        $qty_ordered                        = trim($parts[7]);                        $qty_previous                       = trim($parts[8]);                        $qty_remaining                      = trim($parts[9]);                                                // ----- Get the qty and prices from the $_POST variables -----                        $qty_received                       = Post("qty_{$count}");                        $price_total                        = Post("price_{$count}");                        $price_shipping                     = $FormArray['cost_shipping'];                        $price_other                        = $FormArray['cost_other'];                                                // ----- Get the general po information -----                        $so_number                          = $FormArray['so_number'];                        $date                               = $FormArray['date'];                        $notes                              = $FormArray['notes'];                        $ref_document_url                   = $FormArray['ref_document_url'];                        $ref_document_number                = $FormArray['ref_document_number'];                                                // ----- Misc other calculations needed -----                        $po_line_status = ($qty_ordered == ($qty_received + $qty_previous)) ? 'closed' : 'partial';                        $this->PO_Number = $so_number;                        $qty_total_for_shipping += $qty_received;    // updated total number of items received (for shipping)                                                //echo "<br />qty_ordered  ---> $qty_ordered";                        //echo "<br />qty_total_for_shipping  ---> $qty_total_for_shipping";                                                /*                        echo "<br />qty_received  ---> $qty_received";                        echo "<br />qty_ordered  ---> $qty_ordered";                        echo "<br />qty_previous  ---> $qty_previous";                        echo "<br />po_line_status  ---> $po_line_status";                        echo "<br /><br />";                        */                                                // ----- check that inventory item still exists -----                        $row = $this->SQL->GetRecord(array(                            'table' => 'inventory_products',                            'keys'  => 'barcode',                            'where' => "barcode = '{$barcode}' AND active=1",                        ));                                                // ----- check that you're not receiveing more that ordered -----                        if ($qty_received > ($qty_ordered + $qty_previous)) {                            $this->Error .= "<br />ERROR :: You cannot receive more inventory than the quantity ordered. Barcode: {$barcode}";                            $passed = false;                        }                                                                        if (empty($row)) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        }                        #echo "<br />qty_received --> $qty_received";                        #echo "<br />price_total --> $price_total";                                                if (($qty_received > 0) && ($price_total > 0)) {                            $lines_array[] = array(                                'inventory_sales_order_lines_id' => $inventory_sales_order_lines_id,                                'so_number'                         => $so_number,                                'date'                              => $date,                                'qty_received'                      => $qty_received,                                'price_total'                       => $price_total,                                //'price_shipping'                    => 0, //$price_shipping,                                'ref_document_url'                  => $ref_document_url,                                'ref_document_number'               => $ref_document_number,                                'notes'                             => $notes,                                                                'po_line_status'                    => $po_line_status,                                'barcode'                           => $barcode,                                #'qty_ordered'                       => $qty_ordered,                                #'qty_previous'                      => $qty_previous,                                #'qty_remaining'                     => $qty_remaining,                            );                        }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                                // ===== Determine the cost of shipping for each item        $price_shipping                     = $FormArray['cost_shipping'];        $price_other                        = $FormArray['cost_other'];        $price_shipping_each                = round((($price_shipping + $price_other) / $qty_total_for_shipping), 2);                //echo "<br />price_shipping  ---> $price_shipping";        //echo "<br />price_shipping  ---> $price_shipping";        //echo "<br />price_shipping  ---> $price_shipping";                //$this->Error .= "<br />PURPOSFUL HALTING ERROR";                                        //exit();        $this->Show_Query = true;                // ----- verify if any good lines made it to processing - we don't want to allow a 0-line PO        if (!$lines_array) {            $this->Error .= "NO INVENTORY HAS BEEN RECEIVED";            $passed = false;        }                        // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed && $lines_array) {            # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                                    foreach ($lines_array as $line) {                            # ----- Create the sales Order received LINES entry -----                $price_shipping = ($line['qty_received'] * $price_shipping_each);   // calculate the shipping amount for this line                                $db_record = array(                    'inventory_sales_order_lines_id' => $line['inventory_sales_order_lines_id'],                    'so_number'                         => $line['so_number'],                    'date'                              => $line['date'],                    'quantity'                          => $line['qty_received'],                    'price_total'                       => $line['price_total'],                    'price_shipping'                    => $price_shipping,                    'ref_document_url'                  => $line['ref_document_url'],                    'ref_document_number'               => $line['ref_document_number'],                    'notes'                             => $line['notes'],                );                $this->AddRecordLoc('inventory_sales_order_sent', $db_record);                $last_id = $this->SQL->Last_Insert_Id;                echo "<br />last_id ---> $last_id";                $this->EchoQuery();                                                                # ----- Add the inventory to the inventory counts -----                $db_record = array(                    'barcode'                           => $line['barcode'],                    'qty_in'                            => $line['qty_received'],                    'ref_sales_orders_received_id'   => $last_id,                    'notes'                             => '',                );                $this->AddRecordLoc('inventory_counts', $db_record);                $this->EchoQuery();                            }                                                                        # ===== COMMIT TRANSACTION ============================================================            $this->SQL->TransactionCommit();                                                // ----- UNSET FORM VALUES            unset($FormArray);                                    // ----- Do A force redirect to bypass BaseClass further procesing this            $link = $this->getPageURL();            $_SESSION['alert_message'] = "RECORD ADDED SUCESSFULLY";            header("Location: {$link}");        }                        // ----- return form array to process any legitimate errors        if (!$passed) {            return $FormArray;        }    }                public function GetTableHeading($colcount)    {        $export = ($this->Show_Export)? $this->GetExportBlock() : '';        $RESULT = '            <tr class="TABLE_TITLE">                <td colspan="'. $colcount. '">                ' . $export . '                    Previously Received Inventory                </td>            </tr>';        return $RESULT;    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/AJAX/class_execute';                $eq                     = EncryptQuery("class=Inventory_InventorySalesOrderFulfilled;v1={$id}");                $link                   = $CLASS_EXECUTE_LINK . '?eq=' . $eq . "&action=delete_received_inventory&id={$id}";                $script                 = "top.parent.appformCreate('Window', '{$link}', 'apps'); return false;";                                $this->Edit_Links = qqn("                <td align=`center`><a href=`#` class=`row_delete`   title=`Delete` onclick=`tableUnreceiveInventoryClick('@IDX@','@VALUE@','@EQ@'); return false; `></a></td>                                        ");                    //<td align=`center`><a href=`#` class=`row_delete` title=`View Lines`  onclick=`{$script}; return false;`></a></td>                    //                                                                        break;                                    case "date":                $value = date('M d, Y', strtotime($value));            break;                        case "quantity":                $value = number_format($value);            break;                        case "price_total":            case "price_shipping":                $value = money_format('%n', $value);            break;        }    }        }  // -------------- END CLASS --------------