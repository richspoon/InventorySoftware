<?phpclass Inventory_ProductionBoard extends Inventory_InventoryBase{    public $Show_Query                  = false;            // ----- INPUT VARIABLES -----    public $Inventory_Production_Board_Id               = 0;            // ----- OTHER VARIABLES -----    public $Priority_List               = "9=9 (Low)|5=5 (Normal)|1=1 (High - Must be done today)";    public $Status_List                 = "Requested|Delayed|Completed";    public $Display_List                = "1=Yes|0=No";        public $Date_Monday                 = '';    public $Date_Tuesday                = '';    public $Date_Wednesday              = '';    public $Date_Thursday               = '';    public $Date_Friday                 = '';        public $Edit_Status                 = false;    // (false) TRUE = only edit the status of this record            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-02-17',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-04-01',            'Filename'      => $this->Classname,            'Version'       => '1.1',            'Description'   => 'Production board managment and viewing',            'Update Log'    => Array(                '2013-02-17_1.0'  => "Module created",                '2013-04-01_1.1'  => "Added editing/deleting of a production board record - in calendar view. Refresh page icon.",            ),        );                        // ----- Process any parameters sent in construct        $this->SetParameters(func_get_args());        $this->Inventory_Production_Board_Id = $this->GetParameter(0);                        // ----- Configuration for database table        $this->Table                = 'inventory_production_board';        $this->Index_Name           = 'inventory_production_board_id';        $this->Default_Sort         = 'inventory_production_board_id';      // field for default table sort                $this->Field_Titles = array(            "{$this->Table}.inventory_production_board_id"          => 'Production Board Id',            "{$this->Table}.requestor"                              => 'Requestor',            "{$this->Table}.date_requested"                         => 'Date Requested',            "{$this->Table}.date_action"                            => 'Date of Action',            "{$this->Table}.title"                                  => 'Title',            "{$this->Table}.description"                            => 'Description',            "{$this->Table}.quantity"                               => 'Quantity',            "{$this->Table}.sort_order"                             => 'Sort Order',            "{$this->Table}.priority"                               => 'Priority',            "{$this->Table}.status"                                 => 'Status',            "{$this->Table}.request_notes"                          => 'Request Notes',            "{$this->Table}.status_display"                         => 'Display',            "{$this->Table}.date_completed"                         => 'Date Completed',            "{$this->Table}.completed_notes"                        => 'Request Notes',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                        $this->Join_Array       = Array();                $this->Default_Fields   = 'date_action, title, description, quantity, status, display';        $this->Unique_Fields    = '';                $this->Default_Values   = array(            'requestor'         => 'Brent',            'sort_order'        => 0,            'priority'          => '5',            'status'            => 'Requested',            'status_display'    => 1,            'date_requested'    => date('Y-m-d'),        );                        $this->Default_Where        = '';               // additional search conditions        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Close_On_Success     = true;        //$this->Edit_Links_Count     = '4';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;                        case 'edit':                // ----- Edit an existing record                $this->EditRecord($this->Inventory_Production_Board_Id);            break;                        case 'delete':                // ----- Delete an existing record (de-activates it)                $result = $this->DeleteRecord($this->Inventory_Production_Board_Id);                if ($result) {                    echo "                        <div style='width:300px; color:blue;'>                        <h1>RECORD DELETED</br>Refresh calendar view to see changes</h1>                        </div>";                } else {                    echo "                        <div style='width:300px; color:red;'>                        <h1>RECORD FAILED TO DELETE</h1>                        </div>";                }            break;                        case 'editstatus':                // ----- edit the status of a current record                $this->EditStatus($this->Inventory_Production_Board_Id);            break;                        case 'list':            default:                // ----- display list of all assemblies that bave been built                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                        $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                        // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                        switch ($action) {                        case 'update_status':                                // UPDATE THE STATUS OF A PRODUCITON BOARD ITEM                $status_new                     = Get('status');                $inventory_production_board_id  = Get('id');                                $set        = "`status`='{$status_new}'";                $where      = "inventory_production_board_id='{$inventory_production_board_id}'";                $result     = $this->SQL->UpdateRecord($this->Table, $set, $where);                $passed     = (!$result) ? 0 : 1;                                $this->Show_Query = false;  //force off or will cause AJAX to fail                $this->EchoQuery();                                $return = $passed;            break;        }                echo $return;    }            public function ViewProductionBoard ()    {        # FUNCTION :: Create the actual production board                        $this->AddScript();                                         // Add needed scripts        $this->SetWorkweek();                                       // Determine and set the current week of records to show        $this->JavascriptToggleFunctionality();                     // Javascript for toggling show/hide a div area                $select             = $this->CreateWorkweekDropdown();      // create the workweek select drop-down        $instructions       = $this->Instructions();                // create the instructions for the production board                        // ----- create links for adding records at top of the production board        $task_eq                    = EncryptQuery("class={$this->Classname};v1=0;v2=0;");        $task_onclick_add           = " onclick=\"callClass('{$task_eq}', 'add'); return false;\"";                $whitesheet_eq              = EncryptQuery("class=Inventory_ProductionWhitesheet;v1=0;v2=0;");        $whitesheet_onclick_add     = " onclick=\"callClass('{$whitesheet_eq}', 'add'); return false;\"";                        $output = "            <table class='pb_day_table'>            <tr>                <td valign='middle' width='100%'><span style='font-size:16px;'><b>Workweek:</b></span> {$select}</td>                                <td valign='top'>                    <table class='TABLE_DISPLAY noborder' style='background-color : #fff; width:150px' border='0'>                        <tr>                            <td class='pb_day_data_hr' style='padding-left:5px;' width='100%' align='right'>Add Task</td>                            <td class='pb_day_data_hr'><a href='#' class='row_add' title='Add New Task' {$task_onclick_add}></a></td>                        </tr>                        <tr>                            <td class='pb_day_data_hr' style='padding-left:5px;' width='100%' align='right'>Add Whitesheet</td>                            <td class='pb_day_data_hr'><a href='#' class='row_add' title='Add New Whitesheet' {$whitesheet_onclick_add}></a></td>                        </tr>                    </table>                </td>                <td valign='middle' width='200' align='center'>                    <div style='padding-left:20px; padding-right:10px; border-left:2px solid #000;'>                    <img src='\office\images\calendar_reload.jpg' alt='Reload Calendar' onclick='reloadScreen(); return false;' border='0' style='cursor:pointer;' width='50'>                    </br>REFRESH                    </div>                </td>            </tr>            </table>            </br></br>                        <table class='pb_day_table'>            <tr>                <td class='pb_day_title'>MONDAY</br>{$this->Date_Monday}</td>                <td class='pb_day_title'>TUESDAY</br>{$this->Date_Tuesday}</td>                <td class='pb_day_title'>WEDNESDAY</br>{$this->Date_Wednesday}</td>                <td class='pb_day_title'>THURSDAY</br>{$this->Date_Thursday}</td>                <td class='pb_day_title'>FRIDAY</br>{$this->Date_Friday}</td>            </tr>            <tr>                <td valign='top' class='pb_day_data_wrapper'>@@MONDAY@@</td>                <td valign='top' class='pb_day_data_wrapper'>@@TUESDAY@@</td>                <td valign='top' class='pb_day_data_wrapper'>@@WEDNESDAY@@</td>                <td valign='top' class='pb_day_data_wrapper'>@@THURSDAY@@</td>                <td valign='top' class='pb_day_data_wrapper'>@@FRIDAY@@</td>            </tr>            </table>            </br></br>                        {$instructions}        ";                                        // ----- get the records for each day of the week        $records_monday     = $this->GetExistingRecords($this->Date_Monday);        $records_tuesday    = $this->GetExistingRecords($this->Date_Tuesday);        $records_wednesday  = $this->GetExistingRecords($this->Date_Wednesday);        $records_thursday   = $this->GetExistingRecords($this->Date_Thursday);        $records_friday     = $this->GetExistingRecords($this->Date_Friday);                        // ----- format the records for the calendar        $monday             = $this->FormatRecords($records_monday);        $tuesday            = $this->FormatRecords($records_tuesday);        $wednesday          = $this->FormatRecords($records_wednesday);        $thursday           = $this->FormatRecords($records_thursday);        $friday             = $this->FormatRecords($records_friday);                        // ----- swap the records into the calendar        AddSwap('@@MONDAY@@', $monday);        AddSwap('@@TUESDAY@@', $tuesday);        AddSwap('@@WEDNESDAY@@', $wednesday);        AddSwap('@@THURSDAY@@', $thursday);        AddSwap('@@FRIDAY@@', $friday);                        echo $output;    }        public function FormatRecords($RECORDS)    {        # FUNCTION :: Format the records for output to the calendar screen                        $Obj_Notes          = new Inventory_ProductionBoardNotes();         // instantiate class        $Obj_Whitesheets    = new Inventory_ProductionWhitesheet();         // instantiate class                        $output = '';        if ($RECORDS) {            foreach ($RECORDS as $record) {                                $description        = nl2br($record['description']);                $ipbid              = $record['inventory_production_board_id'];                                switch($record['priority']) {                    case '9':                        $priority           = "Low";                        $priority_class     = 'pb_day_data_priority_low';                    break;                    case '5':                        $priority           = "Normal";                        $priority_class     = 'pb_day_data_priority_normal';                    break;                    case '1':                        $priority           = "High";                        $priority_class     = 'pb_day_data_priority_high';                    break;                }                                switch($record['status']) {                    case 'Requested':                        $status         = "Requested";                        $status_class   = 'pb_day_data_status_requested';                    break;                    case 'Delayed':                        $status         = "Delayed";                        $status_class   = 'pb_day_data_status_delayed';                    break;                    case 'Completed':                        $status         = "Completed";                        $status_class   = 'pb_day_data_status_completed';                    break;                }                                                // ----- create the status select drop-down                $select_options     = '';                $list               = explode('|', $this->Status_List);                foreach ($list as $status_item) {                    $selected = (strtolower($status_item) == strtolower($status)) ? ' selected' : '';                    $select_options .= "<option value='{$status_item}' {$selected}>{$status_item}</option>";                }                        $status_select = "<select class='status_select' id='status_{$ipbid}' ipbid='{$ipbid}'>{$select_options}</select>";                                $col_edit   = "<a href=`#` class=`row_edit` title=`Edit` onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                                                // ----- CREATE THE ONCLICK ACTIONS -----                $status_eq                  = EncryptQuery("class={$this->Classname};v1={$ipbid};");                $status_onclick_edit        = " onclick=\"callClass('{$status_eq}', 'editstatus'); return false;\"";                                $edit_eq                    = EncryptQuery("class={$this->Classname};v1={$ipbid};");                $edit_onclick               = " onclick=\"callClass('{$edit_eq}', 'edit'); return false;\"";                                $delete_eq                  = EncryptQuery("class={$this->Classname};v1={$ipbid};");                $delete_onclick             = " onclick=\"callClass('{$delete_eq}', 'delete'); return false;\"";                                                $note_counts                = $Obj_Notes->GetExistingCount($ipbid);                $note_eq                    = EncryptQuery("class=Inventory_ProductionBoardNotes;v1=0;v2={$ipbid};");                $note_onclick_view          = " onclick=\"callClass('{$note_eq}', 'viewall'); return false;\"";                $note_onclick_add           = " onclick=\"callClass('{$note_eq}', 'add'); return false;\"";                                $whitesheet_counts          = $Obj_Whitesheets->GetExistingCount($ipbid);                $whitesheet_eq              = EncryptQuery("class=Inventory_ProductionWhitesheet;v1=0;v2={$ipbid};");                $whitesheet_onclick_view    = " onclick=\"callClass('{$whitesheet_eq}', 'viewall'); return false;\"";                $whitesheet_onclick_add     = " onclick=\"callClass('{$whitesheet_eq}', 'add'); return false;\"";                                                // ----- CREATE THE SCREEN OUTPUT -----                $output .= "                    <div class='pb_day_data'>                        <div class='pb_day_data_title'>{$record['title']}</div>                        <div class='pb_day_data_description'>{$description}</div>                        <table class='TABLE_DISPLAY noborder' style='background-color : #fff;'  width='100%' border='0'>                        <tr>                            <td class='pb_day_data_hr' colspan='3' width='100%'>&nbsp;</td>                        </tr>                        <tr>                            <td class='pb_day_data_hr' colspan='3' width='100%'><div class='{$priority_class}'>Priority: {$priority}</div></td>                        </tr>                        <tr>                            <td class='pb_day_data_hr' colspan='3' width='100%'><div class='{$status_class}'>Status: {$status_select}</div></td>                        </tr>                        <tr>                            <td class='pb_day_data_hr' style='padding-left:5px;' width='100%'>Notes ({$note_counts})</td>                            <td class='pb_day_data_hr'><a href='#' class='row_view' title='View Existing Notes' {$note_onclick_view}></a></td>                            <td class='pb_day_data_hr'><a href='#' class='row_add' title='Add New Note' {$note_onclick_add}></a></td>                        </tr>                        <tr>                            <td class='pb_day_data_hr' style='padding-left:5px;' width='100%'>Whitesheets ({$whitesheet_counts})</td>                            <td class='pb_day_data_hr'><a href='#' class='row_view' title='View Existing Whitesheets' {$whitesheet_onclick_view}></a></td>                            <td class='pb_day_data_hr'><a href='#' class='row_add' title='Add New Whitesheet' {$whitesheet_onclick_add}></a></td>                        </tr>                                                <tr>                            <td class='pb_day_data_hr' style='padding-left:5px;' width='100%'>Edit Record</td>                                                        <td class='pb_day_data_hr'><a href='#' class='row_edit' title='Edit Record' {$edit_onclick}></a></td>                            <td class='pb_day_data_hr'><a href='#' class='row_delete' title='Delete Record' {$delete_onclick}></a></td>                        </tr>                                                </table>                    </div>";                                        //<td class='pb_day_data_hr'><a href='#' class='row_edit' title=`Edit` {$status_onclick_edit}></a></td>            }        }                unset($Obj_Notes);              // free up memory        unset($Obj_Whitesheets);        // free up memory                return $output;    }        private function SetWorkweek()    {        # FUNCTION :: Set the values for what work-week we are in (Monday - Friday).        #        # NOTE :: If no starting Monday has been passed in - then default to the current week's monday                $monday                 = (Get('start')) ? strtotime(Get('start')) : strtotime('monday this week');                $this->Date_Monday      = date('Y-m-d', strtotime('+0 day', $monday));        $this->Date_Tuesday     = date('Y-m-d', strtotime('+1 day', $monday));        $this->Date_Wednesday   = date('Y-m-d', strtotime('+2 day', $monday));        $this->Date_Thursday    = date('Y-m-d', strtotime('+3 day', $monday));        $this->Date_Friday      = date('Y-m-d', strtotime('+4 day', $monday));                if (false) {            $this->EchoVar('monday', $monday);            $this->EchoVar('Date_Monday', $this->Date_Monday);            $this->EchoVar('Date_Tuesday', $this->Date_Tuesday);            $this->EchoVar('Date_Wednesday', $this->Date_Wednesday);            $this->EchoVar('Date_Thursday', $this->Date_Thursday);            $this->EchoVar('Date_Friday', $this->Date_Friday);        }    }        private function AddScript()    {        # FUNCTION :: Add needed scripts for this class                        $CLASS_EXECUTE_LINK         = '/office/class_execute';        $CLASS_EXECUTE_LINK_AJAX    = '/office/AJAX/class_execute';        $status_update_eq           = EncryptQuery("class={$this->Classname};");                // ----- ADD SCRIPT TO ADD/EDIT NOTES AND WHITESHEETS -----        AddScript("            function callClass(eq, action) {                top.parent.appformCreate('Window', '{$CLASS_EXECUTE_LINK}?eq=' + eq + '&action=' + action, 'apps');            }                        function reloadScreen() {                window.location.reload();            }        ");                        // ----- ADD SCRIPT TO UPDATE THE STATUS OF A REQUEST -----        AddScriptOnReady("            $('.status_select').change(function() {                var value   = $(this).attr('value');                var ipbid   = $(this).attr('ipbid');                var url     = '{$CLASS_EXECUTE_LINK_AJAX}?eq={$status_update_eq}' + '&action=update_status&status=' + value + '&id=' + ipbid;                                // Make an AJAX call to update the dttus of this production board item                $.ajax({                    url: url,                    beforeSend: function ( xhr ) {                        // ----- put up a loading bar                    }                    }).done(function (data) {                        // ----- clear the loading bar                        if (data == 1) {                            //alert('success');                            window.location.reload();                        } else {                            alert('error');                        }                    });            });        ");    }        private function CreateWorkweekDropdown()    {        # FUNCTION :: Create the drop-down select of workweeks                global $PAGE;                $link               = "http://{$PAGE['url']}";        $year_current       = date('Y');                                // get current year        $year_next          = date('Y', strtotime('+1 year'));          // get next year        $startDate          = strtotime("{$year_current}-01-01");       // set start to the 1st day of this year        $endDate            = strtotime("{$year_next}-01-01");          // set end to the 1st day of next year        $date_check         = $this->Date_Monday;                       // get date currently stored for monday of workweek        $select_options     = '';                for ($i = strtotime('Monday', $startDate); $i <= $endDate; $i = strtotime('+1 week', $i))        {            $f                  = strtotime('+4 days', $i);            $date_store         = date('Y-m-d', $i);            $date_display_m     = date('M jS', $i);            $date_display_f     = date('M jS', $f);            $selected           = ($date_store == $date_check) ? ' selected' : '';                        $select_options .= "<option value='{$date_store}' {$selected}>{$date_display_m} - {$date_display_f}</option>";        }                $select = "<select name='week_no' id='week_no'>{$select_options}</select>";                AddScriptOnReady("            $('#week_no').change(function() {                var value = $(this).attr('value');                window.location = '{$link};start=' + value;            });        ");                return $select;    }        public function GetExistingRecords($DATE='', $DATESTART='', $DATEEND='')    {        // ----- get all records from the database        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_production_board",            'keys'      => "*",            'where'     => "date_action='{$DATE}' AND active=1",        ));        $this->EchoQuery();                return $records;    }        public function EditStatus($ID)    {        $this->Edit_Status = true;        $this->EditRecord($ID);    }        public function SetFormArrays()    {       # FUNCTION :: Output the main user form to the screen                        // ----- Javascript Functionality -----        $this->JavascriptToggleFunctionality();     // Javascript for taggling show/hide a div area        $this->JavascriptDatepickerFunctionality(array('FORM_date_action', 'FORM_date_requested', 'FORM_date_completed'));      // datepicker functionality                        // ----- create list of all previously entered data        $requestors             = $this->SQL->GetFieldValues($this->Table, 'requestor', "requestor != ''");        $requestor_list         = Form_ArrayToList($requestors);                        // ----- create some needed lists        $priority_list      = $this->Priority_List;        $status_list        = $this->Status_List;        $display_list       = $this->Display_List;                        if ($this->Edit_Status) {                    $base_array = array(                "form|$this->Action_Link|post|db_edit_form",                                'hidden|requestor',                'hidden|date_requested',                'hidden|date_action',                'hidden|title',                'hidden|description',                'hidden|quantity',                'hidden|sort_order',                'hidden|priority',                'hidden|request_notes',                'hidden|status_display',                                "code|<div style='min-width:60px;'>&nbsp;</div>",                "select|Status|status|N||{$status_list}",                'text|Date Completed|date_completed|N|20|20',                'textarea|Completed Notes|completed_notes|N|60|2',            );        } else {                    $base_array = array(                "form|$this->Action_Link|post|db_edit_form",                                "code|<div style='min-width:60px;'>&nbsp;</div>",                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">REQUEST INFORMATION</div>',                        "selecttext|Requestor|requestor|N|40|80||{$requestor_list}",                        'text|Date Requested|date_requested|N|20|20',                        'text|Date Action|date_action|Y|20|20',                                                'text|Title|title|Y|60|255',                        'textarea|Description|description|N|60|2',                        'text|Quantity|quantity|N|20|20',                        'text|Sort Order|sort_order|N|20|20',                        "select|Priority|priority|N||{$priority_list}",                        "select|Status|status|N||{$status_list}",                        'textarea|Request Notes|request_notes|N|60|2',                    'code|</div>',                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">COMPLETE STATUS</div>',                        "select|Display|status_display|N||{$display_list}",                        'text|Date Completed|date_completed|N|20|20',                        'textarea|Completed Notes|completed_notes|N|60|2',                    'code|</div>',                'code|<br /><br />',                            );        }                        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        return $FormArray;    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {                        case 'description':            case 'request_notes':            case 'completed_notes':                $value      = TruncStr(strip_tags($value), 100);                $value      = nl2br($value);            break;                        case 'date_requested':            case 'date_action':            case 'date_completed':                $value = ($value != '0000-00-00') ? $value : '';                                // possibly convert date to human-readable form            break;                        case 'priority':                //$criticality_list       = "9=9 (Low - can wait for funds)|5=5 (Normal)|1=1 (High - Project will fail)";                $colors = array(                    '9'         => 'C0C0C0',    // gray = C0C0C0                    '5'         => 'C0C0C0',    // gray = C0C0C0                    '1'         => 'FF0000',    // red = FF0000                );                                if (ArrayValue($colors, $value)) {                    $td_options = "style=\"background-color:#{$colors[$value]};\"";                                }                                $values_list = array(                    '9'         => 'Low',                    '5'         => 'Normal',                    '1'         => 'High',                );                                if (ArrayValue($colors, $value)) {                    $value = $values_list[$value];                                }            break;                                    case 'status':                $colors = array(                    'Requested'         => 'FFFF00',    // yellow = FFFF00                    'Completed'         => '00FF00',    // green = 00FF00                    'Delayed'           => 'FF0000',    // red = FF0000                );                                if (ArrayValue($colors, $value)) {                    $td_options = "style=\"background-color:#{$colors[$value]};\"";                                }            break;                        case 'status_display':                $value      = ($value==1) ? 'YES' : 'NO';            break;                                }    }    public function Instructions()    {                $output = "            <br /><br />            <div class='shadow form_section_wrapper'>            <div class=\"form_section_header\" style='font-size:10px;'>Instructions <a class=\"toggle\" href=\"#\" id=\"menu_group_a\"><span class=\"updown\">&nbsp;</span></a></div>            <div class=\"menu_group\" style=\"display:none;\" id=\"div_menu_group_a\">                <ul>                <li>When a task is completed - Change the 'status' dropdown to 'Completed'. Then create a whitesheet for the task by clicking the 'add' graphic in that tasks' box area.</li>                <li>If you perform a task NOT on the production board - create a whitesheet using the 'Add Whitesheet' icon above the production board. This will create a whitesheet NOT tied to a specific task.</li>                <li>You can create unlimited notes and whitesheets for any task on the production board. After they are created, you may have to refresh the browser window to see the count increase.</li>                </ul>            </div>            </div>            ";        return $output;                        return $output;    }    }  // -------------- END CLASS --------------