<?phpclass Inventory_ProductionBoard extends Inventory_InventoryBase{    public $Show_Query                  = false;        public $Priority_List               = "9=9 (Low)|5=5 (Normal)|1=1 (High - Must be done today)";    public $Status_List                 = "Requested|Delayed|Completed";    public $Display_List                = "1=Yes|0=No";            public $date_monday                 = '2013-02-25';    public $date_tuesday                = '2013-02-26';    public $date_wednesday              = '2013-02-27';    public $date_thursday               = '2013-02-28';    public $date_friday                 = '2013-03-01';            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-02-17',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Production board managment and viewing',            'Update Log'    => Array(                '2013-02-17_1.0'  => "Module created",            ),        );                        #$this->SetParameters(func_get_args());        #$this->Barcode          = $this->GetParameter(0);        #$this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        #$this->Retailer_Code    = $this->GetParameter(2);                $this->Table                = 'inventory_production_board';        $this->Index_Name           = 'inventory_production_board_id';        $this->Default_Sort         = 'inventory_production_board_id';      // field for default table sort                $this->Field_Titles = array(            "{$this->Table}.inventory_production_board_id"          => 'Production Board Id',            "{$this->Table}.requestor"                              => 'Requestor',            "{$this->Table}.date_requested"                         => 'Date Requested',            "{$this->Table}.date_action"                            => 'Date of Action',            "{$this->Table}.title"                                  => 'Title',            "{$this->Table}.description"                            => 'Description',            "{$this->Table}.quantity"                               => 'Quantity',            "{$this->Table}.sort_order"                             => 'Sort Order',            "{$this->Table}.priority"                               => 'Priority',            "{$this->Table}.status"                                 => 'Status',            "{$this->Table}.request_notes"                          => 'Request Notes',            "{$this->Table}.status_display"                         => 'Display',            "{$this->Table}.date_completed"                         => 'Date Completed',            "{$this->Table}.completed_notes"                        => 'Request Notes',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                        $this->Join_Array       = Array();                $this->Default_Fields   = 'date_action, title, description, quantity, status, display';        $this->Unique_Fields    = '';                $this->Default_Values   = array(            'requestor'         => 'Richard',            'sort_order'        => 0,            'priority'          => '5',            'status'            => 'Requested',            'status_display'    => 1,            'date_requested'    => date('Y-m-d'),        );                        $this->Default_Where        = '';               // additional search conditions        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Close_On_Success     = true;        //$this->Edit_Links_Count     = '4';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;                        case 'list':            default:                // ----- display list of all assemblies that bave been built                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                        $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                        // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                        switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => ' inventory_products',                    'keys'  => 'description, retailer_code, barcode, status_retired',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%') AND active=1 AND status_hide_salesorder=0",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $retired = ($record['status_retired'] == 1) ? "[Retired] - " : "";                    $arr[] = array(                        'label'             => "{$record['barcode']} - {$retired}{$record['retailer_code']}",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;        }                echo $return;    }                public function ViewProductionBoard ()    {                                $output = "            <table class='pb_day_table'>            <tr>                <td class='pb_day_title'>MONDAY</td>                <td class='pb_day_title'>TUESDAY</td>                <td class='pb_day_title'>WEDNESDAY</td>                <td class='pb_day_title'>THURSDAY</td>                <td class='pb_day_title'>FRIDAY</td>            </tr>            <tr>                <td valign='top' class='pb_day_data_wrapper'>@@MONDAY@@</td>                <td valign='top' class='pb_day_data_wrapper'>@@TUESDAY@@</td>                <td valign='top' class='pb_day_data_wrapper'>@@WEDNESDAY@@</td>                <td valign='top' class='pb_day_data_wrapper'>@@THURSDAY@@</td>                <td valign='top' class='pb_day_data_wrapper'>@@FRIDAY@@</td>            </tr>            </table>        ";                                                $records_monday     = $this->GetExistingRecords($this->date_monday);        $records_tuesday    = $this->GetExistingRecords($this->date_tuesday);        $records_wednesday  = $this->GetExistingRecords($this->date_wednesday);        $records_thursday   = $this->GetExistingRecords($this->date_thursday);        $records_friday     = $this->GetExistingRecords($this->date_friday);                        $monday     = $this->FormatRecords($records_monday);        $tuesday    = $this->FormatRecords($records_tuesday);        $wednesday  = $this->FormatRecords($records_wednesday);        $thursday   = $this->FormatRecords($records_thursday);        $friday     = $this->FormatRecords($records_friday);                        AddSwap('@@MONDAY@@', $monday);        AddSwap('@@TUESDAY@@', $tuesday);        AddSwap('@@WEDNESDAY@@', $wednesday);        AddSwap('@@THURSDAY@@', $thursday);        AddSwap('@@FRIDAY@@', $friday);                //$this->GetExistingRecords();        //$this->GetExistingRecords();                echo $output;        $this->AddStyle();    }        public function AddStyle()    {        AddStyle("            .pb_day_table {                border:             2px solid #000;                padding:            5px;                width:  1000px;            }                        .pb_day_title {                padding:            5px;                font-weight:        bold;                color:              #fff;                background-color:   #aaa;                width:              400px;            }                        .pb_day_data_wrapper {                border:             1px solid #aaa;                padding:            5px;            }                        .pb_day_data {                border:             1px solid #000;                padding:            2px;                margin-bottom:      10px;            }                        .pb_day_data_title {                background-color:   #ddd;                padding:            2px;            }                        .pb_day_data_description {                padding:            2px;            }                        .pb_day_data_priority_low {                padding:            2px;                background-color:   #fff;            }                        .pb_day_data_priority_normal {                padding:            2px;                background-color:   #fff;            }                        .pb_day_data_priority_high {                padding:            2px;                background-color:   red;                color:              #fff;            }                        .pb_day_data_status_requested {                padding:            2px;                background-color:   #fff;            }                        .pb_day_data_status_delayed {                padding:            2px;                background-color:   red;                color:              #fff;            }                        .pb_day_data_status_completed {                padding:            2px;                background-color:   #ddd;            }                        .pb_day_data_hr {                border-bottom:      1px solid #ddd;            }                    ");    }            public function FormatRecords($RECORDS)    {        $output = '';                if ($RECORDS) {            foreach ($RECORDS as $record) {                                switch($record['priority']) {                    case '9':                        $priority           = "Priority: Low";                        $priority_class     = 'pb_day_data_priority_low';                    break;                    case '5':                        $priority           = "Priority: Normal";                        $priority_class     = 'pb_day_data_priority_normal';                    break;                    case '1':                        $priority           = "Priority: High";                        $priority_class     = 'pb_day_data_priority_high';                    break;                }                                switch($record['status']) {                    case 'Requested':                        $status         = "Status: Requested";                        $status_class   = 'pb_day_data_status_requested';                    break;                    case 'Delayed':                        $status         = "Status: Delayed";                        $status_class   = 'pb_day_data_status_delayed';                    break;                    case 'Completed':                        $status         = "Status: Completed";                        $status_class   = 'pb_day_data_status_completed';                    break;                }                                $description = nl2br($record['description']);                                $output .= "                    <div class='pb_day_data'>                        <div class='pb_day_data_title'>{$record['title']}</div>                        <div class='pb_day_data_description'>{$description}</div>                        <div class='pb_day_data_hr'><br /><br /></div>                        <div class='{$priority_class}'>{$priority}</div>                        <div class='{$status_class}'>{$status}</div>                    </div>";            }        }                return $output;    }            public function GetExistingRecords($DATE='', $DATESTART='', $DATEEND='')    {        // ----- get all records from the database        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_production_board",            'keys'      => "*",            'where'     => "date_action='{$DATE}' AND active=1",        ));        $this->EchoQuery();                return $records;    }        public function SetFormArrays()    {        AddStylesheet("/css/inventory.css??20121108-1");                        // ----- Javascript Functionality -----        $this->JavascriptToggleFunctionality();     // Javascript for taggling show/hide a div area        $this->JavascriptDatepickerFunctionality(array('FORM_date_action', 'FORM_date_requested', 'FORM_date_completed'));      // datepicker functionality                        // ----- create list of all previously entered data        $requestors             = $this->SQL->GetFieldValues($this->Table, 'requestor', "requestor != ''");        $requestor_list         = Form_ArrayToList($requestors);                        // ----- create some needed lists        $priority_list      = $this->Priority_List;        $status_list        = $this->Status_List;        $display_list       = $this->Display_List;                                                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|<div style='min-width:60px;'>&nbsp;</div>",                                    "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">REQUEST INFORMATION</div>',                    "selecttext|Requestor|requestor|N|40|80||{$requestor_list}",                    'text|Date Requested|date_requested|N|20|20',                    'text|Date Action|date_action|Y|20|20',                                        'text|Title|title|Y|60|255',                    'textarea|Description|description|N|60|2',                    'text|Quantity|quantity|N|20|20',                    'text|Sort Order|sort_order|N|20|20',                    "select|Priority|priority|N||{$priority_list}",                    "select|Status|status|N||{$status_list}",                    'textarea|Request Notes|request_notes|N|60|2',                'code|</div>',            'code|<br /><br />',                                    "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">COMPLETE STATUS</div>',                    "select|Display|status_display|N||{$display_list}",                    'text|Date Completed|date_completed|N|20|20',                    'textarea|Completed Notes|completed_notes|N|60|2',                'code|</div>',            'code|<br /><br />',                    );                        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        return $FormArray;    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {                        case 'description':            case 'request_notes':            case 'completed_notes':                $value      = TruncStr(strip_tags($value), 100);                $value      = nl2br($value);            break;                        case 'date_requested':            case 'date_action':            case 'date_completed':                $value = ($value != '0000-00-00') ? $value : '';                                // possibly convert date to human-readable form            break;                        case 'priority':                //$criticality_list       = "9=9 (Low - can wait for funds)|5=5 (Normal)|1=1 (High - Project will fail)";                $colors = array(                    '9'         => 'C0C0C0',    // gray = C0C0C0                    '5'         => 'C0C0C0',    // gray = C0C0C0                    '1'         => 'FF0000',    // red = FF0000                );                                if (ArrayValue($colors, $value)) {                    $td_options = "style=\"background-color:#{$colors[$value]};\"";                                }                                $values_list = array(                    '9'         => 'Low',                    '5'         => 'Normal',                    '1'         => 'High',                );                                if (ArrayValue($colors, $value)) {                    $value = $values_list[$value];                                }            break;                                    case 'status':                $colors = array(                    'Requested'         => 'FFFF00',    // yellow = FFFF00                    'Completed'         => '00FF00',    // green = 00FF00                    'Delayed'           => 'FF0000',    // red = FF0000                );                                if (ArrayValue($colors, $value)) {                    $td_options = "style=\"background-color:#{$colors[$value]};\"";                                }            break;                        case 'status_display':                $value      = ($value==1) ? 'YES' : 'NO';            break;                                }    }    }  // -------------- END CLASS --------------