<?phpclass Inventory_PrintDocument extends Inventory_InventoryBase{    public $Module_Offline              = false;                    // (false) TRUE = dispaly offline message to users    public $Show_Query                                  = false;    // (false) TRUE = display database queries used in this class            // ----- INPUT VARIABLES -----    public $Template_File           = "";               // template file to use    public $Filename                = "";               // filename for saving    public $Swap_Array              = array();          // hold the key => value swaps for the template        // ----- OUTPUT VARIABLES -----	    // ----- OTHER VARIABLES -----    public $Template_Path           = "";               // path of template files    public $Output_Path             = "";               // path to save files to                public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-08-01',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0.0',            'Description'   => 'Create a document for export/print',            'Update Log'    => array(                '2013-08-01_1.0.0'    => "Module Created",            ),        );                                $this->Template_Path            = $this->GetSetting('template_path_templates');        $this->Output_Path              = $this->GetSetting('template_path_output');                        // ----- Process any parameters sent in construct        //$this->SetParameters(func_get_args());        //$this->Inventory_Production_Board_Whitesheet_Id = $this->GetParameter(0);        //$this->Inventory_Production_Board_Id            = $this->GetParameter(1);                    } // -------------- END __construct --------------            public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                global $ROOT;                $this->ModuleOfflineMessage();      // show module offline essage - if activated        $this->CheckForErrors();            // check for any errors                                /*        case 'I':   // Send PDF to the standard output        case 'D':   // Download PDF as file        case 'F':   //         case 'FI':  //        case 'FD':  // force download        case 'S':   // Returns PDF as a string        */                        global $ROOT;                // ---------- fix the swap array so it has correct formatting ----------        $new_arr = array();        foreach ($this->Swap_Array AS $key => $value) {            $key_new = "[[{$key}]]";            $new_arr[$key_new] = $value;        }        $this->Swap_Array = $new_arr;                $path           = "{$ROOT}{$this->Template_Path}{$this->Template_File}";    // path to template file        $debug          = false;                                                    // debug flag        $action         = 'I';                                                      // action to do with PDF file        $PAGE_STREAM    = file_get_contents($path);                                 // get template content        $PAGE_STREAM    = astr_replace($this->Swap_Array, $PAGE_STREAM);            // swap content                ob_end_clean();                                                             // clear the output buffer        ob_start();                                                                 // turn on output buffering                echo $PAGE_STREAM;                                                          // output the swapped content onto page        //include($path);                                                           // get the template file contents - moves into output buffer        $template_content = ob_get_clean();                                         // get buffer contents and store as variables        $filename_out = $this->Filename;                                            // output filename (****.pdf)                                // ---------- convert in PDF ----------        try        {            $html2pdf = new HTML2PDF_html2pdf('P', 'LETTER', 'En');            //$html2pdf->setModeDebug();            $html2pdf->setDefaultFont('Arial');            $html2pdf->writeHTML($template_content, $debug);            $html2pdf->Output($filename_out, $action);        }        catch(HTML2PDF_exception $e) {            echo $e;            exit;        }                    }                public function _Execute()    {        # FUNCTION :: Main function called after instantiating this class                global $ROOT;                $this->ModuleOfflineMessage();      // show module offline essage - if activated        $this->CheckForErrors();            // check for any errors                        // ----- initialize objects and variables        $OBJ_PHPWord        = new PHPWord_PHPWord();        $document           = $OBJ_PHPWord->loadTemplate($ROOT . $this->Template_Path . $this->Template_File);        $fileid             = date("YmdHis");        $filename           = "{$this->Filename}_{$fileid}.docx";                if (!$document) {            echo "ERROR :: Document Not Found :: {$this->Template_File}";        } else {                                    /*            $cnt = count($this->Swap_Array['order_lines']);            $this->EchoVar('cnt', $cnt);            $document->cloneRow('order_line_description', $cnt);                                    foreach ($this->Swap_Array['order_lines'] AS $id => $line) {                $idx = $id + 1;                $document->setValue("order_line_description#{$idx}", $line['order_line_description']);                $document->setValue("order_line_qty#{$idx}",         $line['order_line_qty']);                $document->setValue("order_line_price#{$idx}",       $line['order_line_price']);            }            */                                    //$tbl = $this->Swap_Array['order_lines_table'];            //$document->setValue('order_lines_table', $tbl);                                    //$document->setValue('first_name#1', 'Rejaul');            //$document->setValue('last_name#1', 'Karim');                                                // ----- swap in all the values            foreach ($this->Swap_Array AS $key => $value) {                if ($key != 'universal_id') {                    $document->setValue($key, $value);                }            }                                                                        // ===== START :: SPECIAL TABLE SECTION =======================================================                        /*            $styleTable = array('borderColor'=>'006699',                'borderSize'=>6,                'cellMargin'=>50            );            $styleFirstRow = array('bgColor'=>'66BBFF');            $OBJ_PHPWord->addTableStyle('myTable', $styleTable, $styleFirstRow);                        $table = $section->addTable('myTable');                        $row_height = 400;            $cell_width = 2000;            $table->addRow($row_height);            $table->addCell($cell_width)->addText('Row 1 - Cell 1');            $table->addCell($cell_width)->addText('Row 1 - Cell 2');            $table->addCell($cell_width)->addText('Row 1 - Cell 3');                        $row_height = 1000;            $cell_width = 2000;            $table->addRow($row_height);            $table->addCell($cell_width)->addText('Row 2 - Cell 4');            $table->addCell($cell_width)->addText('Row 2 - Cell 5');            $table->addCell($cell_width)->addText('Row 2 - Cell 6');            */                        $results[] = array(                    'clientname'    => 'aaa 111',                    'clientaccount' => 'bbb 111',                    'regard'        => 'ccc 111',                );            $results[] = array(                    'clientname'    => 'aaa 222',                    'clientaccount' => 'bbb 222',                    'regard'        => 'ccc 222',                );                        $table = 'table start \n\n'; //'zzzz'; //empty table            //$results = '';            if ($results) { //if there was data returned from queryDB()                $table .= '<w:tbl>';                $table .= '<w:tblPr><w:tblW w:w = "5000" w:type="pct"/></w:tblPr>';                foreach($results as $debt){                    $table .= '<w:tr>';                         // new xml table row                                        $table .= '<w:tc><w:p><w:r><w:t>';          // start cell                    $table .= $debt['clientname'];                // cell contents                    $table .= '</w:t></w:r></w:p></w:tc>';      // close cell                                        $table .= '<w:tc><w:p><w:r><w:t>';          // start cell                    $table .= $debt['clientaccount'];             // cell contents                    $table .= '</w:t></w:r></w:p></w:tc>';      // close cell                                        $table .= '<w:tc><w:p><w:r><w:t>';          // start cell                    $table .= $debt['regard'];                    // cell contents                    $table .= '</w:t></w:r></w:p></w:tc>';		// close cell                                        //$table .= '<w:tc><w:p><w:r><w:t>';          // start cell                    //$table .= int2cash($debt->currentamt);      // cell contents                    //$table .= '</w:t></w:r></w:p></w:tc>';      // close cell                                        $table .= '</w:tr>';                        // close xml table row                } //done with dynamic data                $table .= '</w:tbl>'; //close xml table            }            $table .= '\n\n table end \n\n'; //'zzzz'; //empty table                        $document->setValue('universal_id', $table);                                    // ===== END :: SPECIAL TABLE SECTION =======================================================                                                                                    // ----- save the document            $document->save($ROOT . $this->Output_Path . $filename);                                    if (false) {                echo "                </br></br>                <div style='border:5px solid blue; padding:10px; margin:20px;'>                </br>template_file ===> {$this->Template_File}                </br>_documentXML ===> {$document->_documentXML}                 </div>";            }                        echo "                        <div style='border:5px solid blue; padding:10px; margin:20px;'>            File Saved: {$filename}            </br></br>            <div style='font-size:16px;'>            <a href='http://webmanager.whhub.com{$this->Output_Path}{$filename}' target='_file'>Download File</a>            </div>            </div>            ";        }    }        private function CheckForErrors()    {        if (!$this->Template_Path) {            $error = "Missing Template_Path";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                if (!$this->Output_Path) {            $error = "Missing Output_Path";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                if (!$this->Template_File) {            $error = "Missing Template_File";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                if (!$this->Swap_Array) {            $error = "Missing Swap_Array";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                if (!$this->Filename) {            $error = "Missing Swap_Array";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }    }        }  // -------------- END CLASS --------------