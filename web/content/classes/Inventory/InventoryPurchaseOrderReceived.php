<?phpclass Inventory_InventoryPurchaseOrderReceived extends Inventory_InventoryBase{    public $Show_Query                      = false;    //public $Record_ID                       = 0;    public $Inventory_Purchase_Orders_Id    = 0;            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-12',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-02-26',            'Filename'      => $this->Classname,            'Version'       => '1.2',            'Description'   => 'Show what lines have alrady been received on a PO',            'Update Log'    => array(                '2012-11-12_1.0'    => "Class created",                '2013-02-26_1.1'    => "Code changes to support database field change",                '2013-03-06_1.2'    => "Switched method of tracking PO to using the database ID and not the PO#",            ),        );                $this->SetParameters(func_get_args());        $this->Inventory_Purchase_Orders_Id = $this->GetParameter(0);                        $this->Table                = 'inventory_purchase_order_received';        $this->Index_Name           = 'inventory_purchase_order_received_id';                $this->Default_Where        = "`inventory_purchase_orders_id`='{$this->Inventory_Purchase_Orders_Id}' AND inventory_purchase_order_received.active=1";        $this->Default_Sort         = 'date';      // field for default table sort                $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                $this->Field_Titles = array(            "{$this->Table}.inventory_purchase_order_received_id"   => 'Inventory Purchase Order Received Id',            "{$this->Table}.inventory_purchase_orders_id"           => 'PO ID',            "{$this->Table}.inventory_purchase_order_lines_id"      => 'PO Line ID',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.quantity"                               => 'Quantity',            "{$this->Table}.price_shipping_total"                   => 'Shipping Price',            "{$this->Table}.price_total"                            => 'Total Price',            "{$this->Table}.barcode"                                => 'Barcode',            "inventory_products.description"                        => 'Description',            "inventory_products.manufacturer_code"                  => 'Manufacturer SKU',            "inventory_products.retailer_code"                      => 'APDM SKU',            "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                        $this->Join_Array = Array(            'inventory_products'  => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_purchase_order_received`.`barcode`",        );                        $this->Default_Fields       = 'date, barcode, description, manufacturer_code, retailer_code, quantity, price_total, price_shipping_total';        $this->Unique_Fields        = '';        $this->Default_Values       = array();        $this->Close_On_Success     = true;                $this->Edit_Links_Count     = '1';          // number of links at end of table        $this->Add_Link             = '';           // don't allow adding a record        $this->Show_Export          = false;        // false = don't allow export of this table        $this->Default_List_Size    = 1000;         // how many lines to allow in table before pagination        $this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                // not used    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'delete_received_inventory':                                /* P-CODE =================================================                Start Transaction                Deactivate the 'inventory_purchase_order_received' line                Remove the inventory from 'inventory_counts'                Update 'inventory_purchase_order_lines' to 'partial' or 'open'                Update 'inventory_purchase_orders' to 'partial' or 'open'                End Transaction                ================================================= */                                $this->Show_Query                       = false;        // override showing queries - or AJAX will fail                $inventory_purchase_order_received_id   = Get('id');    // determine which record to delete                $passed                                 = true;         // initialize variable                                if ($inventory_purchase_order_received_id != 0) {                                        # ===== START TRANSACTION ============================================================                    $this->SQL->StartTransaction();                                                                                # ----- Deactivate the 'inventory_purchase_order_received' line -----                    $db_record = array(                        'active'    => 0,                    );                    $where      = "`inventory_purchase_order_received_id`='{$inventory_purchase_order_received_id}'";                    $result     = $this->UpdateRecordLoc('inventory_purchase_order_received', $db_record, $where);                    $passed     = (!$result) ? false : $passed;                    $this->EchoQuery();                                                                                # ----- Remove the inventory from 'inventory_counts' -----                    $db_record = array(                        'active'    => 0,                        'notes'     => 'Inventory previously received - unreceived by user',                    );                    $where      = "`ref_purchase_orders_received_id`='{$inventory_purchase_order_received_id}'";                    $result     = $this->UpdateRecordLoc('inventory_counts', $db_record, $where);                    $passed     = (!$result) ? false : $passed;                    $this->EchoQuery();                                                                                # ===== COMMIT TRANSACTION ============================================================                    if ($passed) {                        $this->SQL->TransactionCommit();                        $return = 1;                    } else {                        $return = 0;                    }                                                                        } // end checking for 'inventory_purchase_order_received_id'            break;        }                echo $return;    }        function ScriptUnreceiveInventory()    {        $CLASS_EXECUTE_LINK     = '/office/AJAX/class_execute';        $eq                     = EncryptQuery("class=Inventory_InventoryPurchaseOrderReceived");        //$link                   = $CLASS_EXECUTE_LINK . '?eq=' . $eq . "&action=delete_received_inventory&id={$id}";                $script = <<<SCRIPT                    function tableUnreceiveInventoryClick(idx, value, eq)            {                var idbase = 'TABLE_ROW_ID' + idx + '_';                var rowNumber = $('#' + idbase + value + ' td:first-child').html().replace('.', '');                $('#' + idbase + value +' td').css('background-color','#ff7');                if (confirm('Are you sure you want to delete row (' + rowNumber + ')?')) {                    $.get('{$CLASS_EXECUTE_LINK}?eq={$eq}&action=delete_received_inventory&id=' + value, '', function(data){                        if (data == 1) {                            location.reload();  // reload the page as many items need to be updated                            //$('#' + idbase + value +' td').fadeOut();                        } else {                            alert('Error: Could not delete record! :: ' + data);                        }                    });                }                $('#' + idbase + value +' td').css('background-color','');                return false;            }                SCRIPT;AddScript($script);    }        public function SetFormArrays()    {        // not using function because we won't edit these lines    }        public function GetTableHeading($colcount)    {        $export = ($this->Show_Export)? $this->GetExportBlock() : '';        $RESULT = '            <tr class="TABLE_TITLE">                <td colspan="'. $colcount. '">                ' . $export . '                    Previously Received Inventory                </td>            </tr>';        return $RESULT;    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/AJAX/class_execute';                $eq                     = EncryptQuery("class=Inventory_InventoryPurchaseOrderReceived;v1={$id}");                $link                   = $CLASS_EXECUTE_LINK . '?eq=' . $eq . "&action=delete_received_inventory&id={$id}";                $script                 = "top.parent.appformCreate('Window', '{$link}', 'apps'); return false;";                                $this->Edit_Links = qqn("                    <td align=`center`><a href=`#` class=`row_delete`   title=`Delete` onclick=`tableUnreceiveInventoryClick('@IDX@','@VALUE@','@EQ@'); return false; `></a></td>                ");             break;                                    case "date":                $value = date('M d, Y', strtotime($value));            break;                        case "quantity":                $value = number_format($value);            break;                        case "price_total":            case "price_shipping_total":                $value = "\$ {$value}";            break;        }    }        }  // -------------- END CLASS --------------