<?php/* ====================================================================    NOTE :: DeleteBuildRecord() need to properly close window and refresh parent after delete    ==================================================================== */class Inventory_InventoryAssemblyBuild extends Inventory_InventoryBase{    public $Dialogid_Id                         = 0;    public $Show_Query                          = false;    public $Inventory_Assembly_Build_Id         = 0;    public $Inventory_Assembly_Requests_Id      = 0;    public $Inventory_Assemblies_Id             = 0;    public $Quantity_Assembled                  = 0;        private $Default_Locations_ID       = 0;        // will hold the default location    private $Inventory_Locations_ID     = 0;        // holds the current location were looking at inventory for        public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-19',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-09-02',            'Filename'      => $this->Classname,            'Version'       => '2.2.0',            'Description'   => 'Build an assembly item. This could be a direct call or fulfilling a build request.',            'Update Log'    => array(                '2012-11-19_1.0'    => "Module Created",                '2010-12-11_1.1'    => "Updated build person to selecttext",                '2013-01-11_1.2'    => "Added storing build record as a serialized string - for calculating assembly value",                '2013-01-30_1.3'    => "Layout design for FormArray() and code cleanup",                '2013-03-01_1.4'    => "Changes to PostProcessFormValues() to support new class structuring and functions",                '2013-06-04_1.5'    => "Bug fixes - move away from 'Loc' database calls",                '2013-07-01_2.0.0'  => "Supporting advanced assembly record",                '2013-08-28_2.1.0'  => "Support for module help in header.",                '2013-09-02_2.1.1'  => "Additional display fields in table",                '2013-09-02_2.2.0'	=> "Supports multiple locations",            ),        );                        $this->SetParameters(func_get_args());        $this->Inventory_Assembly_Build_Id      = $this->GetParameter(0);       // If passed in - is editing an existing build record        $this->Inventory_Assembly_Requests_Id   = $this->GetParameter(1);       // If passed in - is a request to build something specific        $this->Inventory_Assemblies_Id          = $this->GetParameter(2);       // If passed in - pulls a specific assembly build record - for new build        $this->Quantity_Assembled               = $this->GetParameter(3);        $this->Inventory_Locations_ID           = $this->GetParameter(4);                        $this->Default_Locations_ID             = $this->GetSetting('inventory_default_location_id');        $this->Default_Locations_ID             = (!$this->Default_Locations_ID) ? 1 : $this->Default_Locations_ID;        $this->Inventory_Locations_ID           = (!$this->Inventory_Locations_ID) ? $this->Default_Locations_ID : $this->Inventory_Locations_ID;                        $eq                     = Get('eq');        $query_array            = GetEncryptQuery($eq, false);        $PARENT_DIALOGID        = (isset($query_array['PARENT_DIALOGID'])) ? $query_array['PARENT_DIALOGID'] : '';        $this->Dialogid_Id      = $PARENT_DIALOGID;                                $this->Table                = 'inventory_assembly_build';        $this->Index_Name           = 'inventory_assembly_build_id';        $this->Default_Sort         = '';      // field for default table sort                        $this->Field_Titles = array(            "{$this->Table}.inventory_assembly_build_id"            => 'Inventory Assembly Build Id',            "{$this->Table}.inventory_assemblies_id"                => 'inventory_assemblies_id',            "{$this->Table}.barcode"                                => 'Barcode',                        "{$this->Table}.assembly_time"                          => 'Assembly Time',            "{$this->Table}.assembly_person"                        => 'Assembly Person',                        'inventory_assemblies.assembly_name'                    => 'Build - Assembly Name',            "{$this->Table}.build_record_array"                     => 'Build - Build Record',                        "inventory_products.description"                        => 'Created - Description',            "inventory_products.retailer_code"                      => 'Created - APDM Code',                        "{$this->Table}.date"                                   => 'Built Date',            "{$this->Table}.quantity"                               => 'Quantity',            "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Status',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',                    );                                $this->Join_Array = Array(            'inventory_products'    => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `{$this->Table}`.`barcode`",            'inventory_assemblies'  => "LEFT JOIN `inventory_assemblies` ON `inventory_assemblies`.`inventory_assemblies_id` = `{$this->Table}`.`inventory_assemblies_id`",        );                        $this->Default_Fields   = 'barcode, inventory_products.description, inventory_products.retailer_code, quantity, date, assembly_name';        $this->Unique_Fields    = '';                $this->Default_Values   = array(            'date'      => date('Y-m-d'),                    );                        $this->Default_Where        = '';               // additional search conditions        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Close_On_Success     = true;        $this->Edit_Links_Count     = '1';        $this->Use_Selection_Tab    = true;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $this->JavascriptConfirmDeleteAndOpenWindow();      // Javascript needed for deleting records from table with confirmation                        $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;                        case 'list':            default:                // ----- display list of all assemblies that have been built                                // ----- create the top-of-page module help                echo $this->GetPageHeaderHelp($this->Classname);                                $this->ListTable(true);     // TRUE = bypass outputting header             break;                        case 'view':                // special view case                echo "<h2>VIEW CASE</h2>";                echo "<br />Inventory_Assembly_Build_Id ---> " . $this->Inventory_Assembly_Build_Id;            break;                        case 'delete':                // ----- Deleting a new record                // ----- special delete case because a lot of different records need to be modified                $this->DeleteBuildRecord();            break;                        case 'change_location':                $this->ChangeLocation();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                        $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                        // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                        switch ($action) {                        case 'autocomplete_assembly_lookup':                                // ----- LOOK UP ALL ACTIVE INVENTORY ITEMS                                // ----- query database for records                // show all items if ~ character sent in                $query = Get('term');                $where = ($query == '~') ? " active=1 " : "(assembly_name LIKE '%{$query}%' OR barcode LIKE '%{$query}%') AND active=1";                                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_assemblies',                    'keys'  => 'inventory_assemblies_id, assembly_name, barcode',                    'where' => $where,                ));                $this->EchoQuery();                                                // ----- add additional fomratting to the return values                $arr = array();                foreach ($records as $record) {                    $arr[] = array(                        'label'             => "{$record['assembly_name']} - {$record['barcode']}",                        'description'       => $record['assembly_name'],                        'id'                => $record['inventory_assemblies_id'],                    );                }                                                // ----- convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;        }                echo $return;    }        private function JavascriptAutocomplete()    {        $eq = EncryptQuery('class=Inventory_InventoryAssemblyBuild');       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_10').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=autocomplete_assembly_lookup',                minChars        : 0,        // how many characters tot ype before starting function call                autoFocus       : true,     // select the first item on TAB key press                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_10" ).val( ui.item.label );                    $( "#FORM_inventory_assemblies_id" ).val( ui.item.id );                 // store Barcode                                        return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "<br>"  + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                // ----- Add needed stylesheet        //AddStylesheet("/css/inventory.css??20121108-1");                        // ----- fill in the request if there is one        $request_details    = $this->GetAssemblyRequestInfo($this->Inventory_Assembly_Requests_Id);        $request_display    = (!$this->Inventory_Assembly_Requests_Id) ? "display:none;" : '';                        // ----- fill in the assembly information        $this->Inventory_Assemblies_Id          = (Post('FORM_inventory_assemblies_id')) ? $_POST['FORM_inventory_assemblies_id'] : $this->Inventory_Assemblies_Id;        $_POST['FORM_inventory_assemblies_id']  = $this->Inventory_Assemblies_Id;                               // stores value in form        $assembly_details                       = $this->GetAssemblyDetails($this->Inventory_Assemblies_Id);    // get details of a given ASSY record        $assembly_display                       = ($this->Inventory_Assemblies_Id) ? "display:none;" : '';      // determine if we should show the ASSY record                        // ----- add the jQuery UI datepicker functionality        $this->JavascriptDatepickerFunctionality(array('FORM_date'));                           // date-picker functionality        $this->JavascriptTimepickerFunctionality(array('FORM_assembly_time'));                  // time-picker functionality                        // ----- add in needed javascript        $this->JavascriptDisplaySessionMessage();       // Display alert messages        $this->JavascriptAutocomplete();                // Javascript for lookup autocompletes        $this->JavascriptToggleFunctionality();         // Javascript for taggling show/hide a div area                        // ----- create list of all previously entered build people        $people                 = $this->SQL->GetFieldValues($this->Table, 'assembly_person', "assembly_person != ''");        $assembly_person_list   = Form_ArrayToList($people);                                        // ----- SET THE LOCATION -----        $_POST['FORM_inventory_locations_id']   = 0;            // initialize variable        $location_name_line                     = "";           // initialize variable                if ($this->Inventory_Locations_ID != 0) {            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_locations',                'keys'  => '*',                'where' => "inventory_locations_id={$this->Inventory_Locations_ID} AND active=1",            ));            //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        if ($record) {                $inventory_location_name                = (isset($record)) ? $record['location_name'] : 'n/a';                $_POST['FORM_inventory_locations_id']   = $this->Inventory_Locations_ID;                $eq                                     = EncryptQuery("class={$this->Classname};v1={$this->Inventory_Assembly_Build_Id};v2={$this->Inventory_Assembly_Requests_Id};v3={$this->Inventory_Assemblies_Id};v4={$this->Quantity_Assembled};v5={$this->Inventory_Locations_ID}");                $url                                    = "http://webmanager.whhub.com/office/class_execute.php;eq={$eq};action=change_location";                $inventory_location_change_link         = " [<a href='{$url}'>change location</a>]";                $location_name_line                     = "info|Location|{$inventory_location_name} {$inventory_location_change_link}";            }        }                                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|<div class='shadow form_section_wrapper' style='{$request_display}'>",                "code|<div class='form_section_header'>BUILD REQUEST DETAILS</div>",                "code|<div style='display:none;'>",                    'text|Request ID|inventory_assembly_requests_id|N|60|255',                    "text|Type Advanced|temp_11|N|60|100",                "code|</div>",                "code|$request_details",            "code|</div>",                        "code|<div class='shadow form_section_wrapper'>",                "code|<div class='form_section_header'>ASSEMBLY DETAILS</div>",                "code|<div style='{$assembly_display}'>",                    "text|Search|temp_10|N|60|100",                    "text|Assembly ID|inventory_assemblies_id|Y|60|100",                "code|</div>",                "code|$assembly_details",            "code|</div>",            "code|<br /><br />",                                    "hidden|inventory_locations_id",            //"text|Location ID|inventory_locations_id|N|60|100",            "{$location_name_line}",                                    'text|Build Date|date|N|60|255',            'text|Quantity Built|quantity|Y|60|255',            'text|Assembly Time|assembly_time|N|60|255',            "selecttext|Assembly Person|assembly_person|N|40|80||$assembly_person_list",            'textarea|Notes|notes|N|60|4',            "code|<br /><br />",                        "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">VENDOR DETAILS <a class="toggle" href="#" id="menu_group_a"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_a">',                    'info|Notes|If a vendor has done work on inventory - enter those details here.',                    'text|Invoice Reference|invoice_reference|N|60|255',                    'text|Vendor Cost Total|vendor_cost|N|20|255',                    'text|Shipping Cost Total|shipping_cost|N|20|255',                    'text|Other Cost Total|other_cost|N|20|255',                "code|</div>",            "code|</div>",        );                        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {                $passed                             = true;                                         // initialize variable        $adding                             = ($this->Action == 'ADD') ? true : false;      // hold edit status               $inventory_assemblies_id            = $FormArray['inventory_assemblies_id'];        $inventory_assembly_requests_id     = isset($FormArray['inventory_assembly_requests_id']) ? $FormArray['inventory_assembly_requests_id'] : 0;        $requested                          = (isset($FormArray['inventory_assembly_requests_id']) && ($FormArray['inventory_assembly_requests_id'] != 0)) ? true : false;        $total_built                        = $FormArray['quantity'];        $type_advanced                      = ($FormArray['temp_11'] == 1) ? true : false;        $inventory_locations_id             = $FormArray['inventory_locations_id'];        $notes                              = ($FormArray['notes'] != '') ? "Assembly build - {$FormArray['notes']}" : "Assembly build";                        if (!$inventory_assemblies_id) {            $this->AddError("NO inventory_assemblies_id PASSED IN");            $passed = false;            return $FormArray;        }                if (!$total_built) {            $this->AddError("NO total_built PASSED IN");            $passed = false;            return $FormArray;        }                if (!$inventory_locations_id) {            $this->Error .= "<br />ERROR :: No inventory location provided.";            $passed = false;            return $FormArray;        }                                # ==============================================================================        # ==============================================================================        # MUST DO ALL EXTRANEOUS DB CALLS BEFORE DOING THE TRANSACTION ADD        # ==============================================================================                // ========== CREATE ASSEMBLY RECORD =========        $Obj_BuildRecord                = new Inventory_AssemblyBuildRecord();        $build_record_array             = $Obj_BuildRecord->CreateBuildRecord_FromInventoryAssembliesId($inventory_assemblies_id);        $build_record_array_serialized  = ($build_record_array) ? serialize($build_record_array) : '';  // serialize it for database storage                        // ----- additional information needed for outbound database processing later        $record_assembly_master         = $Obj_BuildRecord->Record_Assembly_Master;        $records_assembly_lines_out     = $Obj_BuildRecord->Records_Assembly_Lines;        $records_assembly_lines         = $Obj_BuildRecord->Records_Assembly_Lines;                $assy_barcode_created           = $record_assembly_master['barcode'];                           // item barcode crated in this assembly        $assy_quantity_created          = $record_assembly_master['quantity'];                          // quantity created in this assembly                /*        $this->EchoVar('build_record_array_serialized', $build_record_array_serialized);        $this->EchoVar('record_assembly_master', $record_assembly_master);        $this->EchoVar('records_assembly_lines_out', $records_assembly_lines_out);        $this->EchoVar('assy_barcode_created', $assy_barcode_created);        $this->EchoVar('assy_quantity_created', $assy_quantity_created);                exit();        */                // ----- re-acquire the main barcode being created        /*        $master_barcode = $Obj_BuildRecord->Barcode_Created;                $this->EchoVar('inventory_assemblies_id', $inventory_assemblies_id);        $this->EchoVar('master_barcode', $master_barcode);                        $this->EchoVar('build_record_array', $build_record_array);                $this->EchoVar('record_assembly_master', $record_assembly_master);        $this->EchoVar('records_assembly_lines_out', $records_assembly_lines_out);        $this->EchoVar('assy_barcode_created', $assy_barcode_created);        $this->EchoVar('assy_quantity_created', $assy_quantity_created);        exit();        */                if (!$type_advanced) {            // ----- make sure inventory item that we're creating is active            $exist = $this->StatusInventoryItemExist($assy_barcode_created);            if (!$exist) {                                $this->Error .= "<br />Inventory item being created not found in system. Barcode: {$assy_barcode_created}";                $passed = false;            }        }                // ----- make sure each individual inventory item were decreasing/increasing is active        foreach ($records_assembly_lines_out AS $record) {                        // ----- make sure inventory item is active            $exist = $this->StatusInventoryItemExist($record['barcode']);            if (!$exist) {                $this->Error .= "<br />Inventory item used in assembly not found. Barcode: {$record['barcode']}";                $passed = false;            }                // ----- make sure qty is available for inventory item            $date_build             = $FormArray['date'];            $qty_available          = $this->InventoryItemQuantityAvailable($record['barcode'], $date_build, $inventory_locations_id);            $total_quantity_remove  = ($total_built * $record['quantity_out']);                            if ($qty_available < $total_quantity_remove) {                $qty_available = ($qty_available == '') ? "0" : $qty_available;                $details = $this->GetInventoryItemRetailerCodeFromBarcode($record['barcode']);                $this->Error .= "<br />Inventory item used in assembly does not have enough quantity. Barcode: {$record['barcode']}. Details: {$details}. Qty Needed: {$total_quantity_remove}. Qty Available: {$qty_available}";                $passed = false;            }        }                        # ==============================================================================        # ==============================================================================        # ==============================================================================                                if ($passed) {                        # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                                                           // ===== CALCULATE THE ASSEMBLY VALUE =====            // NOTE ::  This is not done here any more. For true LIFO we can NEVER store an assembly value.            //          instead we have to store the date of the transaction and the build record used. Then,            //          when we want an assembly value - we have to overlay all inventory IN and OUTs - and determine            //          which inventory was used for the specified inventory.                                               // ========== ADD A BUILD RECORD - needed before entering inventory ==========            $db_record = array(                //'inventory_assembly_requests_id'    => $inventory_assembly_requests_id,                'inventory_assemblies_id'           => $inventory_assemblies_id,                'barcode'                           => $assy_barcode_created,                'date'                              => $FormArray['date'],                'quantity'                          => $total_built,                'notes'                             => $notes,                'assembly_time'                     => $FormArray['assembly_time'],                'assembly_person'                   => $FormArray['assembly_person'],                'reference_vendor_cost'             => $FormArray['vendor_cost'],                'reference_shipping_cost'           => $FormArray['shipping_cost'],                'reference_other_cost'              => $FormArray['other_cost'],                'reference_invoice'                 => $FormArray['invoice_reference'],                'build_record_array'                => $build_record_array_serialized,                'inventory_locations_id'            => $inventory_locations_id,            );                        $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_assembly_build',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));            $passed                         = (!$result) ? false : $passed;            $inventory_assembly_build_id    = $this->SQL->Last_Insert_Id;            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        if (!$result) {                $this->AddError("Unable to add build record");            }                                                                        // ========== START :: UPDATE INVENTORY QUANTITIES ==========                    if (!$type_advanced) {            // ----- Increase inventory line item            $db_record = array(                'barcode'                   => $assy_barcode_created,                'qty_in'                    => ($total_built * $assy_quantity_created),                'ref_assembly_build_id'     => $inventory_assembly_build_id,                'notes'                     => $notes,                'date'                      => $FormArray['date'],                'inventory_locations_id'    => $inventory_locations_id, //$this->Default_Locations_ID,            );                        $result = $this->SQL->AddRecord(array(                'table'     => 'inventory_counts',                'keys'      => $this->SQL->Keys($db_record),                'values'    => $this->SQL->Values($db_record),            ));            $passed     = (!$result) ? false : $passed;            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        if (!$result) {                $this->AddError("Unable to add inventory being built");            }                                            // ----- Decrease all inventory line items            foreach ($records_assembly_lines_out AS $record) {                                $passed_local = true;                                                                // ----- only remove inventory from inventory_counts if qty > 0 -- we don't want 0-qty records in this table                $total_quantity_remove  = ($total_built * $record['quantity_out']);                if ($total_quantity_remove > 0) {                    $db_record = array(                        'barcode'                   => $record['barcode'],                        'qty_out'                   => $total_quantity_remove,                        'ref_assembly_build_id'     => $inventory_assembly_build_id,                        'date'                      => $FormArray['date'],                        'notes'                     => $notes,                        'inventory_locations_id'    => $inventory_locations_id,                    );                    $result = $this->SQL->AddRecord(array(                            'table'     => 'inventory_counts',                            'keys'      => $this->SQL->Keys($db_record),                            'values'    => $this->SQL->Values($db_record),                        ));                    $passed     = (!$result) ? false : $passed;                    $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                        if (!$result) {                        $this->AddError("Unable to subtract inventory being built");                    }                }                            }            // ========== END :: UPDATE INVENTORY QUANTITIES ==========        } else {                        // ----- Increase or Decrease all inventory line items            foreach ($records_assembly_lines AS $record) {                                // ----- only remove inventory from inventory_counts if qty > 0 -- we don't want 0-qty records in this table                $total_quantity_remove  = ($total_built * $record['quantity_out']);                $total_quantity_add     = ($total_built * $record['quantity_in']);                                if ($total_quantity_remove >= 0 && $total_quantity_remove >= 0) {                    $db_record = array(                        'barcode'                   => $record['barcode'],                        'qty_out'                   => $total_quantity_remove,                        'qty_in'                    => $total_quantity_add,                        'ref_assembly_build_id'     => $inventory_assembly_build_id,                        'date'                      => $FormArray['date'],                        'notes'                     => $notes,                        'inventory_locations_id'    => $inventory_locations_id,                    );                    $result = $this->SQL->AddRecord(array(                            'table'     => 'inventory_counts',                            'keys'      => $this->SQL->Keys($db_record),                            'values'    => $this->SQL->Values($db_record),                        ));                    $passed     = (!$result) ? false : $passed;                    $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                        if (!$result) {                        $this->AddError("Unable to add or subtract inventory being built");                        $passed = false;                    }                }                            }        }                                                //echo "<br /><br />passed status ==> " . $passed;                        # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                                                                #return $FormArray;                #exit();                                // ----- trigger a success message                if ($adding) {                    $this->SuccessfulAddRecord();                } else {                    $flash      = $this->Idx;                    $id         = $this->Idx;                    $id_field   = $this->Index_Name;                    $this->SuccessfulEditRecord($flash, $id, $id_field);                }                                                // ----- Do A force redirect to bypass BaseClass further procesing this                //$link = $this->getPageURL();                //$_SESSION['alert_message'] = ($adding) ? "BUILD ADDED SUCESSFULLY" : "BUILD UPDATED SUCESSFULLY";                //header("Location: {$link}");            } else {                            #echo "<br /><br /><b>ERRORS ===> </b>" . $this->Error;                #exit();                                        return $FormArray;            }                    } else {            return $FormArray;        }                            }                private function GetAssemblyRequestInfo($REQUEST_ID)    {        $request_details = "";                if ($REQUEST_ID) {                                    $record = $this->SQL->GetRecord(array(                'table' => 'inventory_assembly_requests',                'keys'  => 'inventory_assemblies_id, quantity, quantity_built',                'where' => "`inventory_assembly_requests_id`='{$REQUEST_ID}'",            ));                        if ($record) {                $qty_remain = $record['quantity'] - $record['quantity_built'];                                $request_details = "                    <div style='background-color:#fff; padding:5px; font-size:14px;'>REQUEST DETAILS</div>                    <div style='padding:5px; font-size:12px;'>                        <b>Total Requested:</b> {$record['quantity']}<br />                        <b>Total Already Built:</b> {$record['quantity_built']}<br />                        <b>Total Remaining:</b> {$qty_remain}                    </div>                    ";                                $_POST['FORM_inventory_assemblies_id']           = $record['inventory_assemblies_id'];                $_POST['FORM_inventory_assembly_requests_id']    = $this->Inventory_Assembly_Requests_Id;                            } else {                echo "ERROR :: UNABLE TO LOAD BUILD REQUEST";                exit();            }                    }                return $request_details;    }        private function GetAssemblyDetails($ASSEMBLY_ID)    {        # FUNCTION :: Get details of a given assembly - what are we creating                $assembly_details = "";                if ($ASSEMBLY_ID) {                        // ----- get record from  database            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_assemblies',                'keys'  => 'assembly_name, type_advanced, inventory_assemblies.barcode, inventory_products.description, inventory_products.retailer_code',                'where' => "inventory_assemblies.`inventory_assemblies_id`='{$ASSEMBLY_ID}'",                'joins' => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_assemblies`.`barcode`"            ));            //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                        // ----- format the output            if ($record) {                                                if ($record['type_advanced'] == 1) {                                    $assembly_details = "                        <div style='padding:5px; font-size:12px;'>                            <table>                            <tr><td align='right' valign='top'></td><td><b>ADVANCED ASSEMBLY</b></td></tr>                            <tr><td align='right' valign='top'><b>NAME:</b></td><td>{$record['assembly_name']}</td></tr>                            </table>                        </div>                        ";                                            $_POST['FORM_temp_10']           = "{$record['assembly_name']}";                    $_POST['FORM_temp_11']           = $record['type_advanced'];                                    } else {                                    $assembly_details = "                        <div style='padding:5px; font-size:12px;'>                            <table>                            <tr><td align='right' valign='top'><b>APDM SKU:</b></td><td>{$record['retailer_code']}</td></tr>                            <tr><td align='right' valign='top'><b>Barcode:</b></td><td>{$record['barcode']}</td></tr>                            <tr><td align='right' valign='top'><b>Description:</b></td><td>{$record['description']}</td></tr>                            </table>                        </div>                        ";                                            $_POST['FORM_temp_10']           = "{$record['assembly_name']} - {$record['barcode']}";                                    }            } else {                echo "ERROR :: UNABLE TO LOAD ASSEMBLY";                exit();            }                    }                return $assembly_details;    }                public function DeleteBuildRecord()    {        # FUNCTION :: USED TO FULLY DELETE A BUILD ASSEMBLY RECORD                /* P-CODE ========================================================                Delete the Build Record        Remove the inventory counts (adding and deleting)        Update the Build Request Record (if there is one)                =============================================================== */                if ($this->Inventory_Assembly_Build_Id) {                        $passed                             = true; // initialize variable                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                        // ----- get the request_id (if applicaable)            $record = $this->SQL->GetRecord(array(                'table' => "inventory_assembly_build",                'keys'  => "inventory_assembly_requests_id, inventory_assemblies_id, barcode, quantity",                'where' => "`inventory_assembly_build_id`='{$this->Inventory_Assembly_Build_Id}' AND `active`=1",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        if ($record) {                $inventory_assembly_requests_id     = $record['inventory_assembly_requests_id'];                $built_barcode                      = $record['barcode'];                $built_quantity                     = $record['quantity'];                $inventory_assemblies_id            = $record['inventory_assemblies_id'];            } else {                $this->AddError("inventory_assembly_build Record not found.");                $passed = false;            }                                                // ----- de-activate the build record            $db_record  = array('active' => 0);            $where      = "`inventory_assembly_build_id`='{$this->Inventory_Assembly_Build_Id}' AND `active`=1";            $result     = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_assembly_build',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => $where,                ));            $passed     = (!$result) ? false : $passed;            //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                    // ----- de-activate the inventory counts records            $db_record  = array('active' => 0);            $where      = "`ref_assembly_build_id`='{$this->Inventory_Assembly_Build_Id}' AND `active`=1";            $result     = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_counts',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => $where,                ));            $passed     = (!$result) ? false : $passed;            //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                    // ----- update the build request record            if ($inventory_assembly_requests_id) {                            $record = $this->SQL->GetRecord(array(                    'table' => 'inventory_assembly_requests',                    'keys'  => 'quantity, quantity_built',                    'where' => "`inventory_assembly_requests_id`='{$inventory_assembly_requests_id}'",                ));                //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                if ($record) {                                        $new_quantity_built = ($record['quantity_built'] - $built_quantity);      // calculate how many have been un-built                                        if ($new_quantity_built < 0) {                        $this->AddError("Attempting to un-build more than previously built");                        $passed = false;                    }                                        $db_record  = array(                        'active'            => 1,                        'quantity_built'    => $new_quantity_built,                    );                    $where      = "`inventory_assembly_requests_id`='{$inventory_assembly_requests_id}'";                    $result     = $this->SQL->UpdateRecord(array(                        'table'         => 'inventory_assembly_requests',                        'key_values'    => $this->SQL->KeyValues($db_record),                        'where'         => $where,                    ));                    $passed     = (!$result) ? false : $passed;                    //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                } else {                    $this->AddError("inventory_assembly_requests Record not found.");                    $passed = false;                }                            }                                    #echo "passed ===> " . $passed;            #exit();                                    # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                                echo "<br /><br /><h2>SUCCESSFULLY DELETED - REFRESH PARENT TABLE</h2>";                                                /*                // Put sucess message on screen                //$_SESSION['alert_message'] = "BUILD DELETED SUCESSFULLY";                                // refresh the parent table                if (isset($this->Dialogid_Id)) {                    $script = "top.parent.document.getElementById('appformIframe{$this->Dialogid_Id}').contentWindow.refresh();";                                        echo "                    <script type='text/javascript'>                    {$script}                    </script>                    ";                                        AddScript($script);                }                */                        // close this window                //$this->SuccessfulAddRecord();                                                //exit();                            } else {                            echo "<br /><br /><b>ERRORS ===> </b>" . $this->Error;                exit();            }                    }    }                public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {                        case 'build_record_array':                // ----- convert build record to a table                $arr = unserialize($value);                                                /* ===== USED TO TEMPORARILY FIX BUILD RECORDS =====                $this->EchoVar('arr', $arr);                // ----- modify                foreach ($arr as $id => $record) {                    if ($record['barcode'] == 10068 || $record['barcode'] == 10016) {                        $arr[$id]['quantity_in'] = $record['quantity_out'];                        $arr[$id]['quantity_out'] = 0;                    }                }                // ----- re-serialize                $te = serialize($arr);                $this->EchoVar('te', $te);                ===================================================== */                                                if (is_array($arr)) {                    $table = "<table><tr style='font-weight:bold'><td>BARCODE</td><td>OUT</td><td>IN</td><td>SKU</td></tr>";                    foreach ($arr as $record) {                        $sku = $this->GetInventoryItemRetailerCodeFromBarcode($record['barcode']);                        $table .= "<tr><td>{$record['barcode']}</td><td>{$record['quantity_out']}</td><td>{$record['quantity_in']}</td><td>{$sku}</td></tr>";                    }                    $table .= "</table>";                    $value = $table;                } else {                    $value = '';                }                            break;                        default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = 'http://webmanager.whhub.com/office/class_execute';                $eq                     = EncryptQuery("class=Inventory_InventoryAssemblyBuild;v1={$id};PARENT_DIALOGID=$this->Dialogid_Id");                $link                   = $CLASS_EXECUTE_LINK . '?eq=' . $eq . '&action=view';                $script                 = "top.parent.appformCreate('Window', '{$link}', 'apps'); return false;";                                                $eq2                    = EncryptQuery("class=Inventory_InventoryAssemblyBuild;v1={$id};PARENT_DIALOGID=$this->Dialogid_Id");                $link2                  = $CLASS_EXECUTE_LINK . '?eq=' . $eq2 . '&action=delete';                $script2                = "ConfirmDeleteAndOpenWindow('{$link2}'); return false;";                                                $this->Edit_Links = qqn("                    <td align=`center`><a href=`#` class=`row_delete`   title=`Delete`  onclick=`{$script2}; return false;`></a></td>                    ");                                        //<td align=`center`><a href=`#` class=`row_view`     title=`View`  onclick=`{$script}; return false;`></a></td>                                        //<td align=`center`><a href=`#` class=`row_view`     title=`View`   onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a></td>                    //<td align=`center`><a href=`#` class=`row_delete`   title=`Delete` onclick=`tableDeleteClick('@IDX@','@VALUE@','@EQ@'); return false; `></a></td>                                        //<td align=`center`><a href=`#` class=`row_edit`     title=`Edit`   onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a></td>                    //<td align=`center`><a href=`#` class=`row_receive`  title=`Build`  onclick=`{$script}; return false;`></a></td>                    //<td align=`center`><a href=`#` class=`row_viewline` title=`Calculate COGS`  onclick=`{$script2}; return false;`></a></td>                    //<td align=`center`><a href=`#` class=`row_view`     title=`View`   onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a></td>                                break;        }    }    public function CreateBuildRecord($ARR)    {        // ----- CREATE A BUILD RECORD - SHOWS WHAT INVENTORY ITEMS AND QTYs WERE USED -----        // ----- This is used to caluclate proper price of assembly later on -----                        $Obj_BuildRecord        = new Inventory_AssemblyBuildRecord();        $build_record_array     = $Obj_BuildRecord->CreateBuildRecord($ARR);                return $build_record_array;    }        public function ChangeLocation()    {        # FUNCTION :: Show form for changing the inventory location                $output = '';       // initialize variable                                // ----- GET ALL LOCATIONS        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_locations',            'keys'  => '*',            'where' => 'active=1',        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                               // ----- create the status select drop-down        $select_options     = '';        foreach ($records as $record) {            $selected        = ($record['inventory_locations_id'] == $this->Inventory_Locations_ID) ? ' selected' : '';            $link            = EncryptQuery("class={$this->Classname};v1={$this->Inventory_Assembly_Build_Id};v2={$this->Inventory_Assembly_Requests_Id};v3={$this->Inventory_Assemblies_Id};v4={$this->Quantity_Assembled};v5={$record['inventory_locations_id']}");            $select_options .= "<option value='{$link}' {$selected}>{$record['location_name']}</option>";        }        $status_select      = "<select id='location_select'>{$select_options}</select>";        $btn_submit         = MakeButton('positive', 'SUBMIT', '', '', 'btn_clear', "locationChangeSubmit()", 'button', 'btn_clear');        $spacer             = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";                        $output .= "<div class='shadow form_section_wrapper'>";        $output .= '<div class="form_section_header">CHANGE LOCATION</div>';        $output .= "<div style='min-width:300px;'>&nbsp;</div>";        $output .= "{$status_select}{$spacer}{$btn_submit}</br></br>";        $output .= "</div>";        $output .= "</div>";                        // ----- add script for updating location        $url    = "http://webmanager.whhub.com/office/class_execute.php";        AddScript("            function locationChangeSubmit()            {                var value = $('#location_select').attr('value');                window.location = '{$url};action=add;eq=' + value;            }        ");                        echo $output;    }            }  // -------------- END CLASS --------------