<?phpclass Inventory_DatabaseSelect extends Inventory_InventoryBase{    public $Show_Query                      = false;        private $Class_Initialized              = false;        // (false) TRUE = stops inititlization class from running again    private $User_Default_Initialized       = false;        // (false) TRUE = stops inititlization class from running again            public $Inventory_Systems_Allowed       = array();      // initialize variable    public $Inventory_Systems_Current_Id    = 0;            // initialize variable    private $Db_Connect_String              = array();      // initiialize variable        private $Session_Name_Root              = 'INVENTORY';    private $Session_Name_Current           = 'SYSTEM_CURRENT_ID';    private $Session_Name_Default           = 'SYSTEM_DEFAULT_ID';    private $Session_Name_Query             = 'SYSTEM_CURRENT_QUERY';            public function  __construct()    {        parent::__construct();                // ----- DO NOT CHANGE TO INVENTORY DATABASE - SETTINGS COME FROM MAIN SQL DATABASE        #$this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-04-22',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Pick which inventory system user wants to access',            'Update Log'    => array(                '2013-04-22_1.0'    => "Module Created",            ),        );                        $this->Initialize();            } // -------------- END __construct --------------        public function Initialize()    {                //$this->EchoVar('Class_Initialized', );        //echo "</br>----> " . $this->Class_Initialized;        //if (!$this->Class_Initialized) {                                    //$this->EchoVar('', $_SESSION[$this->Session_Name_Root]);                                    // ----- get all the systems a user can access            $this->Get_UserInventorySystems();                        // ----- initialize the user's default connection            $this->InitializeUserDefault();                        // ----- initialize currently selected option            $this->Inventory_Systems_Current_Id = (isset($_SESSION[$this->Session_Name_Root][$this->Session_Name_Current])) ? $_SESSION[$this->Session_Name_Root][$this->Session_Name_Current] : $this->Inventory_Systems_Current_Id;                    // ----- store db connection string            //$this->Set_DbConnectionString();                                    // ----- stop this initialization from happening again            // ----- NOTE :: This class needs to be run as singleton because of this action            //$this->Class_Initialized = true;            //$this->EchoVar('Class_Initialized - POST', $this->Class_Initialized);        //}    }        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                // ----- check if user can access any inventory systems        if (!$this->Inventory_Systems_Allowed) {            echo "<h1>YOU DO NOT HAVE ACCESS TO INVENTORY SYSTEMS</h1>";            exit();        } else {            // ----- call the form array by "adding" a record            $this->AddRecord();        }    }        public function SetFormArrays()    {            // ----- instantiate and call help file for this module        $OBJ_Help   = new Help_HelpInstructions();        $help1      = ''; //$OBJ_Help->ShowHelpIndicator(1);                                        // ----- get details from the SESSION variables        $systems_arr        = $this->Inventory_Systems_Allowed;        $current_system_id  = $this->Inventory_Systems_Current_Id;                        // ----- creat list of all iventory systems        $list               = '';                                   // instantiate for user dispaly        $inventory_list     = '';                                   // instantiate for form drop-down                foreach ($systems_arr AS $id => $arr) {            $list               .= "</br>Company: {$arr['title']} ({$id})";            $inventory_list     .= "{$id}={$arr['title']}|";        }        $inventory_list = substr($inventory_list, 0, -1);           // remove trailing pipe character                        // ----- output message to customer        $message = '';        if ($current_system_id != 0) {                        // ----- message for user            $message = "                <div style='font-size:14px; padding:10px;'>                YOU ARE CURRENTLY ACCESSING THE FOLLOWING INVENTORY SYSTEM:                 <b>{$systems_arr[$current_system_id]['title']}</b>                </div>";                // ({$current_system_id})                        // ----- set default to what user is currently accessing            $this->Default_Values   = array(                'temp_inventory_system' => $current_system_id,            );        }                        // ----- warning message        $warning = $OBJ_Help->GetHelpContent(2);                $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">ADVANCED DETAILS '.$help1.'</div>',                'code|<div class="menu_group" style="display:_none;" id="div_menu_group_advanceddetail">',                                "code|<div style='width:400px;'>",                "code|</br>{$warning}</br></br>",                "code|</br>{$message}</br></br>",                "code|</div>",                                "select|Inventory Systems|temp_inventory_system|N||{$inventory_list}",				            'code|</div>',            "submit|SUBMIT|{$this->Add_Submit_Name}",            'endform',        );                $this->Form_Data_Array_Add = $base_array;    }        public function PostProcessFormValues($FormArray)     {        # FUNCTION :: Process the form array                $selected_system_id = $FormArray['temp_inventory_system'];                      // get selected database        $this->Inventory_Systems_Current_Id = $selected_system_id;                      // store in class        $_SESSION[$this->Session_Name_Root][$this->Session_Name_Current] = $selected_system_id;      // store in session                                // ----- set the database connection string        $system = $this->Inventory_Systems_Allowed[$selected_system_id];        $this->Db_Connect_String = array(            'NAME' => $system['db_name'],            'HOST' => $system['db_host'],            'USER' => $system['db_user'],            'PASS' => $system['db_pass'],        );        $this->Set_DbConnectionString();                        if (false) {            $this->EchoVar('selected_system_id', $selected_system_id);            $this->EchoVar('this->Db_Connect_String', $this->Db_Connect_String);        }                        // ----- message to the user        echo "<h1>CHANGE SAVED - WAIT FOR RELOAD</h1>";                                     // output message to user        echo '<script type="text/javascript">top.parent.location.reload();</script>';                  // add script to refresh window        exit();                                                                             // stop further processing    }        public function UserIndexDisplay()    {        # FUNCTION :: Create the display for the user's home page                $output = '';                // ----- get details from the SESSION variables        $systems_arr        = $this->Inventory_Systems_Allowed;        $current_system_id  = $this->Inventory_Systems_Current_Id;                        if ($systems_arr) {                        if ($current_system_id != 0)            {                // ----- we already know the inventory system to use                $company    = $systems_arr[$current_system_id]['title'];                $change     = (count($systems_arr) > 1) ? "<a href='#' onclick=\"appformCreate('Inventory Database Select', 'inventory/inventory_database_select','apps'); return false;\"> [change]</a>" : '';            } else {                // ----- we need to figure out company                $company    = "<span style='color:red;'>NONE</span>";                $change     = (count($systems_arr) > 1) ? "<a href='#' onclick=\"appformCreate('Inventory Database Select', 'inventory/inventory_database_select','apps'); return false;\"> [select]</a>" : '';            }                        $output     = "<b>Inventory:</b> {$company} {$change}";                        //$output .= ArrayToStr($systems_arr);        }                return $output;    }        public function InitializeUserDefault()    {        # FUNCTION :: If user only has access to one inventory system - initialize it as default                if (isset($_SESSION[$this->Session_Name_Root][$this->Session_Name_Default])) {            $this->Inventory_Systems_Current_Id     = $_SESSION[$this->Session_Name_Root][$this->Session_Name_Default];                           // store key into session variable                        // ----- inititalize the db connection query            $system = $this->Inventory_Systems_Allowed[$this->Inventory_Systems_Current_Id];            $this->Db_Connect_String = array(                'NAME' => $system['db_name'],                'HOST' => $system['db_host'],                'USER' => $system['db_user'],                'PASS' => $system['db_pass'],            );            $this->Set_DbConnectionString();                } else {                    //if (!$this->User_Default_Initialized) {                // ----- get details from the SESSION variables                $systems_arr        = $this->Inventory_Systems_Allowed;                $current_system_id  = $this->Inventory_Systems_Current_Id;                                if ((count($systems_arr) == 1) && ($current_system_id == 0)) {                    // ----- we haven't initialized default                    $first_key = key($systems_arr); // First Element's Key                                        // ----- store value into session variables                    if ($first_key != 0) {                        $_SESSION[$this->Session_Name_Root][$this->Session_Name_Default]    = $first_key;       // store key into session variable                        $this->Inventory_Systems_Current_Id                                 = $first_key;       // store key into class variable                        $this->User_Default_Initialized                                     = true;             // stops this class from running again                                                                        // ----- inititalize the db connection query                        $system = $this->Inventory_Systems_Allowed[$first_key];                        $this->Db_Connect_String = array(                            'NAME' => $system['db_name'],                            'HOST' => $system['db_host'],                            'USER' => $system['db_user'],                            'PASS' => $system['db_pass'],                        );                        $this->Set_DbConnectionString();                                                                    }                }            //}                    }    }                    public function Set_DbConnectionString()    {        # FUNCTION :: Set the DB connection string in the class and as an encrypted session variable        global $ENCRYPT_QUERY_KEY;                        if (!$this->Db_Connect_String) {            echo "ERROR :: $this->Classname :: Set_DbConnectionString :: No Db_Connect_String";            exit();        }                // ----- get the connection string if we don't already have it        //if (!$this->Db_Connect_String) {        //         //}                // ----- store the connection string        $string_raw         = $this->Db_Connect_String;        $string_serialized  = serialize($string_raw);        $string_encrypted   = EncryptString($string_serialized, $ENCRYPT_QUERY_KEY);                $_SESSION[$this->Session_Name_Root][$this->Session_Name_Query] = $string_encrypted;                //$encrypted_string = $_SESSION[$this->Session_Name_Root][$this->Session_Name_Query];        //$this->Db_Connect_String = DecryptString(unserialize($encrypted_string), $ENCRYPT_QUERY_KEY);    }            public function Get_DbConnectionString()    {        # FUNCTION :: Return the actual DB connection. Do through function because its a private variable        global $ENCRYPT_QUERY_KEY;                        if (isset($_SESSION[$this->Session_Name_Root][$this->Session_Name_Query])) {            // ----- get the conenction string from encrypted query                        $string                 = $_SESSION[$this->Session_Name_Root][$this->Session_Name_Query];            $string_decrypted       = DecryptString($string, $ENCRYPT_QUERY_KEY);            $string_unserialized    = unserialize($string_decrypted);                        $this->Db_Connect_String = $string_unserialized;                    } else {            // ----- get the connection string from database            $this->Db_Connect_String = null;        }                        //$_SESSION[$this->Session_Name_Root][$this->Session_Name_Current]                return $this->Db_Connect_String;    }                            private function Get_UserInventorySystems()    {        # FUNCTION :: Get all the systems the user is allowed to access                global $USER;        $list_arr = array();        // initialize variable                        //if (Session('z')) {        //    echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%";        //    //$this->EchoVar('this->Inventory_Systems_Allowed', $this->Inventory_Systems_Allowed);        //}                        // ----- get the user's actual login record        $wh_id = $USER->Login_Record['wh_id'];        $record = $this->SQL->GetRecord(array(            'table' => 'contacts',            'keys'  => 'inventory_configuration_id',            'where' => "wh_id={$wh_id} AND active=1",        ));        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                if ($record['inventory_configuration_id']) {                        // ----- get the inventory systems            $inventory_system_ids = explode(',', $record['inventory_configuration_id']);                        // ----- convert them to database query            $where = '';            foreach ($inventory_system_ids as $id) {                $where .= "inventory_configuration_id={$id} OR ";            }            $where = substr($where, 0, -3); // trim off last "OR"            $where = "($where)";                        // ----- get a list of all the inventory systems            $records = $this->SQL->GetArrayAll('inventory_configuration', '*', "{$where} AND active=1", 'title DESC');            //$this->EchoQuery(true);                        // ----- process the inventory systems            if ($records) {                foreach ($records as $record) {                    $list_arr[$record['inventory_configuration_id']] = array(                        'title'     => $record['title'],                        'db_name'   => $record['db_name'],                        'db_host'   => $record['db_host'],                        'db_user'   => $record['db_user'],                        'db_pass'   => $record['db_pass'],                    );                }                unset($records);        // memory cleanup            }        }                        // ----- store the session variables to local class variables        $this->Inventory_Systems_Allowed      = $list_arr;                        //if (Session('z')) {        //    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@";        //    $this->EchoVar('this->Inventory_Systems_Allowed', $this->Inventory_Systems_Allowed);        //}    }        }  // -------------- END CLASS --------------