<?phpclass Inventory_InventoryProducts extends Inventory_InventoryBase{    public $Module_Offline              = false;            // (false) TRUE = dispaly offline message to users        public $Show_Query                  = false;            // (false) TRUE = display database queries used in this class    public $Group                       = '';    public $Table_Inventory_Products    = 'inventory_products';    public $Value_Instock               = 'IN STOCK';    public $Value_Backorder             = 'BACKORDER';        public $Barcode                     = '';    public $Retailer_Code               = '';    public $Add_Record_Link             = '';        public $Inventory_Assemblies_Id     = 0;        // will hold value    	public $Group_1_Select = array('Monitor', 'Access Point', 'Dock', 'SyncBox', 'Battery', 'Strap', 'Accessory', 'Cable', 'Other');	public $Group_2_Select = array('Complete', 'Assembly', 'Raw Part', 'Bad', 'Development', 'Other');	        // ----- FILE UPLOAD VARIABLES -----    private $Window_Width               = 820;                          // needs to be larger than Pipeline_Table_Width    private $Files_Width                = 800;                          // files area - width     private $Files_Font_Size            = 13;                           // files area - font size    private $Files_Font_Size_2          = 10;                           // files area - font size (file details)    private $Files_Area_Wrapper_Id      = "file_add_record_wrapper";    // files area - wrapper id    public $Existing_Files_Count        = 0;                            // will hold count of files uploaded    public $Files_Upload_Type           = 'product';                    // type of file being uploaded            // ----- FORM ARRAY VARIABLES    private $Show_Advanced_Details      = true;                         // (true) TRUE = turn on form array section    private $Show_Basic_Details         = true;                         // (true) TRUE = turn on form array section    private $Show_Price_Reference       = true;                         // (true) TRUE = turn on form array section    private $Show_EOC                   = false;                        // (false) TRUE = turn on form array section    private $Show_Files                 = true;                         // (true) TRUE = turn on form array section            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-26',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-07-15',            'Filename'      => $this->Classname,            'Version'       => '1.5.0',            'Description'   => 'Allows editing inventory',            'Update Log'    => array(                '2012-11-29_1.1'    => "Added AddScriptGetBarcode() and functionality for getting next unique barcode",                '2013-01-02_1.2'    => "Added show/hide toggle functionality to form divs",                '2013-02-26_1.3'    => "Modified to support new database fields",                '2013-03-02_1.3.1'  => "Added Default_List_Size variable and set to 1,000 records. Modified print_barcode stuff",				'2013-03-11_1.3.2'  => "Added field for 'group_1' and 'group_2' - new field in database",                '2013-03-18_1.3.3'  => "Javascript to allow TAB to select the first auto-complete option",                '2013-04-19_1.4'    => "Upgraded to support separate inventory database",                '2013-05-01_1.4.1'  => "Modified Field_Titles for what user can pick",                '2013-05-02_1.4.2'  => "Added field to support new sales order form",                '2013-06-13_1.4.3'  => "Changed default fields shown in table view",                '2013-07-15_1.5.0'  => "Upgraded to support file uploads",            ),        );                        $this->SetParameters(func_get_args());        $this->Barcode          = $this->GetParameter(0);        $this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        $this->Retailer_Code    = $this->GetParameter(2);                                // CREATE PECIAL SECTION FOR INVENTORY COUNTS        $locations_arr = array();        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_locations',            'keys'  => '*',            'where' => "active=1",        ));                if ($records) {            // section header            $locations_arr['INVENTORY COUNTS'] = '|';                        // All locations            $key    = "(SELECT (SUM(`qty_in`) - SUM(`qty_out`)) AS INVENTORY_PHYSICAL     FROM `inventory_counts`     WHERE `inventory_counts`.`barcode`=`inventory_products`.`barcode` AND `inventory_counts`.active=1) AS INVENTORY_PHYSICAL_ALL";            $value  = "Count (All Locations)";            $locations_arr[$key] = $value;                        // error location            $key    = "(SELECT (SUM(`qty_in`) - SUM(`qty_out`)) AS INVENTORY_PHYSICAL     FROM `inventory_counts`     WHERE `inventory_counts`.`barcode`=`inventory_products`.`barcode` AND `inventory_counts`.active=1 AND `inventory_counts`.inventory_locations_id=0) AS INVENTORY_PHYSICAL_0";            $value  = "Count (NO LOCATION)";            $locations_arr[$key] = $value;                        // additional locations            foreach ($records AS $record) {                $key    = "(SELECT (SUM(`qty_in`) - SUM(`qty_out`)) AS INVENTORY_PHYSICAL     FROM `inventory_counts`     WHERE `inventory_counts`.`barcode`=`inventory_products`.`barcode` AND `inventory_counts`.active=1 AND `inventory_counts`.inventory_locations_id={$record['inventory_locations_id']}) AS INVENTORY_PHYSICAL_{$record['inventory_locations_id']}";                $value  = "Count ({$record['location_name']})";                $locations_arr[$key] = $value;            }        }                                $this->Table            = 'inventory_products';        $this->Add_Submit_Name  = 'INVENTORY_PRODUCTS_SUBMIT_ADD';        $this->Edit_Submit_Name = 'INVENTORY_PRODUCTS_SUBMIT_EDIT';        $this->Index_Name       = 'inventory_products_id';        $this->Flash_Field      = 'inventory_products_id';        $this->Default_Where    = '';  // additional search conditions        $this->Default_Sort     = 'barcode';  // field for default table sort                $this->Field_Titles = array();                $temp_array = array(            'inventory_products.inventory_products_id'                  => 'Inventory Products Id',            'inventory_products.barcode'                                => 'Barcode',            'inventory_products.retailer_code'                          => 'Retailer Code',            'inventory_products.description'                            => 'Description',            'inventory_products.vendor'                                 => 'Preferred Vendor',            'inventory_products.manufacturer_code'                      => 'Preferred Vendor Code',        );        $this->Field_Titles = array_merge ($this->Field_Titles, $temp_array);           $this->Field_Titles = array_merge ($this->Field_Titles, $locations_arr);        // add ininventory locations                $temp_array = array(                    'GROUP DETAILS' => '|',            'inventory_products.type_class'                             => 'Type Class (A/B/C)',            'inventory_products.group_1'                                => 'Group 1',			'inventory_products.group_2'                                => 'Group 2',			'inventory_products.notes'                                  => 'Notes',                                    'SPECIAL DETAILS' => '|',            'inventory_products.status_show_salesorder_quickadd'        => 'Display Sales Order Quickadd',                        'inventory_products.status_retired'                         => 'Retired',            'inventory_products.reorder_point'                          => 'Reorder Point',            'inventory_products.date_last_checked'                      => 'Last Checked Date',            'inventory_products.status_use_assembly_pricing'            => 'Status Use Assembly Pricing',            'inventory_products.serialized'                             => 'Serialized',            'inventory_products.leadtime_days'                          => 'Leadtime (days)',            'inventory_products.part_cost'                              => 'Part Cost (default)',            'inventory_products.status_allow_zerocost'                  => 'Allow Zero Cost',                                    'inventory_products.active'                                 => 'Active',            'inventory_products.updated'                                => 'Updated',            'inventory_products.created'                                => 'Created',                                                #'inventory_products.status_hide_salesorder'                 => 'Status Hide From Salesorder',            #'inventory_products.status_backorder'                       => 'Status Backorder',                                    ###'inventory_products.active AS COGS'                         => 'COGS - Total Inventory',            ###'inventory_products.active AS SINGLE_COGS'                  => 'COGS - Single Item',            /*            '(inventory_products.part_cost *                 (SELECT (SUM(`qty_in`) - SUM(`qty_out`)) AS INVENTORY_PHYSICAL     FROM `inventory_counts`     WHERE `inventory_counts`.`barcode`=`inventory_products`.`barcode` AND `inventory_counts`.active=1)                ) AS QUICK_VALUE' => 'Quick Value',            */                                    						                        /*            'inventory_products.price_reference_source'                 => 'Reference Source',            'inventory_products.price_reference_number'                 => 'Reference Number',            'inventory_products.price_reference_date'                   => 'Reference Date',            'inventory_products.price_reference_url'                    => 'Reference URL',            'inventory_products.price_reference_price'                  => 'Reference Price',            'inventory_products.price_reference_quantity'               => 'Reference Quantity',            'inventory_products.price_reference_notes'                  => 'Reference Notes',            */                        /*            'inventory_products.eoq_annual_usage'                       => 'Annual Usage',            'inventory_products.eoq_holding_cost'                       => 'Holding Cost',            'inventory_products.eoq_order_cost'                         => 'Order Cost',            'inventory_products.eoq_quantity_price_breaks'              => 'Quantity Price Breaks',            */                                                                                                #"(SELECT SUM(`qty_in`) AS INV_CNT_IN                                FROM `inventory_counts`     WHERE `inventory_counts`.`barcode`=`inventory_products`.`barcode` AND `inventory_counts`.active=1) AS INV_CNT_IN"               => 'Inventory IN',            #"(SELECT SUM(`qty_out`) AS INV_CNT_OUT                              FROM `inventory_counts`     WHERE `inventory_counts`.`barcode`=`inventory_products`.`barcode` AND `inventory_counts`.active=1) AS INV_CNT_OUT"              => 'Inventory OUT',            #"(SELECT (SUM(`qty_hold`) - SUM(`qty_release`)) AS INV_CNT_HOLD     FROM `inventory_holds`      WHERE `inventory_holds`.`barcode`=`inventory_products`.`barcode` AND `inventory_holds`.active=1) AS INV_CNT_HOLD"               => 'Inventory HOLD',                        ###'inventory_products.active AS PRINT_LABEL'                  => 'Print Label',                        /*             "(                (SELECT SUM(`inventory_counts`.`qty_in`) - SUM(`inventory_counts`.`qty_out`) AS INVENTORY_TRUE_TMP_1 FROM `inventory_counts` WHERE `inventory_counts`.`barcode`=`inventory_products`.`barcode` AND `inventory_counts`.active=1) -                 (SELECT SUM(`qty_hold`) - SUM(`qty_release`) AS INVENTORY_ON_HOLD FROM `inventory_holds` WHERE `inventory_holds`.`barcode`=`inventory_products`.`barcode` AND `inventory_holds`.active=1)             ) AS INVENTORY_ON_SITE" => 'Inventory Available (Physical-Hold)',            */                   );        $this->Field_Titles = array_merge ($this->Field_Titles, $temp_array);                        $this->Join_Array = Array();        $this->Group_By         = "";        $this->Default_Fields   = 'barcode, retailer_code, description, type_class';        $this->Edit_Links_Count = 5;        $this->Unique_Fields    = 'barcode';                $this->Default_Values   = array(            'reorder_point'     => 0,            'status_backorder'  => 0,            'serialized'        => 0,            'barcode'           => $this->Barcode,            'retailer_code'     => $this->Retailer_Code,        );                $this->Use_Selection_Tab    = true;         // (TRUE) false = hide the search tab on the table        $this->Default_List_Size    = 100;         // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window            } // -------------- END __construct --------------    public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $this->ModuleOfflineMessage();  // show module offline essage - if activated                $this->AddScript();        $this->AddStyle();                        $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;                        case 'valuereport':                // ----- getting the VALUE calculation for this barcode                                // ----- Get the build record used for this assembly                $Obj_ValueHandler                           = new Inventory_Valuation_ValueHandler();               // instantitate value class                $Obj_ValueHandler->Barcode                  = $this->Barcode;                                       // pass in the barcode we want value for                $Obj_ValueHandler->Execute();                                                                       // execute the function to get value                $value_array                                = $Obj_ValueHandler->Value_Array;                       // store the value array for report processing                unset($Obj_ValueHandler);                                                                           // memory clean-up                                                // ----- Create a value report based on the calculated value of the build record                $Obj_ValueReport                            = new Inventory_Valuation_ValueSummaryReport();         // instatiate reporting class                $Obj_ValueReport->Barcode                   = $this->Barcode;                                       // set barcode we want report for                $Obj_ValueReport->Value_Array               = $value_array;                                         // set value arraw we want report for                $Obj_ValueReport->Execute();                                                                        // execute the function to make a report                $report                                     = $Obj_ValueReport->Report;                             // store the created report                unset($Obj_ValueReport);                                                                            // memory clean-up                                                // ----- echo out the report to the screen                echo $report;                            break;                        case 'inventoryreport':                AddStylesheet("/css/inventory.css??20121108-1");                $inventory_products_id  = $this->Barcode;                $this->Barcode          = $this->GetInventoryBarcodeFromID($inventory_products_id);                                                $CLASS_EXECUTE_LINK     = 'http://webmanager.whhub.com/office/class_execute';                                $id_next = $inventory_products_id + 1;                $id_prev = $inventory_products_id - 1;                                $eq_next            = EncryptQuery("class=Inventory_InventoryProducts;v1={$id_next};");                $link_next          = $CLASS_EXECUTE_LINK . '?eq=' . $eq_next . '&action=inventoryreport';                                $eq_prev            = EncryptQuery("class=Inventory_InventoryProducts;v1={$id_prev};");                $link_prev          = $CLASS_EXECUTE_LINK . '?eq=' . $eq_prev . '&action=inventoryreport';                                echo "                <div style='border-bottom:1px solid #ddd; margin-bottom:10px; padding-bottom:10px;'>                    <a href='{$link_prev}' >Prev</a>                    &nbsp;&nbsp; | &nbsp;&nbsp;                    <a href='{$link_next}' >Next</a>                </div>                ";                                if ($this->Barcode) {                                        if ($this->StatusInventoryItemExist($this->Barcode)) {                                            $date = Get('date');                                                echo "<br />";                        echo "<div style='color:#000; font-size:18px; font-weight:bold;'>INVENTORY REPORT</div>";                                                if ($date) {                            echo "<div style='color:blue; font-size:14px; font-weight:bold;'>Date Limit: {$date}</div>";                        }                                                echo "<br />";                        echo $this->GetInventoryInOutPriceReport($this->Barcode, $date);                                        } else {                        echo "<h1>INVENTORY ITEM NOT ACTIVE</h1>";                    }                                    } else {                    echo "<h1>BARCODE ERROR</h1>";                }            break;                        case 'error':            break;                        case 'list':            default:                // ----- display list of all items in the table                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                        $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                        // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                        switch ($action) {            case 'autocomplete_assembly_lookup':                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_assemblies',                    'keys'  => 'inventory_assemblies_id, assembly_name, barcode',                    'where' => "(assembly_name LIKE '%{$query}%' OR barcode LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $arr[] = array(                        'label'             => "{$record['assembly_name']} - {$record['barcode']}",                        'description'       => $record['assembly_name'],                        'id'                => $record['inventory_assemblies_id'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                        case 'backorder':                $result = $this->ProductBackorderStatusChange($QDATA['id'], 1);                $return = ($result) ? 1 : 0;            break;                        case 'instock':                $result = $this->ProductBackorderStatusChange($QDATA['id'], 0);                $return = ($result) ? 1 : 0;            break;                        case 'reverse':                $result = $this->ProductBackorderStatusReverse($QDATA['id']);                $return = $result;            break;                        case 'nextbarcode':                // get the next unique barcode in the system (starting with a 3)                                do {                    $count  = $this->SQL->Count('inventory_products', 'active=0 OR active=1');                                        $max_length     = 5;                    // how long should barcode be                    $lead           = 30000;                // what should first lead character be                    $value          = $count + 1;           // value of main part of number                    $count_length   = strlen($value);       // get number length                                        // ----- add middle gap 0's                    if ($count_length < $max_length) {                        $value = str_pad($value, ($max_length - 1), 0, STR_PAD_LEFT);                    }                                        // ----- tack on the leading number                    $value  = $lead + $value;               // form up the final number                    $lead   = $lead + 10000;                // increment lead number (for next loop)                                                            if ($lead > 9) {                        $return = "ERROR :: Max Inventory Count";                    }                                        // ----- verify its unique                    $unique = $this->SQL->IsUnique('inventory_products', 'barcode', $value);                                    } while (!$unique);                                $return = $value;                            break;                        case 'load_files':                $inventory_products_id  = Get('ipid');                $this->Barcode          = $this->GetInventoryBarcodeFromID($inventory_products_id);                $return                 = $this->LoadFilesArea(true);            break;                    }                echo $return;    }        public function ProductBackorderStatusReverse($ID)    {        $record = $this->SQL->GetRecord(array(            'table' => $this->Table_Inventory_Products,            'keys'  => "status_backorder",            'where' => "`inventory_products_id`=$ID AND `active`=1",        ));        $this->SQL->EchoQuery();                $newval = ($record['status_backorder'] == 0) ? 1 : 0;            $result = $this->SQL->UpdateRecord(array(            'table'         => $this->Table_Inventory_Products,            'key_values'    => "`status_backorder`=$newval",            'where'         => "`inventory_products_id`=$ID AND `active`=1",        ));        $this->SQL->EchoQuery();                $return_val = ($result) ? $newval : 666;                return $return_val;    }        public function ProductBackorderStatusChange($ID, $BACKORDER_VAL)    {        $result = $this->SQL->UpdateRecord(array(            'table'         => $this->Table_Inventory_Products,            'key_values'    => "`status_backorder`=$BACKORDER_VAL",            'where'         => "`inventory_products_id`=$ID AND `active`=1",        ));        if ($this->Show_Query) echo '<br /><br />' . $this->SQL->Db_Last_Query;        return $result;    }        public function AddStyle()    {        AddStyle("            .cell_error {                /*background-color:#990000;*/                color:#990000;            }        ");    }                public function AddScript()    {        global $CLASS_EXECUTE_LINK_AJAX;        $link       = $CLASS_EXECUTE_LINK_AJAX . "?class=Inventory_InventoryProducts";        $eq         = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                $SCRIPT = <<<SCRIPT            function tableBackorderClick(idx, value, eq, action)            {                var idbase      = 'TABLE_ROW_ID' + idx + '_';                var idbasecell  = 'TABLE_CELL_ID' + idx + '_';                var cell_bo     = '_STATUS_BACKORDER';                var cell_chg    = '_STATUS_CHANGE';                                var rowNumber = $('#' + idbase + value + ' td:first-child').html().replace('.', '');                $('#' + idbase + value +' td').css('background-color','#ff7');                                switch (action) {                    case 'instock':                        // MARK THIS ITEM AS IN STOCK                        $.get( '{$link};action=instock;eq=' + eq, '', function(data){                            switch (data) {                                case '0':                                    alert('Error: Unable to mark item as in stock');                                break;                                case '1':                                    $('#' + idbase + value +' td').fadeOut('slow', function() {                                        $('#' + idbasecell + value + cell_bo).html('').removeClass('cell_error');                                        $('#' + idbasecell + value + cell_chg).html('{$this->Value_Instock}');                                    }).fadeIn();                                break;                            }                        });                    break;                                        case 'backorder':                        // MARK THIS ITEM AS BACK ORDERED                        $.get( '{$link};action=backorder;eq=' + eq, '', function(data){                            switch (data) {                                case '0':                                    alert('Error: Unable to mark item as backordered');                                break;                                case '1':                                    $('#' + idbase + value +' td').fadeOut('slow', function() {                                        $('#' + idbasecell + value + cell_bo).html('YES').addClass('cell_error');                                        $('#' + idbasecell + value + cell_chg).html('{$this->Value_Backorder}');                                    }).fadeIn();                                break;                            }                        });                    break;                                        case 'reverse':                        // REVERSE STATUS OF THIS ITEM                                                $('#' + idbase + value +' td').css('background-color','#ff7');                                                $.get( '{$link};action=reverse;eq=' + eq, '', function(data){                            switch (data) {                                case '666':                                    alert('Error: Unable to mark item as backordered');                                break;                                case '1':                                    // product IS on backorder                                    $('#' + idbase + value +' td').fadeOut('slow', function() {                                        $('#' + idbasecell + value + cell_bo).html('YES').addClass('cell_error');                                        $('#' + idbasecell + value + cell_chg + ' a').text('{$this->Value_Instock}');                                    }).fadeIn();                                break;                                case '0':                                    // product is NOT backordered                                    $('#' + idbase + value +' td').fadeOut('slow', function() {                                        $('#' + idbasecell + value + cell_bo).html('').removeClass('cell_error');                                        $('#' + idbasecell + value + cell_chg + ' a').text('{$this->Value_Backorder}');                                    }).fadeIn();                                break;                            }                        });                    break;                }                                //$('#' + idbase + value +' td').css('background-color','');                return false;            }                        function tableEditClick(idx, value, eq, title)            {                var idbase = 'TABLE_ROW_ID' + idx + '_';                $('#' + idbase + value +' td').css('background-color','#ff7');                top.parent.appformCreate('Edit Record - ' + title, '/office/edit_record;eq=' + eq, defaultAppId);                return false;            }            function tableAddClick(eq, title)            {                top.parent.appformCreate('Add Record-' + title, '/office/add_record;eq=' + eq, defaultAppId);                return false;            }SCRIPT;        AddScript($SCRIPT);    }        public function AddScriptGetBarcode()    {        $CLASS_EXECUTE_LINK_AJAX    = '/office/AJAX/class_execute';        $eq                         = EncryptQuery("class=Inventory_InventoryProducts;");        $link                       = $CLASS_EXECUTE_LINK_AJAX . '?eq=' . $eq;                $script = <<<SCRIPT            function getUniqueBarcode(returnID)            {                // CALL THIS CLASS VIA AJAX TO GET BARCODE                $.get( '{$link};action=nextbarcode', '', function(data){                    $('#' + returnID).val(data);                });            }SCRIPT;        AddScript($script);    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE OF ALL RECORDS ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {                        case 'INVENTORY_PHYSICAL':            case 'INVENTORY_TOTAL':                $value      = ($value == '' || $value == 0) ? "0" : $value;            break;                        case 'COGS':                $barcode    = $this->GetInventoryBarcodeFromID($id);                $cogs       = $this->CalculateInventoryValue($barcode);                                $CLASS_EXECUTE_LINK     = '/office/class_execute';                $eq3                    = EncryptQuery("class=Inventory_InventoryProducts;v1={$id};");                $link3                  = $CLASS_EXECUTE_LINK . '?eq=' . $eq3 . '&action=inventoryreport';                $script3                = "top.parent.appformCreate('Window', '{$link3}', 'apps'); return false;";                $report                 = "<a href='#' class='row_viewline' title='COGS Report'   onclick=\"{$script3}; return false;\">?</a>";                                $value = "                    <table width='100%'>                    <tr><td width='100%'>{$cogs}</td><td>{$report}</td></tr>                    </table>                ";            break;                                    case 'part_cost':            case 'QUICK_VALUE':                $value      = money_format("%n", $value);            break;                        case 'status_retired':                $value          = ($value == 1) ? 'retired' : '';                //$td_options     = ($value == 1) ? " bgcolor='red' " : '';                            break;                        case 'status_use_assembly_pricing':                $value          = ($value == 1) ? 'YES' : '';            break;                        case 'SINGLE_COGS':                $barcode    = $this->GetInventoryBarcodeFromID($id);                $cogs       = $this->InventoryItemLastCost($barcode);                $value      = money_format("%n", $cogs);            break;                        default:                                $CLASS_EXECUTE_LINK     = '/office/class_execute';                                                // ----- create print link                 $barcode                = $this->GetInventoryBarcodeFromID($id);                $sku                    = $this->GetInventoryItemRetailerCodeFromBarcode($barcode);                $description            = $this->GetInventoryItemDescriptionFromBarcode($barcode);                $eq_print               = EncryptQuery("class=Dymo_PrintInventoryLabel;v1={$barcode};v2={$sku};v3={$description};");                $link_print             = $CLASS_EXECUTE_LINK . '?eq=' . $eq_print . '&action=';                $script_print           = "top.parent.appformCreate('Window', '{$link_print}', 'apps'); return false;";                                                // ----- create value report link                $eq_value               = EncryptQuery("class={$this->Classname};v1={$barcode};");                $link_value             = $CLASS_EXECUTE_LINK . '?eq=' . $eq_value . '&action=valuereport';                $script_value           = "top.parent.appformCreate('Window', '{$link_value}', 'apps'); return false;";                                // ----- output the action buttons                $col_view   = ($this->Flags['view'] == 'false')   ? ''    : "<a href=`#` class=`row_view`         title=`View`            onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_edit   = ($this->Flags['edit'] == 'false')   ? ''    : "<a href=`#` class=`row_edit`         title=`Edit`            onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_delete = ($this->Flags['delete'] == 'false') ? ''    : "<a href=`#` class=`row_delete`       title=`Delete`          onclick=`tableDeleteClick('@IDX@','@VALUE@','@EQ@'); return false; `></a>";                $col_value  = ($this->Flags['value'] == 'false')  ? ''    : "<a href=`#` class=`row_dollarsign`   title=`Value Report`    onclick=`{$script_value}; return false;`></a>";                $col_print  = ($this->Flags['print'] == 'false')  ? ''    : "<a href=`#` class=`row_print`        title=`Print Label`     onclick=`{$script_print}; return false;`></a>";                                $this->Edit_Links = qqn("                    <td align=`center`>{$col_view}</td>                    <td align=`center`>{$col_edit}</td>                    <td align=`center`>{$col_delete}</td>                    <td align=`center`>{$col_value}</td>                    <td align=`center`>{$col_print}</td>                    ");            break;        }    }                private function JavascriptCreateTable()    {        $this->ScriptJSONTableGeneric();                                    // Add in the generic code held in the BaseClass        $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_10').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=autocomplete_assembly_lookup',                minChars        : 0,    // how many characters tot ype before starting function call                selectFirst     : true,     // allows tab to select the top option in returned values                autoFocus       : true,                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_10" ).val( ui.item.label );                    $( "#FORM_inventory_assemblies_id" ).val( ui.item.id );                 // store Barcode                                        return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "<br>"  + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        public function SetFormArrays()    {        // ----- required CSS file        //AddStylesheet("/css/inventory.css");                                // ----- fill in the assembly information        $this->Inventory_Assemblies_Id          = (Post('FORM_inventory_assemblies_id')) ? $_POST['FORM_inventory_assemblies_id'] : 0;        $assembly_details                       = $this->GetAssemblyDetails($this->Inventory_Assemblies_Id);        $assembly_display                       = ($this->Inventory_Assemblies_Id) ? "display:none;" : '';                        // ----- required javascript functions        $this->JavascriptDatepickerFunctionality(array('FORM_price_reference_date'));       // date-picker functionality        $this->JavascriptToggleFunctionality();                                             // toggling show/hide a div area        $this->AddScriptGetBarcode();                                                       // Add javascript for getting unique barcode        $this->JavascriptCreateTable();             // Javascript for creating table from array of data                        // ----- create lists from existing database fields        $vendors                = $this->SQL->GetFieldValues($this->Table, 'vendor', "vendor != ''");        $categories             = $this->SQL->GetFieldValues($this->Table, 'report_category', "report_category != ''");        $vendor_list            = Form_ArrayToList($vendors);        $report_category_list   = Form_ArrayToList($categories);		$group_1_list 			= Form_ArrayToList($this->Group_1_Select);        $group_2_list 			= Form_ArrayToList($this->Group_2_Select);		                // ----- create some needed lists        $class_list         = "A=A (High value - Strict control)|B=B (Medium value - Medium control)|C=C (Low value - Low control)";        $info               = ($this->Barcode) ? "<div style='border:1px solid #990000; padding:10px; font-size:14px;'>Item has been added. Now enter its inventory details.</div>" : '';                        // ----- create buttons        $onclick 	        = "window.location='{$this->Add_Record_Link}'";        $id 		        = 'btn_cancel';        $name 		        = 'btn_cancel';        $btn_cancel         = MakeButton('negative', 'CANCEL', '', '', $id, $onclick, 'button', $name);                $onclick 	        = "getUniqueBarcode('FORM_barcode')";        $id 		        = 'btn_barcode';        $name 		        = 'btn_barcode';        $btn_barcode        = MakeButton('positive', 'Get Next Barcode', '', '', $id, $onclick, 'button', $name);                		$OBJ_Help   = new Help_HelpInstructions();        $help1      = $OBJ_Help->ShowHelpIndicator(1);                                                                                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|{$info}<br />",            #"code|{$this->Add_Record_Link}<br />",        );                if ($this->Show_Basic_Details) {            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                "code|<div class='form_section_header'>BASIC DETAILS {$help1}</div>",                'text|Barcode|barcode|Y|20|255',                "info||$btn_barcode",                'text|Retailer Code|retailer_code|Y|60|255',                            'text|Part Cost (Default)|part_cost|Y|11|11',                'code|<br /><br />',                                                "code|<div class='shadow' style='border:1px dashed blue; padding:5px; background-color:#efefef;'>",                    'checkbox|Use Assembly Pricing|status_use_assembly_pricing||1|0',                    #"code|<div style='{$assembly_display}'>",                        "text|Search|temp_10|N|60|100",                        "code|<div style='_display:none;'>",                        "text|Assembly ID|inventory_assemblies_id|n|60|100",                        "code|</div>",                    #"code|</div>",                    "code|{$assembly_details}",                "code|</div>",                "code|<br /><br />",                                            "selecttext|Preferred Vendor|vendor|N|40|80||$vendor_list",                'text|Preferred Vendor Code|manufacturer_code|N|60|255',                'code|<br /><br />',                                'textarea|Description|description|N|30|2',            'code|</div>',            'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        if ($this->Show_Advanced_Details) {            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">ADVANCED DETAILS <a class="toggle" href="#" id="menu_group_advanceddetail"><span class="updown">&nbsp;</span></a></div>',                'code|<div class="menu_group" style="display:none;" id="div_menu_group_advanceddetail">',                                                        //    "code|<div class='shadow' style='border:3px solid orange; padding:5px; background-color:#efefef;'>",                "select|Group 1|group_1|N||{$group_1_list}",                "select|Group 2|group_2|N||{$group_2_list}",                "select|Inventory Class|type_class|N||{$class_list}",                //"code|</div>",                                        "info|Class|                    <b>A Class Items</b> Comprise 20% of SKU & Contribute to 80% of \$ spend.<br />                    High control = Exact counts, exact orders, early ordering<br />                    <b>B Class Items</b> Comprise 30% of SKU & Contribute to 15% of \$ spend.<br />                    Medium control = +/- 10% counts, bulk orders<br />                    <b>C Class Items</b> Comprise 50% of SKU & Contribute to 5% of \$ spend.<br />                    Low control = +/- 20% counts, bulk orders",                                                            'text|Reorder Point|reorder_point|N|11|11',                    'text|Leadtime (business days)|leadtime_days|N|11|11',                                        'checkbox|Allow $0 Cost|status_allow_zerocost||1|0',                    'checkbox|Serialized|serialized||1|0',                                        'checkbox|Sales Order Quickadd|status_show_salesorder_quickadd||1|0',                    'text|Quickadd Title|salesorder_quickadd_title|N|60|255',                                        'checkbox|Hide From Salesorder|status_hide_salesorder||1|0',                    'checkbox|Status Backorder|status_backorder||1|0',                    'checkbox|Retired|status_retired||1|0',                    'code|<br /><br />',                                        "selecttext|Report Category|report_category|N|40|80||$report_category_list",                    'textarea|Notes|notes|N|30|4',                    'text|Date Last Inventory Check|date_last_checked|N|20|50',                'code|</div>',            'code|</div>',            'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        if ($this->Show_Price_Reference) {            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">PRICE REFERENCE <a class="toggle" href="#" id="menu_group_pricereference"><span class="updown">&nbsp;</span></a></div>',                'code|<div class="menu_group" style="display:none;" id="div_menu_group_pricereference">',                    'text|Reference Source Date|price_reference_date|N|20|255',                    'text|Reference Price|price_reference_price|N|20|255',                    'text|Reference Quantity|price_reference_quantity|N|20|255',                    'text|Reference Source Type|price_reference_source|N|60|255',                    'text|Reference Source Number|price_reference_number|N|60|255',                    'textarea|Reference Source URL|price_reference_url|N|30|2',                    'textarea|Reference Notes|price_reference_notes|N|30|2',                'code|</div>',            'code|</div>',            'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        if ($this->Show_EOC) {            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">ECONOMIC ORDER QUANTITY <a class="toggle" href="#" id="menu_group_eoq"><span class="updown">&nbsp;</span></a></div>',                'code|<div class="menu_group" style="display:none;" id="div_menu_group_eoq">',                    'text|Annual Usage|eoq_annual_usage|N|20|255',                    'text|Holding Cost|eoq_holding_cost|N|20|255',                    'text|Order Cost|eoq_order_cost|N|20|255',                    'textarea|Quantity Price Breaks|eoq_quantity_price_breaks|N|30|2',                'code|</div>',            'code|</div>',            'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        if ($this->Show_Files) {            // ----- GET FILES FOR SALES ORDER (ONLY IF EDITING)            if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                $this->Barcode      = Post('FORM_barcode');                $files_area_upload  = ($this->Show_Files) ? $this->LoadFilesUploadArea() : '';           // get files for sales order                $files_area         = ($this->Show_Files) ? $this->LoadFilesArea() : '';           // get files for sales order            } else {                // don't load notes area if we're submitting an add/edit record                $files_area_upload  = "";                $files_area         = "<div style='color:red;'>UNABLE TO ADD FILES. CAN ONLY ADD FILES WHEN EDITING AN EXISTING RECORD</div>";            }                        // ----- ADD SCRIPTS            $this->AddScript_FileUpload();                        // ----- ADD FORM ARRAY            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">FILES ('.$this->Existing_Files_Count.') <a class="toggle" href="#" id="menu_group_files"><span class="updown">&nbsp;</span></a></div>',                'code|<div class="menu_group" style="display:none;" id="div_menu_group_files">',                                        "code|{$files_area_upload}",                                        "code|<div style='padding:10px;' id='{$this->Files_Area_Wrapper_Id}'>",                    "code|{$files_area}",                    "code|</div>",                                    'code|</div>',            'code|</div>',            "code|<div style='width:{$this->Window_Width}px; border:0px solid blue;'>&nbsp;</div>",            );            $base_array = array_merge ($base_array, $temp_array);                    }                if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            #$base_array[] = "info||$btn_cancel";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            #$base_array[] = "info||$btn_cancel";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        $field_kickout_string   = 'temp_';                // ----- remove any temp fields from the array so they don't get processed        foreach ($FormArray as $field => $value) {            echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                return $FormArray;    }        public function GetArray($table, $keys='', $where='', $order='', $start_list='', $list_size='', $joins='', $get_count=true)    {        if (is_array($table)) extract($table, EXTR_OVERWRITE);        // joins need to be provide in full SQL        if ($keys == '') {            return '';        }        $start_list = intOnly($start_list);        $list_size  = intOnly($list_size);        if (empty($order) or ($order == 'none')) {            $order = '';        } else {            $order = "ORDER BY $order";        }        if (!empty($where)) {            $where = "WHERE $where";        }        $table = $this->QuoteTables($table);        // --------- get row count ---------        if ($get_count) {            $query = "SELECT COUNT(*) FROM $table $joins $where";            $query_result = $this->Query('GetArray Count', $query, PDO::FETCH_NUM);            if ($query_result) {                $this->Number_Rows = $query_result->fetchColumn();                $query_result->closeCursor();                $query_result = null;                if ($start_list < 0) $start_list = $this->Number_Rows + $start_list;  // gets last rows (-100, would get last 100 rows)            } else {                $this->Number_Rows = 0;            }        } else {            $this->Number_Rows = 0;        }        if ((empty($start_list)) and (empty($list_size))) {            $LIMIT = '';        } else {            $LIMIT = "LIMIT $start_list, $list_size";        }        $query = "SELECT $keys FROM $table $joins $where $this->Group $order $LIMIT";        $query_result  = $this->Query('GetArray', $query);        $RESULT = array();        if ($query_result) {            $RESULT = $query_result->fetchAll();            $query_result->closeCursor();        }        return $RESULT;    }        private function GetAssemblyDetails($ASSEMBLY_ID)    {        $assembly_details = "";                if ($ASSEMBLY_ID) {                        $record = $this->SQL->GetRecord(array(                'table' => 'inventory_assemblies',                'keys'  => 'assembly_name, inventory_assemblies.barcode, inventory_products.description, inventory_products.retailer_code',                'where' => "`inventory_assemblies`.`inventory_assemblies_id`='{$ASSEMBLY_ID}'",                'joins' => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_assemblies`.`barcode`"            ));            $this->EchoQuery();                        if ($record) {                //$cogs = $this->CalculateAssemblyValue($ASSEMBLY_ID);                $cogs = 'n/a';                $assembly_details = "                    <div style='background-color:#fff; padding:5px; font-size:14px;'>ASSEMBLY DETAILS</div>                    <div style='padding:5px; font-size:12px;'>                        <b>APDM SKU:</b> {$record['retailer_code']}<br />                        <b>Barcode:</b> {$record['barcode']}<br />                        <b>Description:</b> {$record['description']}<br />                        <b>COGS:</b> {$cogs}                    </div>                    ";                                    $_POST['FORM_temp_10']           = "{$record['assembly_name']} - {$record['barcode']}";            } else {                echo "ERROR :: UNABLE TO LOAD ASSEMBLY";                exit();            }                    }                return $assembly_details;    }                        public function ViewRecord($id, $field_list='', $field='')    {        # FUNCTION :: function to view a record                        // ----- get original record from database -----        $record = $this->SQL->GetRecord(array(            'table' => $this->Table,            'keys'  => "*",            'where' => "{$this->Index_Name}={$id}",        ));        $this->EchoQuery();                        // ----- add styles -----        AddStylesheet("/css/inventory.css");        AddStyle("            .vr_header {                font-size:          22px;                font-weight:        bold;                color:              #003399;            }            .vr_header_barcode {                font-size:          16px;                font-weight:        bold;                color:              #003399;            }                        .vr_table td:first-child {                font-weight:        bold;                text-align:         right;            }                        .vr_assy_table {                border:             1px solid blue;                border-collapse:    collapse;                            }            .vr_assy_table th {                border:             1px solid black;                font-weight:        bold;                background-color:   #C2D1F0;                padding:            3px;            }            .vr_assy_table td {                border:             1px solid black;                padding:            3px;            }        ");                        // ----- format the various output areas -----        $default_cost       = money_format("%n", $record['part_cost']);        $assembly           = '';                        // ----- get the assembly details -----        $Obj_Explode    = new Inventory_AssemblyExplode();        $is_assembly    = $Obj_Explode->CheckIfSubAssembly($record['barcode']);                $cogs = '<span style="color:red;">Not Calculated</span>';        /*        if (!$is_assembly) {            $Obj_COGS               = new Inventory_Valuation_SingleItemCostCalculation();            $Obj_COGS->Barcode      = $record['barcode'];            $Obj_COGS->Method       = 'total_average';            $Obj_COGS->Execute();            $cost_each              = $Obj_COGS->Price_Calculated_Each;            $cogs                   = money_format("%n", $cost_each);        }        */                if ($is_assembly) {            // ----- get the BOM for this assembly            $Obj_Explode->Barcode = $record['barcode'];            $Obj_Explode->Execute();                                    # ========== Inventory_InventoryAssemblyCalculateValue ==========            // ----- over-ride the stored default cost - cause this is an assembly            #$Obj_COGS               = new Inventory_InventoryAssemblyCalculateValue();            #$Obj_COGS->Barcode      = $record['barcode'];            #$cogs_total             = $Obj_COGS->Execute();            #$cogs_arr               = $Obj_COGS->Cogs_Array;            #$cogs_next              = $cogs_arr[0]['cogs_total'];            #$default_cost           = "<span style='font-size:14px;'>(see ASSEMBLY DETAILS)</span>"; //money_format("%n", $cogs_next);                                    $Obj_COGS               = new Inventory_Valuation_SingleItemCostCalculation();            $Obj_COGS->Barcode      = $record['barcode'];            $Obj_COGS->Method       = 'total_average';            $Obj_COGS->Execute();            $cost_each              = $Obj_COGS->Price_Calculated_Each;            $default_cost           = "<span style='font-size:14px;'>(see ASSEMBLY DETAILS) ===> {$cost_each}</span>"; //money_format("%n", $cogs_next);                                    $cogs_total = 0;;            $table_rows = '';            foreach ($Obj_Explode->BOM as $barcode => $quantity) {                $sku                = $this->GetInventoryItemRetailerCodeFromBarcode($barcode);                //$cogs               = 1.11;                //$cogs               = $this->InventoryItemLastCost($barcode);                $cogs = 0;                                $total              = ($quantity * $cogs);                $cogs_formatted     = money_format("%n", $cogs);                $total_formatted    = money_format("%n", $total);                $cogs_total        += $total;                                                $table_rows .= "<tr><td>{$barcode}</td><td>{$sku}</td><td align='center'>{$quantity}</td><td align='center'>{$cogs_formatted}</td><td align='center'>{$total_formatted}</td></tr>";                //$table_rows .= "<tr><td>{$barcode}</td><td>{$sku}</td><td align='center'>{$quantity}</td></tr>";            }                        $cogs_total = money_format("%n", $cogs_total);            $assy_table = "                <table class='vr_assy_table' width='100%'>                <tr><th>BARCODE</th><th>SKU</th><th>QTY</th><th>COGS</th><th>TOTAL</th></tr>                {$table_rows}                <tr><th colspan='4' align='right'>TOTAL:</th><th>{$cogs_total}</th></tr>                </table>";                                //<tr><th>BARCODE</th><th>SKU</th><th>QTY</th></tr>                //<tr><th>BARCODE</th><th>SKU</th><th>QTY</th><th>COGS</th><th>TOTAL</th></tr>                //<tr><th colspan='4' align='right'>TOTAL:</th><th>{$cogs_total}</th></tr>                            $assembly = "                <div class='shadow form_section_wrapper'>                    <div class='form_section_header'>ASSEMBLY DETAILS (ID: {$record['inventory_assemblies_id']})</div>                    <br />                    <div>{$assy_table}</div>                </div>                <br /><br />";                        }                        $vendor = "        <div class='shadow form_section_wrapper'>            <div class='form_section_header'>VENDOR DETAILS</div>            <table class='vr_table'>                <tr><td>Preferred Vendor:</td><td>{$record['vendor']}</td></tr>                <tr><td>Manufacturer Code:</td><td>{$record['manufacturer_code']}</td></tr>            </table>        </div>        <br /><br />";        $vendor = ($record['vendor'] || $record['manufacturer_code']) ? $vendor : '';                        $price_reference = "            <div class='shadow form_section_wrapper'>            <div class='form_section_header'>DEFAULT PRICE REFERENCE</div>                <table class='vr_table'>                <tr><td>Reference Source Date:</td><td>{$record['price_reference_date']}</td></tr>                <tr><td>Reference Price:</td><td>{$record['price_reference_price']}</td></tr>                <tr><td>Reference Quantity:</td><td>{$record['price_reference_quantity']}</td></tr>                <tr><td>Reference Source:</td><td>{$record['price_reference_source']}</td></tr>                <tr><td>Reference Source Number:</td><td>{$record['price_reference_number']}</td></tr>                <tr><td>Reference Source URL:</td><td>{$record['price_reference_url']}</td></tr>                <tr><td>Reference Notes:</td><td>{$record['price_reference_notes']}</td></tr>                </table>            </div>            <br /><br />";                        $general = "            <div class='shadow form_section_wrapper'>                <div class='form_section_header'>GENERAL INFORMATION</div>                <table class='vr_table'>                    <tr><td>Description:</td><td>{$record['description']}</td></tr>                    <tr><td>Notes:</td><td>{$record['notes']}</td></tr>                    <tr><td>Reorder Point:</td><td>{$record['reorder_point']}</td></tr>                    <tr><td>Leadtime:</td><td>{$record['leadtime_days']}</td></tr>                    <tr><td>Last Inventory Check:</td><td>{$record['date_last_checked']}</td></tr>                </table>            </div>            <br /><br />";                                            // ----- output the content -----        $output = "            <div class='vr_header'>{$record['retailer_code']}</div>            <div class='vr_header_barcode'>{$record['barcode']}</div>            <br /><br />            <div class='vr_header'>COGS: {$cogs}</div>            <div class='__vr_header_barcode'>Default Cost: {$default_cost}</div>            <br /><br />                        {$general}            {$vendor}            {$assembly}            {$price_reference}            ";        echo $output;            }                    // ==================== UPLOAD FILES ====================        private function LoadFilesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the previously uploaded files area                $bypass_adding_script = false;                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                if (!$this->Barcode) {            $error = "Missing Barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output                                 = "";                                                                           // initialize variable                $Obj_Files                              = new Inventory_Uploadify_UploadedFiles();                                      // instantiate class        $Obj_Files->UID                         = $this->Barcode;                                                               // set barcode to get files for        $Obj_Files->Upload_Type                 = $this->Files_Upload_Type;                                                     // set file type        $Obj_Files->Table_Width                 = $this->Files_Width;                                                           // set variable        $Obj_Files->Files_Font_Size             = $this->Files_Font_Size;                                                       // set variable        $Obj_Files->Files_Font_Size_2           = $this->Files_Font_Size_2;                                                     // set variable                $output                                .= "</br>";        $output                                .= $Obj_Files->ViewAllRecordsFromFolderWithDatabaseCrosscheck(true);             // get the existing records        $Obj_Files->AddScript();        $this->Existing_Files_Count             = $Obj_Files->Existing_Files_Count;                                             // get count of existing files                return $output;                                                                                                         // return the output    }        private function LoadFilesUploadArea()    {        // FUNCTION :: Load the 'upload a new file' area                if (!$this->Barcode) {            $error = "Missing Barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output = '';        $Obj_Files_Upload                       = new Inventory_Uploadify_UploadFile($this->Files_Upload_Type, $this->Barcode);            // instantiate class        $Obj_Files_Upload->AddStyle();                                                                                      // add needed styles or stylesheet        $Obj_Files_Upload->AddScript();                                                                                     // add needed scripts        $output                                .= $Obj_Files_Upload->AddRecordText();                                       // display ability to add a new file                return $output;    }        public function AddScript_FileUpload()    {        # FUNCTION :: Script needed for File Uploading                $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)        AddScript("            function LoadFilesArea() {                // ----- FUNTION :: Load the files for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_files;ipid={$this->Edit_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Files_Area_Wrapper_Id}').html(data);                });            }        ");    }        }  // -------------- END CLASS --------------