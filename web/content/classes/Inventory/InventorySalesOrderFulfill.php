<?phpclass Inventory_InventorySalesOrderFulfill extends Inventory_InventoryBase{    public $Show_Query                      = false;            // (false) TRUE = display database queries    public $Module_Offline                  = false;            // (false) TRUE = display offline message to users    public $Record_ID                       = 0;    public $SO_Number                       = 0;    public $Inventory_Sales_Orders_Id       = 0;    public $Default_Locations_ID            = 0;        	    // ----- AUTOTABLE VARIABLES -----    private $Table_Header_Row               = "ID|Barcode|Description|Status|QTY<br />Ordered|Price Ea|Price Total|QTY<br />Previously<br />Sent|QTY<br />Remaining|QTY<br />Sent|Price<br />Total|Send<br />Remaining|QTY<br />In Stock";    private $Table_Holder_DIV               = "autotable_holder";               // defines hidden textarea that will hold the text array    private $Table_Display_DIV              = "autotable_table_display";        // defines the div that wraps the created table    private $Table_Delimiter                = '|';        public $Show_Previous_Fulfilled         = true;     // (true) TRUE = show the inventory previously sent on this SO    public $UID                             = 0;            // ----- FORM ARRAY VARIABLES    private $Show_Notes                     = true;                         // (true) TRUE = turn on form array section            // ----- NOTES VARIABLES -----    private $Existing_Notes_Count           = 0;                            // will hold the number of notes for this sales order    private $Notes_Width                    = 800;                          // notes area - width     private $Notes_Font_Size                = 14;                           // notes area - font size    private $Note_Area_Wrapper_Id           = "note_add_record_wrapper";    // notes area - wrapper id                public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database        		$this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-14',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-08-17',            'Filename'      => $this->Classname,            'Version'       => '1.5.0',            'Description'   => 'Fulfill by sending out an existing sales order - supports partial sends',            'Update Log'    => array(                '2012-11-14_1.0.0'  => "Module Created",                '2013-01-04_1.1.0'  => "Added qty available information when fulfilling and moved Header_Text to global variable",                '2013-01-07_1.2.0'  => "Added 'return false;' to ConvertRecordInfoToArray() function so JS wouldn't jump to top of page",				'2013-03-13_1.3.0'	=> "Modified to support database change - track by id not SO#",                '2013-08-09_1.4.0'  => "Better post processing",                '2013-08-17_1.5.0'  => "Upgrade to show notes section",            ),        );                $this->SetParameters(func_get_args());        $this->Record_ID         = $this->GetParameter(0);        $this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        #$this->Retailer_Code    = $this->GetParameter(2);                $this->Table            = 'inventory_sales_orders';        $this->Index_Name       = 'inventory_sales_orders_id';                $this->Default_Where    = '';               // additional search conditions        $this->Default_Sort     = 'so_number';      // field for default table sort                $this->Add_Submit_Name  = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field      = $this->Index_Name;                $this->Field_Titles = array(            "{$this->Table}.inventory_sales_orders_id"           => 'Inventory Sales Orders Id',            "{$this->Table}.so_number"                              => 'SO Number',            "{$this->Table}.ref_document_url"                       => 'Ref URL',            "{$this->Table}.ref_document_number"                    => 'Ref Number',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.status"                                 => 'Status',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                        $this->Join_Array = Array(            'inventory_counts'  => "LEFT OUTER JOIN `inventory_sales_order_lines` ON `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number`",        );        $this->Default_Fields   = 'so_number, date, status, EST_LINE_ITEM_COST, cost_shipping, cost_other';        $this->Unique_Fields    = 'so_number';                        $this->Add_Link         = '';       // don't allow adding a record                $this->Default_Values   = array(            'status'                    => 'open',            'date'                      => date('Y-m-d'),            'inventory_sales_orders_id' => $this->Record_ID,                );                $this->Close_On_Success = true;            } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                        switch (Get('action')) {            case 'forceship':                echo "<h1>forceship</h1>";                $this->Inventory_Sales_Orders_Id = $this->Record_ID;                        // store the record ID                $this->ForceShip();            break;                        default:                                // Call the AddRecord to get a form onto the screen                // Convert the Record_Id into the barcode                // Pull the entire order info from the barcode                // Convert the order to a table for display                                $this->ModuleOfflineMessage();                                              // show module offline essage - if activated                $this->JavascriptSendRemainingInventory();                                  // javascript to send inventory                                $this->Inventory_Sales_Orders_Id = $this->Record_ID;                        // store the record ID                $this->AddRecord();                                                         // add record form array onto screen                                $record     = $this->GetOrderLines($this->Inventory_Sales_Orders_Id);       // get record details about this order                $content    = $this->ConvertRecordInfoToArray($record);                     // convert the record details to order lines table                $this->ScriptJSONTableGeneric();                                            // Add in the generic code held in the BaseClass                $this->MoveArrayIntoForm($content);                                                $so_record          = $this->GetSalesOrderInformation($this->Inventory_Sales_Orders_Id);                $this->SO_Number    = $so_record['so_number'];                $this->UID          = $so_record['universal_id'];                                                        //$('#FORM_so_number').val('{$this->SO_Number}');                                    AddScriptOnReady("                    $('#temp_uid').html('{$this->UID}');                                        $('#FORM_Inventory_Sales_Orders_Id').val('{$this->Inventory_Sales_Orders_Id}');                    $('#temp_Inventory_Sales_Orders_Id').html('{$this->Inventory_Sales_Orders_Id}');                    $('#temp_header_id').html('(ID: {$this->Inventory_Sales_Orders_Id})');                         // ID number at top of page                ");                                // ----- add the jQuery UI datepicker functionality                AddScriptOnReady('$("#FORM_date").datepicker({dateFormat: "yy-mm-dd"});');            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => ' inventory_products',                    'keys'  => 'description, retailer_code, barcode',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $arr[] = array(                        'label'             => "{$record['barcode']} - {$record['retailer_code']}",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                        case 'load_notes':                $this->Inventory_Sales_Orders_Id = Get('soid');                $return = $this->LoadNotesArea(true);            break;        }                echo $return;    }            public function GetSalesOrderInformation($ID)    {        $output = 0;        if ($ID) {            // ===== Get the PO details from the passed in Record_Id            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_sales_orders',                'keys'  => '*',                'where' => "`inventory_sales_orders_id`='{$ID}' AND active=1",            ));            $this->EchoQuery();            $output = $record;        }                return $output;    }        public function GetOrderLines($ID)    {        $temp_array = array();                if ($ID) {            $record_lines = $this->SQL->GetArrayAll(array(                'table' => 'inventory_sales_order_lines',                'keys'  => 'inventory_sales_order_lines.*, inventory_products.description, inventory_products.manufacturer_code, inventory_products.retailer_code, status_force_sent,                            (SELECT SUM(`quantity`) FROM `inventory_sales_order_sent` WHERE `inventory_sales_order_sent`.`inventory_sales_order_lines_id` = `inventory_sales_order_lines`.`inventory_sales_order_lines_id` AND `inventory_sales_order_sent`.active=1) AS QTY_PREV_RCVD',                'where' => "`inventory_sales_order_lines`.`inventory_sales_orders_id`='{$ID}' AND (inventory_sales_order_lines.active=1 )", //OR inventory_sales_order_lines.active=0                'joins' => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_sales_order_lines`.`barcode`",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        // ===== convert lines to a workable array            // ===== the order put into this array is how it will be displayed as a table            foreach ($record_lines as $line) {                                $price_each                         = ($line['price_total'] / $line['quantity']);                $qty_remain                         = $line['quantity'] - $line['QTY_PREV_RCVD'];                $inventory_sales_order_lines_id     = $line['inventory_sales_order_lines_id'];                $line_status                        = $this->StatusSalesOrderLine($inventory_sales_order_lines_id);                                $temp_array[] = array(                    'lines_id'          => $line['inventory_sales_order_lines_id'],                    'barcode'           => $line['barcode'],                    'description'       => "<b>{$line['retailer_code']}</b><br />{$line['description']}",                    'status'            => $line_status,                    'quantity'          => number_format($line['quantity']),                    'price_each'        => money_format('%n', $price_each),                    'price_total'       => money_format('%n', $line['price_total']),                    'quantity_rcvd'     => $line['QTY_PREV_RCVD'],                    'quantity_remain'   => $qty_remain,                    'status_force_sent' => $line['status_force_sent'],                );                                //echo ArrayToStr($line);            }        }                    return $temp_array;    }        public function ConvertRecordInfoToArray($ARR)    {        # FUNCTION :: Take an array of order lines and convert it to a delimited text        #             which will later be stored in a textarea and converted to a table                $output                         = "";        $newline                        = "\\n";        $delimiter                      = $this->Table_Delimiter;        $count                          = 0;        $this->Default_Locations_ID     = $this->GetSetting('inventory_default_location_id');                        // ----- loop through each record and form array        // ----- output will be based on the order the array values are structured        foreach ($ARR as $record) {                        $count++;   // do count here so first row will have an ID of 1                                    $status = $record['status'];            foreach ($record as $k => $v) {                if ($k != 'status_force_sent') {                    $output .= "{$v}{$delimiter}";                }            }                        // ----- add in the action boxes            if (($status == 'open') || ($status == 'partial')) {                                if ($record['status_force_sent']) {                    $qty        = "n/a";                    $price      = "n/a";                    $send       = "LOCKED</br> (Force Shipped)";                } else {                                    $qty        = "<input id='qty_{$count}' name='qty_{$count}' size='4' maxlength='255' value='' type='text' />";                    $price      = "<input id='price_{$count}' name='price_{$count}' size='4' maxlength='255' value='' type='text' />";                    $js_price   = ($this->CleanMoney($record['price_each']));                   // strip off dollar sign                    $js_qty     = intval($this->CleanNumber($record['quantity_remain']));       // remove comas and convert to integer                    $send       = "<div class='button_send' onclick='sendRemainingInventory({$js_price}, {$js_qty}, {$count}); return false;'><center><a href='#' class='row_checkmark' title='Send Remaining Inventory'></a></center></div>";                }                            } else {                // add the actions form elements to the table row                $qty    = 'n/a';                $price  = 'n/a';                $send   = 'n/a';            }                        $qty_available = $this->GetInventoryQuantityAvailable($record['barcode'], '', $this->Default_Locations_ID);                        // add the actions form elements to the table row            $output .= $qty . $delimiter . $price . $delimiter . $send . $delimiter . $qty_available . $delimiter;                        $output = substr($output, 0, -1);           // trim off the trailing slash            $output .= $newline;                        // add line return        }                        // ----- put the header at the top of the table        $output         = $this->Table_Header_Row . $newline . $output;                return $output;    }        public function MoveArrayIntoForm($CONTENT)    {        # FUNCTION :: Get the delimited text and convert to a table using JavaScript                // ----- feed this array into javascript to put in holder area        $script = "            var targetTextID        = 'FORM_{$this->Table_Holder_DIV}';          // defines hidden textarea that will hold the text array            var targetTableDivID    = '{$this->Table_Display_DIV}';        // defines the div that wraps the created table                        var targetText          = $('#' + targetTextID);            // defines hidden textarea that will hold the text array            var targetTableDiv      = $('#' + targetTableDivID);        // defines the div that wraps the created table                        targetText.val(\"{$CONTENT}\");                             // put the array into textbox            createTableFromTextbox(targetText, targetTableDiv);         // call function to create table from array        ";        AddScriptOnReady($script);    }                    public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                $this->AddScript_NotesArea();                       // script for loading/re-loading notes area                        // ----- Javascript Functionality -----        $this->JavascriptDisplaySessionMessage();                   // Display alert messages        $this->JavascriptToggleFunctionality();                     // Javascript for toggling div areas                        $btn_add        = MakeButton('positive', 'ADD', '', '', 'btn_add', "addDataToTable()", 'button', 'btn_add');        $btn_clear      = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');        $btn_submit     = ($this->Action == 'ADD') ? "Add Record|{$this->Add_Submit_Name}" : "Update Record|{$this->Edit_Submit_Name}";                //$po_status          = "open|partial|closed|canceled";                               // ----- Load the Notes Area -----        $this->Inventory_Sales_Orders_Id        = $this->Record_ID;                     // store the record ID        $notes_area                             = $this->LoadNotesArea();               // get notes for sales order        	           $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                                    "code|<div style='font-size:16px; color:blue; padding:5px; background-color:#ccc;'>Universal ID: <span id='temp_uid'></span>    <div style='float:right;'><span id='temp_header_id'></span></div>     <div class='clear'></div>    </div><br />",            						# ------------------			#			# -- SO HEADER INFORMATION ?? --			#			# ------------------									            "code|<div style='border:1px dashed blue; padding:5px; background-color:#efefef;'><table><tr>",            "code|<td valign='top'>",                'hidden|inventory_sales_orders_id',                #'text|SOID|inventory_sales_orders_id|N|10|255',                                                'text|Date|date|N|10|255',                'code|<br />',                'code|<div style="width:300px;"><b>Shipping Cost Notes:</b><br />Shipping costs need to be added as inventory line items which are fulfilled. If an order has multiple shipments - add 1 shipping line item for each shipment and associate the correct cost.</div>',                            "code|</td><td valign='top'>",                            "code|</td></tr></table></div>",            "code|<br /><br />",									"code|<div class='form_section_wrapper'>",                "code|<div style='font-size:12px; font-weight:bold; color:red;'>The items below were ordered on this Sales Order.<br />If an item to be sent is not in this list - edit the SO first to add it and then mark as fulfilled.</div>",                "code|<div id='{$this->Table_Display_DIV}'></div>",                "submit|{$btn_submit}",                "code|</div>",            "code|<br /><br />",						            'code|<div style="display:none;">',                "textarea|Temp 3|{$this->Table_Holder_DIV}|N|60|4",            'code|</div>',                        #'checkbox|Override Inventory Count|temp_override_inventory_count||1|0',        );                        if ($this->Show_Previous_Fulfilled) {                        // ----- load the previously received inventory but then move it to correct form location            // ----- have to do it like this because ListTableText() fails to return - its like class hasn't run _construct            echo "<div id='temp_received_inventory_holder'>";            $OBJ_RCVD = new Inventory_InventorySalesOrderFulfilled($this->Inventory_Sales_Orders_Id);            $OBJ_RCVD->ScriptUnsendInventory();            echo $OBJ_RCVD->ListTable();            echo "</div>";                        AddScriptOnReady("                var content = $('#temp_received_inventory_holder').html();                $('#temp_received_inventory_holder').html('');                $('#received_inventory_holder').html(content);            ");                        $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                "code|<div style='color:red; font-size:12px; font-weight:bold;'>The table below shows inventory that has already been fulfilled.<br />If you delete any of these lines the current window will refresh and you will lose any details on this screen.</div>",                "code|<div id='received_inventory_holder'></div>",                "code|</div>",                "code|</br></br>",            );            $base_array = array_merge ($base_array, $temp_array);           }                                // ========== NOTES ==========        if ($this->Show_Notes) {            $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">NOTES ('.$this->Existing_Notes_Count.') <a class="toggle" href="#" id="menu_group_notes"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_notes">',                                                "code|<div style='padding:10px;' id='{$this->Note_Area_Wrapper_Id}'>",                        "code|{$notes_area}",                        "code|</div>",                                            'code|</div>',                'code|</div>',                'code|</br></br>',            );            $base_array = array_merge ($base_array, $temp_array);           }                                if ($this->Action == 'ADD') {            #$base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            #$base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        # FUNCTION :: Process the form array to save information to database                $lines_array        	        = array();                                                                                          // will hold lines being added        $passed                 	    = true;                                                                                             // holds check-passed status        $inventory_sales_orders_id  	= $FormArray['inventory_sales_orders_id'];        $lines_array                    = $this->FormArray_ConvertTableToLinesArray($FormArray);                                            // convert the table to a lines array        $FormArray                      = $this->FormArray_CleanUp($FormArray);                                                             // clean up the excess form array        $so_status                      = $this->StatusSalesOrder(0, $inventory_sales_orders_id);        $so_exists                      = $this->StatusSalesOrderExist(0, $inventory_sales_orders_id);        $this->Default_Locations_ID     = $this->GetSetting('inventory_default_location_id');                                // ----- ERROR CHECKING -----        if ($so_status == 'closed') {            $this->Error .= "</br>ERROR :: Sales Order has been fulfilled in full already.";            $passed = false;        }                if ($so_status == 'canceled') {            $this->Error .= "</br>ERROR :: Sales Order has been cancelled.";            $passed = false;        }                if (!$so_exists) {            $this->Error .= "</br>ERROR :: Sales Order not found. SOID: {$inventory_sales_orders_id}";            $passed = false;        }                if (!$lines_array) {            $this->Error .= "</br>NO INVENTORY HAS BEEN SENT";            $passed = false;        }                        foreach ($lines_array as $line) {                        // check qty available            $qty_available = $this->InventoryItemQuantityAvailable($line['barcode'], $line['date'], $this->Default_Locations_ID);            $qty_available = ($qty_available == '') ? 0 : $qty_available;                        if ($qty_available < $line['qty_sent']) {                $this->Error .= "</br>ERROR :: Not enough inventory available. Barcode: {$line['barcode']}. Qty Available: {$qty_available}.";                $passed = false;            }                        // check if over-sending            if ($line['qty_sent'] > $line['qty_remaining']) {                $this->Error .= "</br>ERROR :: Cannot send more inventory than ordered. Barcode: {$line['barcode']}. Qty Sent: {$line['qty_sent']}. Qty Remaining: {$line['qty_remaining']}.";                $passed = false;            }        }                                // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed) {            # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                                    foreach ($lines_array as $line) {                                # ----- Create the sales Order sent LINES entry -----                $db_record = array(                    'inventory_sales_order_lines_id'    => $line['inventory_sales_order_lines_id'],                    'inventory_sales_orders_id'      	=> $inventory_sales_orders_id,                    'barcode'                           => $line['barcode'],                    'date'                              => $line['date'],                    'quantity'                          => $line['qty_sent'],                    'price_total'                       => $line['price_total'],                );                $result = $this->SQL->AddRecord(array(                        'table'     => 'inventory_sales_order_sent',                        'keys'      => $this->SQL->Keys($db_record),                        'values'    => $this->SQL->Values($db_record),                    ));                $passed = (!$result) ? false : $passed;                $last_id = $this->SQL->Last_Insert_Id;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                                                # ----- Subtract the inventory from the inventory counts -----                $db_record = array(                    'barcode'                           => $line['barcode'],                    'qty_out'                           => $line['qty_sent'],                    'ref_sales_order_sent_id'           => $last_id,                    'date'                              => $line['date'],                    'inventory_locations_id'            => $this->Default_Locations_ID,                );				$result = $this->SQL->AddRecord(array(                        'table'     => 'inventory_counts',                        'keys'      => $this->SQL->Keys($db_record),                        'values'    => $this->SQL->Values($db_record),                    ));                $passed = (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);            }                                    # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                                // save the database transactions to database                                // ----- trigger a success message                $this->Bypass_Form_Processing = true;                                           // stop the form from being processed by the rest of base class                                // ----- force redirect to bypass BaseClass further processing this                $link = $this->getPageURL();                $_SESSION['alert_message'] = "RECORD ADDED SUCESSFULLY";                header("Location: {$link}");                exit();                            } else {                $this->SQL->Rollback();                                                         // remove all the database transactions from the database                $this->Error .= "UNABLE TO PROCESS DATABASE TRANSACTIONS";                return $FormArray;            }                    } else {            // ----- return form array to process any legitimate errors            echo $this->Error;            return $FormArray;        }            }        private function FormArray_CleanUp($FormArray)    {        $field_kickout_string           = 'temp_';                // ----- remove any temp fields from the array so they don't get processed        // ----- NOTE :: WASTED STEP IF WE BLOW OUT ARRAY AT END OF FUNCTION        foreach ($FormArray as $field => $value) {                        $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }                    }                //unset($FormArray["{$this->Table_Holder_DIV}"]);           // remove the table holder            return $FormArray;    }        private function FormArray_ConvertTableToLinesArray($FormArray)    {        $lines_array = array();                                      // initialize variable                // ----- get the main table holder value to process        $table = $FormArray[$this->Table_Holder_DIV];                if ($table) {            $lines          = explode("\n", $table);            $header_row     = true;                        $count = 0;            foreach ($lines as $key => $line) {                if ($line) {                    if ($header_row == false) {                                                $count++;                                           // do here so we get the correct row we're on                        $parts = explode($this->Table_Delimiter, $line);                                                // ----- Get the information from the table row -----                        $inventory_sales_order_lines_id     = trim($parts[0]);                        $barcode                            = trim($parts[1]);                        $qty_ordered                        = trim($parts[4]);                        $qty_previous                       = trim($parts[7]);                        $qty_remaining                      = trim($parts[8]);                                                // ----- Get the qty and prices from the $_POST variables -----                        $qty_sent                           = $this->CleanNumber(Post("qty_{$count}"));                        $price_total                        = $this->CleanMoney(Post("price_{$count}"));                                                // ----- Get the general so information -----                        $date                               = $FormArray['date'];                        //$notes                              = $FormArray['notes'];                                                // ----- Misc other calculations needed -----                                                                        // ----- check that inventory item still exists -----                        $exist = $this->StatusInventoryItemExist($barcode);                                                if (!$exist) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        }                                                // ----- check that you're not sending more that ordered -----                        // ----- This check is done later                        //if ($qty_sent > ($qty_ordered + $qty_previous)) {                        //    $this->Error .= "<br />ERROR :: You cannot send more inventory than the quantity ordered. Barcode: {$barcode}";                        //    $passed = false;                        //}                                                if (($qty_sent > 0) && ($price_total >= 0)) {                            $lines_array[] = array(                                'inventory_sales_order_lines_id'    => $inventory_sales_order_lines_id,                                'inventory_sales_orders_id'      	=> 0,                                   // will get later                                'barcode'                           => $barcode,                                'date'                              => $date,                                'qty_sent'                          => $qty_sent,                                'price_total'                       => $price_total,                                'qty_remaining'                     => $qty_remaining,                                //'notes'                             => $notes,                            );                        }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                return $lines_array;    }                        public function JavascriptSendRemainingInventory()    {        AddScript("                function sendRemainingInventory(price, quantity, count) {                    var newPrice = price * quantity;                    $('#price_' + count).val(newPrice);                    $('#qty_' + count).val(quantity);                }            ");    }            public function ForceShip()    {        $this->Show_Query = true;                $isoid = $this->Inventory_Sales_Orders_Id = $this->Record_ID;                        // store the record ID                $lines = $this->SQL->GetArrayAll(array(            'table' => "inventory_sales_order_lines",            'keys'  => "*",            'where' => "inventory_sales_orders_id = {$isoid} AND active=1",        ));        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                foreach ($lines as $line) {            $db_record = array('status_force_sent' => 1);            $result = $this->SQL->UpdateRecord(array(                'table'         => 'inventory_sales_order_lines',                'key_values'    => $this->SQL->KeyValues($db_record),                'where'         => "`inventory_sales_order_lines_id`='{$line['inventory_sales_order_lines_id']}' AND `active`=1",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);            //$passed = (!$result) ? false : $passed;        }    }            // ===== NOTES AREA FUNCTIONS =====    private function LoadNotesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the notes areas for this sales order                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                $output                                     = "";                                                                                   // initialize variable                $Obj_Notes                                  = new Inventory_InventorySalesOrderNotes(0, $this->Inventory_Sales_Orders_Id);          // instantiate class        $Obj_Notes->Inventory_Sales_Orders_Id       = $this->Inventory_Sales_Orders_Id;                                                     // set sales order id to get notes for        $Obj_Notes->Table_Width                     = $this->Notes_Width;                                                                   // set variable        $Obj_Notes->Notes_Font_Size                 = $this->Notes_Font_Size;                                                               // set variable        $this->Existing_Notes_Count                 = $Obj_Notes->GetExistingCount($this->Inventory_Sales_Orders_Id);                       // get count of existing notes        $output                                    .= $Obj_Notes->AddRecordText();                                                          // display ability to add a new note        $output                                    .= "</br>";        $output                                    .= $Obj_Notes->ViewAllRecords(true);                                                     // get the existing records                return $output;                                                                                                                     // return the output    }        private function AddScript_NotesArea()    {        # FUNCTION :: Add needed scripts for this class                $eq     = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)        $soid   = $this->Record_ID;                // ----- ADD SCRIPT TO ADD/EDIT NOTES AND WHITESHEETS -----        AddScript("            function LoadNotesArea() {                // ----- FUNTION :: Load the notes for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_notes;soid={$soid}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Note_Area_Wrapper_Id}').html(data);                });            }        ");    }        }  // -------------- END CLASS --------------