<?phpclass Inventory_InventoryPurchaseOrderReceive extends Inventory_InventoryBase{    public $Show_Query                      = false;            // (false) TRUE = display database queries    public $Module_Offline                  = false;            // (false) TRUE = display offline message to users    public $Record_ID                       = 0;    public $Inventory_Purchase_Orders_Id    = 0;    public $Default_Locations_ID            = 0;        public $Qty_Total_For_Shipping          = 0;                // used in post-processing the form    public $Status_Force_Closed             = false;            // will hold status if force closed        // ----- AUTOTABLE VARIABLES -----    private $Table_Header_Row               = "ID|Barcode|Description|Manufacturer<br />SKU|APDM<br />SKU|Status|Price Each|Price Total|QTY<br />Ordered|QTY<br />Previously<br />Received|QTY<br />Remaining|QTY<br />Received|Price<br />Each|Price<br />Total|Receive Remaining";    private $Table_Holder_DIV               = "autotable_holder";               // defines hidden textarea that will hold the text array    private $Table_Display_DIV              = "autotable_table_display";        // defines the div that wraps the created table    private $Table_Delimiter                = '|';            // ----- FILE UPLOAD VARIABLES -----    private $Window_Width               = 820;                          // needs to be larger than Pipeline_Table_Width    private $Files_Width                = 800;                          // files area - width     private $Files_Font_Size            = 13;                           // files area - font size    private $Files_Font_Size_2          = 10;                           // files area - font size (file details)    private $Files_Area_Wrapper_Id      = "file_add_record_wrapper";    // files area - wrapper id    public $Existing_Files_Count        = 0;                            // will hold count of files uploaded    public $Files_Upload_Type           = 'purchaseorder';              // type of file being uploaded            // ----- FORM ARRAY VARIABLES    private $Show_Files                 = true;                         // (true) TRUE = turn on form array section    private $Show_Received_Inventory    = true;                         // (true) TRUE = turn on form array section    private $Show_Notes                 = true;                         // (true) TRUE = turn on form array section            // ----- NOTES VARIABLES -----    private $Existing_Notes_Count       = 0;                            // will hold the number of notes for this sales order    private $Notes_Width                = 800;                          // notes area - width     private $Notes_Font_Size            = 14;                           // notes area - font size    private $Note_Area_Wrapper_Id       = "note_add_record_wrapper";    // notes area - wrapper id                    public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-08',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-09-02',            'Filename'      => $this->Classname,            'Version'       => '1.7.2',            'Description'   => 'USED FOR RECEIVEING INVENTORY ITEMS FROM A PURCHASE ORDER',            'Update Log'    => array(                '2012-11-08_1.0'    => "Class created",                '2012-11-30_1.1'    => "Fixed issues with receiving inventory",                '2013-01-02_1.2'    => "Modified query to only get and show active order lines (previously showed inactive lines). Added CleanStringForJqueryHTML() calls to fix jQuery errors.",                '2013-01-03_1.3'    => "Added code for entering price each when receiving inventory",                '2013-02-26_1.4'    => "Code changes to support database field change",                '2013-03-06_1.5.1'  => "Switched method of tracking PO to using the database ID and not the PO#",                '2013-04-29_1.5.2'  => "Bug fixes when receiveing inventory",                '2013-05-01_1.5.3'  => "Bug Fix - Allow $0 inventory receive",                '2013-07-19_1.6.0'  => "Upgraded to support file upload",                '2013-08-09_1.7.0'  => "Better post processing",                '2013-08-23_1.7.1'  => "Supports force closed status",                '2013-09-02_1.7.2'  => "Error checking for Default_Locations_ID",            ),        );                $this->SetParameters(func_get_args());        $this->Record_ID         = $this->GetParameter(0);        $this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        #$this->Retailer_Code    = $this->GetParameter(2);                                $this->Table            = 'inventory_purchase_orders';        $this->Index_Name       = 'inventory_purchase_orders_id';                $this->Default_Where    = '';               // additional search conditions        $this->Default_Sort     = 'po_number';      // field for default table sort                $this->Add_Submit_Name  = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field      = $this->Index_Name;                $this->Field_Titles = array(            "{$this->Table}.inventory_purchase_orders_id"           => 'Inventory Purchase Orders Id',                        "{$this->Table}.po_number"                              => 'PO Number',            "{$this->Table}.ref_document_url"                       => 'Ref URL',            "{$this->Table}.ref_document_number"                    => 'Ref Number',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.cost_shipping"                          => 'Cost (shipping)',            "{$this->Table}.cost_other"                             => 'Cost (other)',            "{$this->Table}.status"                                 => 'Status',                        "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',                        "(SELECT SUM(`price_total`) AS EST_LINE_ITEM_COST FROM `inventory_purchase_order_lines` WHERE `inventory_purchase_order_lines`.`po_number` = `inventory_purchase_orders`.`po_number` AND `inventory_purchase_order_lines`.active=1) AS EST_LINE_ITEM_COST" => 'Estimated Line Item Cost',                    );                        $this->Join_Array = Array(            'inventory_counts'  => "LEFT OUTER JOIN `inventory_purchase_order_lines` ON `inventory_purchase_order_lines`.`po_number` = `inventory_purchase_orders`.`po_number`",        );        $this->Default_Fields   = 'po_number, date, status, EST_LINE_ITEM_COST, cost_shipping, cost_other';        $this->Unique_Fields    = '';                        $this->Add_Link         = '';       // don't allow adding a record                $this->Default_Values   = array(            'status'    => 'open',            'date'      => date('Y-m-d'),        );                $this->Close_On_Success = true;            } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                        // Call the AddRecord to get a form onto the screen        // Convert the Record_Id into the barcode        // Pull the entire order info from the barcode        // Convert the order to a table for display                $this->ModuleOfflineMessage();                                              // show module offline essage - if activated        $this->JavascriptReceiveRemainingInventory();                               // javascript to receive inventory                $this->Status_Force_Closed = $this->StatusForceClosed($this->Record_ID);    // determine if record has been force closed                        $this->Inventory_Purchase_Orders_Id = $this->Record_ID;                     // store the record ID        $this->AddRecord();                                                         // add record form array onto screen                $record     = $this->GetOrderLines($this->Inventory_Purchase_Orders_Id);    // get record details about this order        $content    = $this->ConvertRecordInfoToArray($record);                     // convert the record details to order lines table        $this->ScriptJSONTableGeneric();                                            // Add in the generic code held in the BaseClass        $this->MoveArrayIntoForm($content);                // ----- get Purchase Order details        $po_record = $this->GetPurchaseOrderInformation($this->Inventory_Purchase_Orders_Id);        if (is_array($po_record)) {            $cost_shipping                  = money_format("%n", $po_record['cost_shipping']);            $cost_other                     = money_format("%n", $po_record['cost_other']);            $notes                          = $this->CleanStringForJqueryHTML($po_record['notes']);            $po_number                      = $this->CleanStringForJqueryHTML($po_record['po_number']);            $date                           = $this->CleanStringForJqueryHTML($po_record['date']);            $vendor                         = $this->CleanStringForJqueryHTML($po_record['vendor']);            $inventory_purchase_orders_id   = $this->CleanStringForJqueryHTML($po_record['inventory_purchase_orders_id']);                        AddScriptOnReady("                var varTemp = \"$notes\";                $('#temp_ponumber').html('{$po_number}');                $('#temp_inventory_purchase_orders_id').html('{$inventory_purchase_orders_id}');                $('#temp_date').html('{$date}');                $('#temp_vendor').html('{$vendor}');                $('#temp_cost_shipping').html('{$cost_shipping}');                $('#temp_cost_other').html('{$cost_other}');                //$('#temp_notes').html('{$notes}');                $('#temp_notes').html(varTemp);            ");            //$('#temp_notes').html('{$po_record['notes']}');        }                AddScriptOnReady("            $('#FORM_inventory_purchase_orders_id').val('{$this->Inventory_Purchase_Orders_Id}');            $('#temp_inventory_purchase_orders_id').html('{$this->Inventory_Purchase_Orders_Id}');            $('#temp_ponumber').html('{$po_number}');                                                   // PO number at top of page            $('#temp_po_number').html('{$po_number}');                                                  // PO number in details section            $('#temp_header_id').html('(ID: {$inventory_purchase_orders_id})');                         // ID number at top of page        ");                // ----- add the jQuery UI datepicker functionality        AddScriptOnReady('$("#FORM_date").datepicker({dateFormat: "yy-mm-dd"});');            }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => ' inventory_products',                    'keys'  => 'description, retailer_code, barcode',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $arr[] = array(                        'label'             => "{$record['barcode']} - {$record['retailer_code']}",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                        case 'load_files':                $this->Inventory_Purchase_Orders_Id     = Get('ipoid');                $return                                 = $this->LoadFilesArea(true);            break;                        case 'load_notes':                $this->Inventory_Purchase_Orders_Id = Get('poid');                $return = $this->LoadNotesArea(true);            break;        }                echo $return;    }        public function GetPurchaseOrderInformation($ID)    {        $output = 0;        if ($ID) {            // ===== Get the PO details from the passed in Record_Id            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_purchase_orders',                'keys'  => '*',                'where' => "`inventory_purchase_orders_id`='{$ID}' AND active=1",            ));            $this->EchoQuery();            $output = $record;        }                return $output;    }        public function JavascriptReceiveRemainingInventory()    {        # FUNCTION :: Fill in the form to receive all remaining inventory quantity and price        AddScript("                function receiveRemainingInventory(price, quantity, count) {                    var newPrice = price * quantity;                    $('#price_each_' + count).val(price);                    $('#price_total_' + count).val(newPrice);                    $('#qty_' + count).val(quantity);                }            ");    }        //public function GetRecordInfoFromBarcode($RID)    public function GetOrderLines($ID)    {        $temp_array = array();                //if ($RID) {                    /*            // ===== Get the PO details from the passed in Record_Id            $record_po = $this->SQL->GetRecord(array(                'table' => 'inventory_purchase_orders',                'keys'  => '*',                'where' => "`inventory_purchase_orders_id`='{$RID}' AND active=1",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);            */                                    // ===== get all the lines from the PO along with inventory item details            //$this->Inventory_Purchase_Orders_Id = $record_po['inventory_purchase_orders_id'];            if ($ID) {                $record_lines = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_purchase_order_lines',                    'keys'  => 'inventory_purchase_order_lines.*, inventory_products.description, inventory_products.manufacturer_code, inventory_products.retailer_code,                               (SELECT SUM(`quantity`) FROM `inventory_purchase_order_received` WHERE `inventory_purchase_order_received`.`inventory_purchase_order_lines_id` = `inventory_purchase_order_lines`.`inventory_purchase_order_lines_id` AND `inventory_purchase_order_received`.active=1) AS QTY_PREV_RCVD',                    'where' => "`inventory_purchase_order_lines`.`inventory_purchase_orders_id`='{$ID}' AND inventory_purchase_order_lines.active=1",                    'joins' => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_purchase_order_lines`.`barcode`",                ));                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                // ===== convert lines to a workable array                // ===== the order put into this array is how it will be displayed as a table                foreach ($record_lines as $line) {                                        $qty_remain                         = $line['quantity'] - $line['QTY_PREV_RCVD'];                    $inventory_purchase_order_lines_id  = $line['inventory_purchase_order_lines_id'];                    $line_status                        = $this->StatusPurchaseOrderLine($inventory_purchase_order_lines_id);                    $price_each                         = ($line['price_total'] / $line['quantity']);                                        $temp_array[] = array(                        'lines_id'          => $line['inventory_purchase_order_lines_id'],                        'barcode'           => $line['barcode'],                        'description'       => $line['description'],                        'manufacturer_code' => $line['manufacturer_code'],                        'retailer_code'     => $line['retailer_code'],                        'status'            => $line_status,                                                'price_each'        => money_format('%.4n', $price_each),                        'price_total'       => money_format('%n', $line['price_total']),                                                'quantity'          => number_format($line['quantity']),                        'quantity_rcvd'     => number_format($line['QTY_PREV_RCVD']),                        'quantity_remain'   => number_format($qty_remain),                    );                                        //echo ArrayToStr($line);                }            }        //} // end RID check                return $temp_array;    }        public function ConvertRecordInfoToArray($ARR)    {        # FUNCTION :: Take an array of order lines and convert it to a delimited text        #             which will later be stored in a textarea and converted to a table                $output     = "";        $newline    = "\\n";        $delimiter  = $this->Table_Delimiter;        $count      = 0;                // ----- loop through each record and form array        // ----- output will be based on the order the array values are structured        foreach ($ARR as $record) {                        //$this->EchoVar('record', $record);            $status = $record['status'];            foreach ($record as $k => $v) {                $output .= "{$v}{$delimiter}";            }                                    // ----- add in the action boxes            if ($this->Status_Force_Closed) {                $count++;                   // still must increment count so IDs align to correct row in table                $qty            = '-';                $price_each     = '-';                $price_total    = '-';                $receive        = '-';            } else {                if (($status == 'open') || ($status == 'partial')) {                    $count++;   // do count here so first row will have an ID of 1                    $qty            = "<input jqVar1='{$count}' id='qty_{$count}'           name='qty_{$count}'         class='calc_price_quantity' size='4' maxlength='255' value='' type='text' />";                    $price_each     = "<input jqVar1='{$count}' id='price_each_{$count}'    name='price_each_{$count}'  class='calc_price_each'     size='4' maxlength='255' value='' type='text' />";                    $price_total    = "<input jqVar1='{$count}' id='price_total_{$count}'   name='price_total_{$count}' class='calc_price_total'    size='4' maxlength='255' value='' type='text' />";                                        $js_price       = ($this->CleanMoney($record['price_each']));                   // strip off dollar sign                    $js_qty         = intval($this->CleanNumber($record['quantity_remain']));       // remove comans and convert to integer                    $receive        = "<div class='button_receive' onclick='receiveRemainingInventory({$js_price}, {$js_qty}, {$count}); return false;'><center><a href='#' class='row_checkmark' title='Send Remaining Inventory'></a>{$this->Status_Force_Closed} {$status}</center></div>";                                    } else {                    // add the actions form elements to the table row                    $count++;                   // still must increment count so IDs align to correct row in table                    $qty            = 'n/a';                    $price_each     = 'n/a';                    $price_total    = 'n/a';                    $receive        = 'n/a';                }            }                        // add the actions form elements to the table row            $output .= $qty . $delimiter . $price_each . $delimiter . $price_total . $delimiter . $receive . $delimiter;                        $output = substr($output, 0, -1);           // trim off the trailing slash            $output .= $newline;                        // add line return        }                        // ----- put the header at the top of the table        $output         = $this->Table_Header_Row . $newline . $output;                return $output;    }        public function MoveArrayIntoForm($CONTENT)    {        # FUNCTION :: Get the delimited text and convert to a table using JavaScript                // ----- feed this array into javascript to put in holder area        $script = "            var targetTextID        = 'FORM_{$this->Table_Holder_DIV}';          // defines hidden textarea that will hold the text array            var targetTableDivID    = '{$this->Table_Display_DIV}';        // defines the div that wraps the created table                        var targetText          = $('#' + targetTextID);            // defines hidden textarea that will hold the text array            var targetTableDiv      = $('#' + targetTableDivID);        // defines the div that wraps the created table                        targetText.val(\"{$CONTENT}\");                             // put the array into textbox            createTableFromTextbox(targetText, targetTableDiv);         // call function to create table from array        ";        AddScriptOnReady($script);    }        public function StatusForceClosed($ID)    {        # FUNCTION :: Determine if PO has been force closed                $output = 0;                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_purchase_orders',            'keys'  => 'status_force_closed',            'where' => "inventory_purchase_orders_id={$ID}",        ));                if ($record) {            $output = $record['status_force_closed'];        }                return $output;    }                    public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                $this->AddScript_NotesArea();                       // script for loading/re-loading notes area                        // ----- Javascript Functionality -----        $this->JavascriptDisplaySessionMessage();                   // Display alert messages        $this->ScriptCalculatePriceArray();                         // Javascript for autocompleting price textboxes        $this->JavascriptToggleFunctionality();                     // Javascript for toggling div areas                $this->JavascriptDisableFunctionality(array('FORM_temp_po_number', 'FORM_temp_date', 'FORM_temp_vendor', 'FORM_temp_cost_shipping', 'FORM_temp_cost_other', 'FORM_temp_notes'));        // don't allow user to change values on these fields        $this->JavascriptInputNoBorder(array('FORM_temp_po_number', 'FORM_temp_date', 'FORM_temp_vendor', 'FORM_temp_cost_shipping', 'FORM_temp_cost_other', 'FORM_temp_notes'));               // don't show form border on these fields                $btn_add        = MakeButton('positive', 'ADD', '', '', 'btn_add', "addDataToTable()", 'button', 'btn_add');        $btn_clear      = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');        $btn_submit     = ($this->Action == 'ADD') ? "Add Record|{$this->Add_Submit_Name}" : "Update Record|{$this->Edit_Submit_Name}";                        // ----- Load the Notes Area -----        $this->Inventory_Purchase_Orders_Id     = $this->Record_ID;                     // store the record ID        $notes_area                             = $this->LoadNotesArea();               // get notes for sales order                                $base_array = array(            "form|$this->Action_Link|post|db_edit_form",            'hidden|inventory_purchase_orders_id',            "code|<div style='font-size:16px; color:blue; padding:5px; background-color:#ccc;'><div style='float:left;'>PO Number: <span id='temp_ponumber'></span></div>    <div style='float:right;'><span id='temp_header_id'></span></div>     <div class='clear'></div>    </div><br />",        );                                // ----- FORCE CLOSED MESSAGE -----        if ($this->Status_Force_Closed) {            $temp_array = array(            "code|<div class='shadow form_section_wrapper_error' style='font-size:'>",                "code|<div style='font-size:14px; font-weight:bold;'>THIS PO HAS BEEN FORCE-CLOSED</div>",                'code|</div>',            'code|<br />',            );            $base_array = array_merge ($base_array, $temp_array);        }                                // ----- PO INFORMATION -----        $temp_array = array(            "code|<div class='shadow form_section_wrapper' style='font-size:'>",                'code|<div class="form_section_header">PURCHASE ORDER INFORMATION</div>',                                "code|<table border='0'><tr>",                "code|<td valign='top'>",                    "code|                    <div><div style='font-weight:bold; width:100px; text-align:right; float:left;'>PO Number:&nbsp;&nbsp;</div>     <div id='temp_po_number' style='float:left;'></div><div style='clear:both;'></div></div>                    <div><div style='font-weight:bold; width:100px; text-align:right; float:left;'>Date:&nbsp;&nbsp;</div>          <div id='temp_date' style='float:left;'></div><div style='clear:both;'></div></div>                    <div><div style='font-weight:bold; width:100px; text-align:right; float:left;'>Vendor:&nbsp;&nbsp;</div>        <div id='temp_vendor' style='float:left;'></div><div style='clear:both;'></div></div>                    ",                "code|</td>",                "code|<td valign='top'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>",                "code|<td valign='top'>",                    "code|                    <div><div style='font-weight:bold; width:150px; text-align:right; float:left;'>Estimated Shipping Cost:&nbsp;&nbsp;</div>   <div id='temp_cost_shipping' style='float:left;'></div><div style='clear:both;'></div></div>                    <div><div style='font-weight:bold; width:150px; text-align:right; float:left;'>Estimated Other Cost:&nbsp;&nbsp;</div>      <div id='temp_cost_other' style='float:left;'></div><div style='clear:both;'></div></div>                    ",                "code|</td>",                "code|</tr></table>",                            'code|</div>',            'code|<br /><br />',        );        $base_array = array_merge ($base_array, $temp_array);                                // ----- SHIPPING INFORMATION -----        if (!$this->Status_Force_Closed) {            $temp_array = array(                    "code|<div class='form_section_wrapper'>",                "code|<table border='0'><tr>",                "code|<td valign='top'>",                    'text|Date|date|N|10|255',                    'text|Shipping Cost|cost_shipping|N|10|255',                    'text|Other Cost|cost_other|N|10|255',                    'code|<br />',                "code|</td><td valign='middle'>",                    'code|Shipping and Other costs will be evenly<br />distributed to all items accepted below.',                "code|</td>",                "code|</tr></table>",                "code|</div>",                "code|<br /><br />",            );            $base_array = array_merge ($base_array, $temp_array);        }                        $temp_array = array(            "code|<div class='form_section_wrapper'>",                "code|<div style='font-size:12px; font-weight:bold; color:red;'>The items below were ordered on this Purchase Order.<br />If an item received is not in this list - edit the PO first to add it and then receive into inventory.</div>",                "code|<div id='autotable_table_display'></div>",                "submit|{$btn_submit}",                "code|</div>",            "code|<br /><br />",                                    'code|<div style="display:none;">',                'textarea|Temp 3|autotable_holder|N|60|4',            'code|</div>',        );        $base_array = array_merge ($base_array, $temp_array);                                                if ($this->Show_Received_Inventory) {                        // ----- load the previously received inventory but then move it to correct form location            // ----- have to do it like this because ListTableText() fails to return - its like class hasn't run _construct            echo "<div id='temp_received_inventory_holder'>";            $OBJ_RCVD = new Inventory_InventoryPurchaseOrderReceived($this->Inventory_Purchase_Orders_Id);            $OBJ_RCVD->ScriptUnreceiveInventory();            echo $OBJ_RCVD->ListTable();            echo "</div>";                        AddScriptOnReady("                var content = $('#temp_received_inventory_holder').html();                $('#temp_received_inventory_holder').html('');                $('#received_inventory_holder').html(content);            ");                        $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                "code|<div style='color:red; font-size:12px; font-weight:bold;'>The table below shows inventory that has already been received.<br />If you delete any of these lines the current window will refresh and you will lose any details on this screen.</div>",                "code|<div id='received_inventory_holder'></div>",                "code|</div>",                "code|</br></br>",            );            $base_array = array_merge ($base_array, $temp_array);                            }                        // ========== NOTES ==========        if ($this->Show_Notes) {            $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">NOTES ('.$this->Existing_Notes_Count.') <a class="toggle" href="#" id="menu_group_notes"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_notes">',                                                "code|<div style='padding:10px;' id='{$this->Note_Area_Wrapper_Id}'>",                        "code|{$notes_area}",                        "code|</div>",                                            'code|</div>',                'code|</div>',                'code|</br></br>',            );            $base_array = array_merge ($base_array, $temp_array);           }                        if ($this->Show_Files) {                        // ----- GET FILES FOR SALES ORDER (ADDING OR EDITING - because it ties to purchase order record which already exists)            if (($this->Action == 'EDIT' || $this->Action == 'ADD') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                $this->Inventory_Purchase_Orders_Id     = ($this->Inventory_Purchase_Orders_Id != 0) ? $this->Inventory_Purchase_Orders_Id : Post('FORM_inventory_purchase_orders_id');                $files_area_upload                      = ($this->Show_Files) ? $this->LoadFilesUploadArea() : '';          // get files for sales order                $files_area                             = ($this->Show_Files) ? $this->LoadFilesArea() : '';                // get files for sales order                $this->AddScript_FileUpload();                                                                              // ----- ADD SCRIPTS            } else {                // don't load notes area if we're submitting an add/edit record                $files_area_upload  = "";                $files_area         = "<div style='color:red;'>UNABLE TO ADD FILES. CAN ONLY ADD FILES WHEN EDITING AN EXISTING RECORD</div>";            }                        // ----- ADD FORM ARRAY            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">FILES ('.$this->Existing_Files_Count.') <a class="toggle" href="#" id="menu_group_files"><span class="updown">&nbsp;</span></a></div>',                'code|<div class="menu_group" style="display:none;" id="div_menu_group_files">',                                        "code|{$files_area_upload}",                                        "code|<div style='padding:10px;' id='{$this->Files_Area_Wrapper_Id}'>",                    "code|{$files_area}",                    "code|</div>",                                    'code|</div>',            'code|</div>',            "code|<div style='width:{$this->Window_Width}px; border:0px solid blue;'>&nbsp;</div>",            );            $base_array = array_merge ($base_array, $temp_array);                            }                        if ($this->Action == 'ADD') {            //$base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            //$base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        # FUNCTION :: Process the form array to save information to database                $lines_array        	        = array();                                                                  // will hold lines being added        $passed                 	    = true;                                                                     // holds check-passed status        $inventory_purchase_orders_id   = $FormArray['inventory_purchase_orders_id'];        $this->Qty_Total_For_Shipping   = 0;                                                                        // will hold total number of items received - for calculating ship cost        $this->Default_Locations_ID     = $this->GetSetting('inventory_default_location_id');        $lines_array                    = $this->FormArray_ConvertTableToLinesArray($FormArray);                    // convert the table to a lines array        $FormArray                      = $this->FormArray_CleanUp($FormArray);                                     // clean up the excess form array        $po_status                      = $this->StatusPurchaseOrder(0, $inventory_purchase_orders_id);        $po_exists                      = $this->StatusPurchaseOrderExist(0, $inventory_purchase_orders_id);                                // ----- ERROR CHECKING -----        if ($po_status == 'closed') {            $this->Error .= "<br />ERROR :: Purchase Order has been received in full already.}";            $passed = false;        }                if ($po_status == 'canceled') {            $this->Error .= "<br />ERROR :: Purchase Order has been cancelled.";            $passed = false;        }                if (!$po_exists) {            $this->Error .= "<br />ERROR :: Purchase Order not found.";            $passed = false;        }                if (!$lines_array) {            $this->Error .= "NO INVENTORY HAS BEEN RECEIVED";            $passed = false;        }                if (!$inventory_purchase_orders_id) {            $this->Error .= "NO inventory_purchase_orders_id";            $passed = false;        }                if ($this->Default_Locations_ID == 0) {            $this->Error .= "Default_Locations_ID not set";            $passed = false;        }                        // ===== Determine the cost of shipping for each item        $price_shipping                     = $FormArray['cost_shipping'];        $price_other                        = $FormArray['cost_other'];        $price_shipping_each                = (($price_shipping + $price_other) / $this->Qty_Total_For_Shipping);                        if (false) {            $this->EchoVar('price_shipping', $price_shipping);            $this->EchoVar('price_other', $price_other);            $this->EchoVar('qty_total_for_shipping', $this->Qty_Total_For_Shipping);            $this->EchoVar('price_shipping_each', $price_shipping_each);            exit();        }                                                // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed) {            # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                                    foreach ($lines_array as $line) {                            # ----- Create the Purchase Order received LINES entry -----                $price_shipping_total = ($line['quantity'] * $price_shipping_each);   // calculate the shipping amount for this line                                $db_record = array(                    'inventory_purchase_order_lines_id' => $line['inventory_purchase_order_lines_id'],                    'inventory_purchase_orders_id'      => $inventory_purchase_orders_id,                    'barcode'                           => $line['barcode'],                    'date'                              => $line['date'],                    'quantity'                          => $line['quantity'],                    'price_total'                       => $line['price_total'],                    'price_shipping_total'              => $price_shipping_total,                    //'notes'                             => $line['notes'],                );                                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_purchase_order_received',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                $passed = (!$result) ? false : $passed;                $last_id = $this->SQL->Last_Insert_Id;                                                # ----- Add the inventory to the inventory counts -----                $db_record = array(                    'barcode'                           => $line['barcode'],                    'qty_in'                            => $line['quantity'],                    'ref_purchase_orders_received_id'   => $last_id,                    //'notes'                             => '',                    'date'                              => $line['date'],                    'inventory_locations_id'            => $this->Default_Locations_ID,                );                                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_counts',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                $passed = (!$result) ? false : $passed;                $last_id    = $this->SQL->Last_Insert_Id;                            }                                    # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                                // save the database transactions to database                                // ----- trigger a sucess message                $this->Bypass_Form_Processing = true;                                           // stop the form from being processed by the rest of base class                                // ----- force redirect to bypass BaseClass further procesing this                $link = $this->getPageURL();                $_SESSION['alert_message'] = "RECORD ADDED SUCESSFULLY";                header("Location: {$link}");                exit();                            } else {                $this->SQL->Rollback();                                                         // remove all the database transactions from the database                $this->Error .= "UNABLE TO PROCESS DATABASE TRANSACTIONS";                return $FormArray;            }                    } else {            // ----- return form array to process any legitimate errors            echo $this->Error;            return $FormArray;        }    }        private function FormArray_CleanUp($FormArray)    {        $field_kickout_string           = 'temp_';                // ----- remove any temp fields from the array so they don't get processed        // ----- NOTE :: WASTED STEP IF WE BLOW OUT ARRAY AT END OF FUNCTION        foreach ($FormArray as $field => $value) {                        $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }                    }                //unset($FormArray["{$this->Table_Holder_DIV}"]);           // remove the table holder            return $FormArray;    }        private function FormArray_ConvertTableToLinesArray($FormArray)    {        $lines_array = array();                                      // initialize variable                // ----- get the main table holder value to process        $table = $FormArray[$this->Table_Holder_DIV];                if ($table) {            $lines          = explode("\n", $table);            $header_row     = true;                        $count = 0;            foreach ($lines as $key => $line) {                if ($line) {                    if ($header_row == false) {                                                $count++;                                           // do here so we get the correct row were on                        $parts = explode($this->Table_Delimiter, $line);                                                // ----- Get the information from the table row -----                        $inventory_purchase_order_lines_id  = trim($parts[0]);                        $barcode                            = trim($parts[1]);                        $qty_ordered                        = $this->CleanNumber(trim($parts[8]));                        $qty_previous                       = $this->CleanNumber(trim($parts[9]));                        $qty_remaining                      = $this->CleanNumber(trim($parts[10]));                                                // ----- Get the qty and prices from the $_POST variables -----                        $qty_received                       = $this->CleanNumber(Post("qty_{$count}"));                        $price_total                        = $this->CleanMoney(Post("price_total_{$count}"));                        $price_each                         = ($price_total > 0) ? ($price_total / $qty_received) : 0;                        $price_shipping                     = $FormArray['cost_shipping'];                        $price_other                        = $FormArray['cost_other'];                                                // ----- Get the general po information -----                        $date                               = $FormArray['date'];                        $notes                              = $FormArray['notes'];                                                // ----- Misc other calculations needed -----                        $po_line_status                         = ($qty_ordered == ($qty_received + $qty_previous)) ? 'closed' : 'partial';                        $this->$this->Qty_Total_For_Shipping    += $qty_received;        // updated total number of items received (for shipping cost)                                                                        if (false) {                            $this->EchoVar('qty_received', $qty_received);                            $this->EchoVar('qty_total_for_shipping', $qty_total_for_shipping);                            $this->EchoVar('qty_ordered', $qty_ordered);                            $this->EchoVar('qty_previous', $qty_previous);                            $this->EchoVar('po_line_status', $po_line_status);                        }                                                // ----- check that inventory item still exists -----                        $exist = $this->StatusInventoryItemExist($barcode);                        if (!$exist) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        }                                                if (false) {                            $this->EchoVar('qty_ordered', $qty_ordered);                            $this->EchoVar('qty_previous', $qty_previous);                            $this->EchoVar('qty_received', $qty_received);                        }                                                                        // ----- check that you're not receiveing more that ordered -----                        if ($qty_received > ($qty_ordered + $qty_previous)) {                            $this->Error .= "<br />ERROR :: You cannot receive more inventory than the quantity ordered. Barcode: {$barcode}";                            $passed = false;                        }                                                                                                if (($qty_received > 0) && ($price_total >= 0)) {                            $lines_array[] = array(                                'inventory_purchase_order_lines_id' => $inventory_purchase_order_lines_id,                                'inventory_purchase_orders_id'      => 0,                       // will get value later                                'date'                              => $date,                                'quantity'                          => $qty_received,                                'price_total'                       => $price_total,                                'price_shipping_total'              => 0,                       // will get a value later so it can be distributed to multiple lines                                'notes'                             => $notes,                                'po_line_status'                    => $po_line_status,                                'barcode'                           => $barcode,                            );                        }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                return $lines_array;    }                    // ==================== START :: UPLOAD FILES ====================        private function LoadFilesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the previously uploaded files area                $bypass_adding_script = false;                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                if (!$this->Inventory_Purchase_Orders_Id) {            $error = "Missing inventory_purchase_orders_id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output                                 = "";                                                                           // initialize variable                $Obj_Files                              = new Inventory_Uploadify_UploadedFiles();                                      // instantiate class        $Obj_Files->UID                         = $this->Inventory_Purchase_Orders_Id;                                          // set barcode to get files for        $Obj_Files->Upload_Type                 = $this->Files_Upload_Type;                                                     // set file type        $Obj_Files->Table_Width                 = $this->Files_Width;                                                           // set variable        $Obj_Files->Files_Font_Size             = $this->Files_Font_Size;                                                       // set variable        $Obj_Files->Files_Font_Size_2           = $this->Files_Font_Size_2;                                                     // set variable                $output                                .= "</br>";        $output                                .= $Obj_Files->ViewAllRecordsFromFolderWithDatabaseCrosscheck(true);             // get the existing records        $Obj_Files->AddScript();        $this->Existing_Files_Count             = $Obj_Files->Existing_Files_Count;                                             // get count of existing files                return $output;                                                                                                         // return the output    }        private function LoadFilesUploadArea()    {        // FUNCTION :: Load the 'upload a new file' area                if (!$this->Inventory_Purchase_Orders_Id) {            $error = "Missing inventory_purchase_orders_id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output = '';        $Obj_Files_Upload                       = new Inventory_Uploadify_UploadFile($this->Files_Upload_Type, $this->Inventory_Purchase_Orders_Id);            // instantiate class        $Obj_Files_Upload->AddStyle();                                                                                      // add needed styles or stylesheet        $Obj_Files_Upload->AddScript();                                                                                     // add needed scripts        $output                                .= $Obj_Files_Upload->AddRecordText();                                       // display ability to add a new file                return $output;    }        public function AddScript_FileUpload()    {        # FUNCTION :: Script needed for File Uploading                $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)        AddScript("            function LoadFilesArea() {                // ----- FUNTION :: Load the files for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_files;ipoid={$this->Inventory_Purchase_Orders_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Files_Area_Wrapper_Id}').html(data);                });            }        ");    }        // ==================== END :: UPLOAD FILES ====================        // ===== NOTES AREA FUNCTIONS =====    private function LoadNotesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the notes areas for this sales order                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                $output                                     = "";                                                                                   // initialize variable                $Obj_Notes                                  = new Inventory_InventoryPurchaseOrderNotes(0, $this->Inventory_Purchase_Orders_Id);    // instantiate class        $Obj_Notes->Inventory_Purchase_Orders_ID    = $this->Inventory_Purchase_Orders_Id;                                                  // set sales order id to get notes for        $Obj_Notes->Table_Width                     = $this->Notes_Width;                                                                   // set variable        $Obj_Notes->Notes_Font_Size                 = $this->Notes_Font_Size;                                                               // set variable        $this->Existing_Notes_Count                 = $Obj_Notes->GetExistingCount($this->Inventory_Purchase_Orders_Id);                    // get count of existing notes        $output                                    .= $Obj_Notes->AddRecordText();                                                          // display ability to add a new note        $output                                    .= "</br>";        $output                                    .= $Obj_Notes->ViewAllRecords(true);                                                     // get the existing records                return $output;                                                                                                                     // return the output    }        private function AddScript_NotesArea()    {        # FUNCTION :: Add needed scripts for this class                $eq     = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)        $poid   = $this->Record_ID;                // ----- ADD SCRIPT TO ADD/EDIT NOTES AND WHITESHEETS -----        AddScript("            function LoadNotesArea() {                // ----- FUNTION :: Load the notes for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_notes;poid={$poid}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Note_Area_Wrapper_Id}').html(data);                });            }        ");    }            }  // -------------- END CLASS --------------