<?phpclass Inventory_FixOriginalScan extends Inventory_InventoryBase{    public $Show_Query                  = false;            public function  __construct()    {        parent::__construct();                $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-12-03',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => 'Inventory_FixOriginalScan',            'Version'       => '1.0',            'Description'   => 'Fix bad data due to the original inventory scnas not having adjustment records',        );            } // -------------- END __construct --------------        public function Execute()    {        /* ===== P-CODE ===========================                1. Get all inventory_counts with a 'date' before 2012-11-01        2. Create an inventory adjustment record to fill in a default value        3. insert the adjustment record        4. pass back the ID        5. update the main record                ======================================== */                        $records = $this->GetAllRecords();        $this->EchoVar('records', $records);                /*        [inventory_counts_id] => 300        [barcode] => 10056        [qty_in] => 14        [qty_out] => 0        [date] => 2012-10-31        [adjustment] => 1        [ref_purchase_orders_received_id] => 0        [ref_adjustment_id] => 0        [ref_sales_order_sent_id] => 0        [ref_assembly_build_id] => 0        [notes] => 0        [active] => 1        [updated] => 2012-12-03 02:54:34        [created] => 2012-10-31 17:10:57        [part_cost] => 4.44        */                        $passed = false;        # ===== START TRANSACTION ============================================================        $this->SQL->StartTransaction();                                if ($records){        foreach ($records as $record) {                            $quantity       = $record['qty_in'] + $record['qty_out'];            $price_total    = $quantity * $record['part_cost'];                    // ----- Insert the adjustment record -----            $db_record = array(                'barcode'           => $record['barcode'],                'date'              => $record['date'],                'quantity'          => $quantity,                'price_each'        => $record['part_cost'],                'price_total'       => $price_total,                'price_shipping'    => 0,                'notes'             => "Original inventory count. Price based on default price.",            );                        $result                     = $this->AddRecordLoc('inventory_adjustments', $db_record);            $passed                     = (!$result) ? false : $passed;            $inventory_adjustments_id   = $this->SQL->Last_Insert_Id;            $this->EchoQuery(true);                                    // ----- Update the inventory count record -----            $db_record = array(                'ref_adjustment_id' => $inventory_adjustments_id,                'notes'             => "Original inventory count. Price based on default price.",            );                        $where                      = "inventory_counts_id='{$record['inventory_counts_id']}'";            $result                     = $this->UpdateRecordLoc('inventory_counts', $db_record, $where);            $passed                     = (!$result) ? false : $passed;            $this->EchoQuery(true);                                } // end foreach        } else {            echo "<h2>NO REOCRDS TO MODIFY</h2>";        } // end record check                                                # ===== COMMIT TRANSACTION ============================================================        if ($passed) {            $this->SQL->TransactionCommit();        }    }          public function GetAllRecords()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_counts',            'keys'  => 'inventory_counts.*, inventory_products.part_cost',            'where' => "inventory_counts.date < '2012-11-01' AND inventory_counts.adjustment=1 AND inventory_counts.ref_adjustment_id=0 AND inventory_counts.active=1",            'joins' => "LEFT JOIN inventory_products ON inventory_products.barcode = inventory_counts.barcode",        ));                if ($records) {            $this->EchoQuery(true);            return $records;        } else {            echo "<h2>ERROR IN QUERY</h2>";            $this->EchoQuery(true);        }    }      }  // -------------- END CLASS --------------