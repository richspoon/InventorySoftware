<?phpclass Inventory_InventoryAssemblyRequest extends BaseClass //Inventory_InventoryBase{    public $Show_Query                  = false;            public function  __construct()    {        parent::__construct();                $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-19',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => 'Inventory_InventoryAssemblyRequest',            'Version'       => '1.0',            'Description'   => 'Create a request to create an assembly of parts - could also be used to request build of final items',        );                        #$this->SetParameters(func_get_args());        #$this->Barcode          = $this->GetParameter(0);        #$this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        #$this->Retailer_Code    = $this->GetParameter(2);                $this->Table                = 'inventory_assembly_requests';        $this->Index_Name           = 'inventory_assembly_requests_id';        $this->Default_Sort         = '';      // field for default table sort                        $this->Field_Titles = array(            "{$this->Table}.inventory_assembly_requests_id"         => 'Inventory Assembly Requests Id',            "{$this->Table}.inventory_assemblies_id"                => 'Inventory Assembly Id',            "{$this->Table}.quantity"                               => 'Quantity',            "{$this->Table}.date_request"                           => 'Date Request',            "{$this->Table}.date_buildby"                           => 'Date Build By',            "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Status',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                        /*        $this->Join_Array = Array(            'inventory_counts'  => "LEFT OUTER JOIN `inventory_sales_order_lines` ON `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number`",        );        */                $this->Default_Fields   = 'inventory_assemblies_id, date_request, quantity, date_buildby';        $this->Unique_Fields    = '';                $this->Default_Values   = array(            'date_request'      => date('Y-m-d'),        );                        $this->Default_Where        = '';               // additional search conditions        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Close_On_Success     = true;        $this->Edit_Links_Count     = '3';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        		echo "<center><h1 style='color:red;'>FUNCTIONALITY NOT ENABLED</h1></center>";				/*		$this->JavascriptDisplaySessionMessage();   // Display alert messages                $action = Get('action');        switch ($action) {            case 'add':                $this->AddRecord();            break;                        case 'list':            default:                $this->ListTable();            break;        }		*/    }        public function ExecuteAjax()    {        $QDATA = GetEncryptQuery('eq');        $action = Get('action');                //$_GET['show'] = true;                if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                $return = 0;                switch ($action) {                        case 'autocomplete_assembly_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_assemblies',                    'keys'  => 'inventory_assemblies_id, assembly_name, barcode',                    'where' => "(assembly_name LIKE '%{$query}%' OR barcode LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $arr[] = array(                        'label'             => "{$record['assembly_name']} - {$record['barcode']}",                        'description'       => $record['assembly_name'],                        'id'                => $record['inventory_assemblies_id'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;        }                echo $return;    }            private function JavascriptCreateTable()    {        $this->ScriptJSONTableGeneric();                                    // Add in the generic code held in the BaseClass        $eq = EncryptQuery('class=Inventory_InventoryAssemblyRequest');       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_10').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=autocomplete_assembly_lookup',                minChars        : 0,    // how many characters tot ype before starting function call                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_10" ).val( ui.item.label );                    $( "#FORM_inventory_assemblies_id" ).val( ui.item.id );                 // store Barcode                                        return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "<br>"  + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        public function SetFormArrays()    {        AddStylesheet("/css/inventory.css??20121108-1");                        // ----- fill in the request if there is one        $this->Inventory_Assembly_Requests_Id   = (Post('FORM_inventory_assembly_requests_id')) ? $_POST['FORM_inventory_assembly_requests_id'] : 0;        $request_details                        = $this->GetAssemblyRequestInfo($this->Inventory_Assembly_Requests_Id);        $request_display                        = (!$this->Inventory_Assembly_Requests_Id) ? "display:none;" : '';                        // ----- fill in the assembly information        $this->Inventory_Assemblies_Id          = (Post('FORM_inventory_assemblies_id')) ? $_POST['FORM_inventory_assemblies_id'] : 0;        $assembly_details                       = $this->GetAssemblyDetails($this->Inventory_Assemblies_Id);        $assembly_display                       = ($this->Inventory_Assemblies_Id) ? "display:none;" : '';                        // ----- add the jQuery UI datepicker functionality        $this->JavascriptDatepickerFunctionality(array('FORM_date_request', 'FORM_date_buildby'));                $this->JavascriptCreateTable();             // Javascript for creating table from array of data                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|<div class='shadow' style='border:1px dashed blue; padding:5px; background-color:#efefef; {$request_display}'>",                "code|<div style='display:none;'>",                    'text|Request ID|inventory_assembly_requests_id|N|60|255',                    'text|Already Built|temp_already_built|N|60|255',                "code|</div>",                "code|$request_details",            "code|</div>",            "code|<br /><br />",                        "code|<div class='shadow' style='border:1px dashed blue; padding:5px; background-color:#efefef;'>",                "code|<div style='{$assembly_display}'>",                    "text|Search|temp_10|N|60|100",                                        "code|<div style='_display:none;'>",                    "text|Assembly ID|inventory_assemblies_id|Y|60|100",                    "code|</div>",                "code|</div>",                "code|$assembly_details",            "code|</div>",            "code|<br /><br />",                        'text|Quantity To Build|quantity|Y|60|255',            'text|Request Date|date_request|N|60|255',            'text|Build By Date|date_buildby|N|60|255',            'textarea|Notes|notes|N|60|4',        );                        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        $passed                 = true;        $field_kickout_string   = 'temp_';                        $qty_already_built      = $FormArray['temp_already_built'];        $qty_to_build           = $FormArray['quantity'];                // ----- if too low on quantity - throw an error        if ($qty_to_build < $qty_already_built) {            $this->Error .= "Cannnot build fewer items than have already been created.";            $passed = false;        }                // ----- deactivate record if qty to build already matches what has been created        if ($qty_to_build == $qty_already_built) {            $FormArray['active']        = 0;            $_SESSION['alert_message']  = "BUILD REQUEST HAS BEEN FULFILLED AND CLOSED";        }                        if ($passed) {            // ----- remove any temp fields from the array so they don't get processed            foreach ($FormArray as $field => $value) {                echo "{$field} => {$value} <br />";                $pos = strpos($field, $field_kickout_string);                if ($pos !== false) {                    unset($FormArray[$field]);    //remove the field                }            }        }                return $FormArray;    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/class_execute';                $eq                     = EncryptQuery("class=Inventory_InventoryAssemblyBuild;v2={$id};");                $link                   = $CLASS_EXECUTE_LINK . '?eq=' . $eq . '&action=add';                $script                 = "top.parent.appformCreate('Window', '{$link}', 'apps'); return false;";                                /*                $eq2                    = EncryptQuery("class=Inventory_InventorySalesOrderCalculateCOGS;v1={$id};");                $link2                  = $CLASS_EXECUTE_LINK . '?eq=' . $eq2;                $script2                = "top.parent.appformCreate('Window', '{$link2}', 'apps'); return false;";                */                                $this->Edit_Links = qqn("                    <td align=`center`><a href=`#` class=`row_edit`     title=`Edit`   onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a></td>                    <td align=`center`><a href=`#` class=`row_receive`  title=`Build`  onclick=`{$script}; return false;`></a></td>                    <td align=`center`><a href=`#` class=`row_delete`   title=`Delete` onclick=`tableDeleteClick('@IDX@','@VALUE@','@EQ@'); return false; `></a></td>                    ");                                        //<td align=`center`><a href=`#` class=`row_viewline` title=`Calculate COGS`  onclick=`{$script2}; return false;`></a></td>                    //<td align=`center`><a href=`#` class=`row_view`     title=`View`   onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a></td>                                break;        }    }    private function GetAssemblyRequestInfo($REQUEST_ID)    {        $request_details = "";                if ($REQUEST_ID) {                                    $record = $this->SQL->GetRecord(array(                'table' => 'inventory_assembly_requests',                'keys'  => 'inventory_assemblies_id, quantity, quantity_built',                'where' => "`inventory_assembly_requests_id`='{$REQUEST_ID}'",            ));                        if ($record) {                $qty_remain = $record['quantity'] - $record['quantity_built'];                                $request_details = "                    <div style='background-color:#fff; padding:5px; font-size:14px;'>REQUEST DETAILS</div>                    <div style='padding:5px; font-size:12px;'>                        <b>Total Requested:</b> {$record['quantity']}<br />                        <b>Total Already Built:</b> {$record['quantity_built']}<br />                        <b>Total Remaining:</b> {$qty_remain}                    </div>                    ";                                $_POST['FORM_temp_already_built']               = $record['quantity_built'];                $_POST['FORM_inventory_assemblies_id']          = $record['inventory_assemblies_id'];                $_POST['FORM_inventory_assembly_requests_id']   = $this->Inventory_Assembly_Requests_Id;                            } else {                echo "ERROR :: UNABLE TO LOAD BUILD REQUEST";                exit();            }                    }                return $request_details;    }        private function GetAssemblyDetails($ASSEMBLY_ID)    {        $assembly_details = "";                if ($ASSEMBLY_ID) {                        $record = $this->SQL->GetRecord(array(                'table' => 'inventory_assemblies',                'keys'  => 'assembly_name, inventory_assemblies.barcode, inventory_products.description, inventory_products.retailer_code',                'where' => "`inventory_assemblies_id`='{$ASSEMBLY_ID}'",                'joins' => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_assemblies`.`barcode`"            ));            $this->EchoQuery();                        if ($record) {                                $assembly_details = "                    <div style='background-color:#fff; padding:5px; font-size:14px;'>ASSEMBLY DETAILS</div>                    <div style='padding:5px; font-size:12px;'>                        <b>APDM SKU:</b> {$record['retailer_code']}<br />                        <b>Barcode:</b> {$record['barcode']}<br />                        <b>Description:</b> {$record['description']}                    </div>                    ";                                    $_POST['FORM_temp_10']           = "{$record['assembly_name']} - {$record['barcode']}";            } else {                echo "ERROR :: UNABLE TO LOAD ASSEMBLY";                exit();            }                    }                return $assembly_details;    }        public function _JavascriptDisplaySessionMessage() {}    public function _ScriptJSONTableGeneric() {}    public function _EchoQuery() {}}  // -------------- END CLASS --------------