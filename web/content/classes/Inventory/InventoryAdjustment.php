<?phpclass Inventory_InventoryAdjustment extends Inventory_InventoryBase{    public $Dialogid_Id                         = 0;    public $Inventory_Adjustments_Id            = 0;    public $Show_Query                          = false;        public function  __construct()    {        parent::__construct();                $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-26',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2012-12-17',            'Filename'      => 'Inventory_InventoryAdjustment',            'Version'       => '1.1',            'Description'   => 'Add/Remove an inventory adjustment - may have acurred through a physical count adjustment.',            'Update Log'    => array(                '2012-12-17_001'    => 'Added code for allowing an adjustment to be directly made to system',            ),        );                        $this->Classname = get_class($this);                $this->SetParameters(func_get_args());        $this->Inventory_Adjustments_Id         = $this->GetParameter(0);                $eq                     = Get('eq');        $query_array            = GetEncryptQuery($eq, false);        $PARENT_DIALOGID        = (isset($query_array['PARENT_DIALOGID'])) ? $query_array['PARENT_DIALOGID'] : '';        $this->Dialogid_Id      = $PARENT_DIALOGID;                                $this->Table                = 'inventory_adjustments';        $this->Index_Name           = 'inventory_adjustments_id';        $this->Default_Sort         = '';      // field for default table sort                        $this->Field_Titles = array(            "{$this->Table}.inventory_adjustments_id"               => 'Inventory Adjustment Id',                        "{$this->Table}.barcode"                                => 'Barcode',                        "inventory_products.description"                        => 'Description',            "inventory_products.retailer_code"                      => 'APDM Code',                        "{$this->Table}.price_total"                            => 'Price (Total)',            "{$this->Table}.price_shipping"                         => 'Price (Shipping)',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.quantity"                               => 'Quantity',            "{$this->Table}.quantity_in"                            => 'Quantity IN',            "{$this->Table}.quantity_out"                           => 'Quantity OUT',                        "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Status',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                                $this->Join_Array = Array(            'inventory_products'  => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `{$this->Table}`.`barcode`",        );                        $this->Default_Fields   = 'barcode, inventory_products.description, inventory_products.retailer_code, price_total, quantity, quantity_in, quantity_out, date, notes';        $this->Unique_Fields    = '';                $this->Default_Values   = array(            'date'      => date('Y-m-d'),        );                        $this->Default_Where        = '';               // additional search conditions        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Close_On_Success     = true;        $this->Edit_Links_Count     = '1';            } // -------------- END __construct --------------            public function Execute()    {        $this->JavascriptConfirmDeleteAndOpenWindow();      // Javascript needed for deleting records from table with confirmation                $action = Get('action');        //echo "<br />action ===> " . $action;                switch ($action) {            case 'add':                                $this->AddRecord();                break;                        case 'list':            default:                $this->ListTable();                break;                        case 'delete':                // special delete case because a lot of different records need to be modified                $this->DeleteBuildRecord();                break;                    }    }        public function ExecuteAjax()    {        $QDATA      = GetEncryptQuery('eq');        $action     = Get('action');                //$_GET['show'] = true;                if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                $return = 0;                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => ' inventory_products',                    'keys'  => 'description, retailer_code, barcode, status_retired',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                                        $qty    = $this->InventoryItemQuantityAvailable($record['barcode']);                    $cogs   = $this->InventoryItemLastCost($record['barcode']);                                        $retired = ($record['status_retired'] == 1) ? "[Retired] - " : "";                    $arr[] = array(                        'label'             => "{$record['barcode']} - {$retired}{$record['retailer_code']}",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                        'qty'               => $qty,                        'cogs'              => "\$" . $cogs,                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;        }                echo $return;    }                public function SetFormArrays()    {        AddStylesheet("/css/inventory.css");                        // ----- set the focus on first search box        AddScriptOnReady('$("#FORM_temp_0").focus();');                        $this->JavascriptDisplaySessionMessage();           // Display alert messages                        $this->JavascriptAutoComplete();            // Javascript auto-complete functionality        $this->JavascriptClearForm();               // Javascript "clear form" button                 $this->JavascriptDatepickerFunctionality(array('FORM_date'));        $this->JavascriptDisableFunctionality(array('FORM_temp_2','FORM_temp_4','FORM_temp_5','FORM_temp_6'));        $this->JavascriptInputNoBorder(array('FORM_temp_1','FORM_temp_2','FORM_temp_4','FORM_temp_5','FORM_temp_6'));                        $btn_clear          = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');                $R = 'N';                $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|<div class='shadow' style='border:1px dashed blue; padding:5px; background-color:#efefef;'>",                                "text|Search|temp_0|$R|60|100",                                                "code|<br />",                "text|Barcode|temp_1|$R|60|100",                "text|APDM SKU|temp_2|$R|60|100",                "text|Description|temp_4|$R|60|100",                "text|Previous Quantity|temp_5|$R|60|100",                "text|Current COGS|temp_6|$R|60|100",                                "info||$btn_clear",                            "code|</div>",            "code|<br /><br />",                        'text|Quantity ADD|quantity_in|N|60|255',            'text|Quantity REMOVE|quantity_out|N|60|255',            'text|Date|date|N|60|255',            'textarea|Notes|notes|N|60|2',            //'checkbox|Override Value Check|temp_override_value_check||1|0',                    );                        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        /* ====== P-CODE ================================================                Check if inventory item is still active        Determine if qty has increased or decreased from expected        (IF CHANGE) {            create an adjustment record - use last price for adjustment            update the qty information            update the inventory record for last scanned date        } else {            update the inventory record for last scanned date        }                show sucess message        go back to this current page for another entry                ============================================================== */                $passed                 = true;        $barcode                = $FormArray['temp_1'];        $date                   = $FormArray['date'];        $qty_in                 = isset($FormArray['quantity_in']) ? $FormArray['quantity_in'] : 0;        $qty_out                = isset($FormArray['quantity_out']) ? $FormArray['quantity_out'] : 0;        $override_value_check   = false; //$FormArray['temp_override_value_check'];        $note_default           = "MANUAL adjustment. Price based on last found price (not price on date of adjustment).";        $notes                  = isset($FormArray['notes']) ? $FormArray['notes'] . " $note_default" : $note_default;                        if (!$barcode || !$date || (!$qty_in && !$qty_out)) {            $this->Error .= "<br />ERROR :: Not all required information provided.<br />Barcode: {$barcode}<br />Date: {$date}<br />Qty In: {$qty_in}<br />Qty Out: {$qty_out}";            $passed = false;        }                if ($qty_in > 0 && $qty_out > 0) {            $this->Error .= "<br />ERROR :: Cannot ADD and REMOVE inventory at same time.";            $passed = false;        }                                $exist                  = $this->StatusInventoryItemExist($barcode);                if (!$exist) {            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";            $passed = false;        }                                # ===== START TRANSACTION ============================================================        $this->SQL->StartTransaction();                        $quantity_adjust    = $qty_in + $qty_out;        $quantity_adjust    = abs($quantity_adjust);        $last_price         = $this->InventoryItemLastCost($barcode);        $price_total        = ($last_price * $quantity_adjust);                if (!$last_price && $qty_counted > 0 && !$override_value_check) {            $this->Error .= "<br />ERROR :: Inventory has no historical last price. Barcode: {$barcode}";            $passed = false;        }                                // ----- Insert the adjustment record -----        $db_record = array(            'barcode'               => $barcode,            'date'                  => $date,            'quantity'              => $quantity_adjust,            'quantity_in'           => $qty_in,            'quantity_out'          => $qty_out,            'price_each'            => $last_price,            'price_total'           => $price_total,            'price_shipping_each'   => 0,            'price_shipping'        => 0,            'notes'                 => $notes,        );                $result                     = $this->AddRecordLoc('inventory_adjustments', $db_record);        $passed                     = (!$result) ? false : $passed;        $inventory_adjustments_id   = $this->SQL->Last_Insert_Id;        $this->EchoQuery();                        // ----- Insert the inventory count record -----        $db_record = array(            'barcode'           => $barcode,            'date'              => $date,            'qty_in'            => $qty_in,            'qty_out'           => $qty_out,            'adjustment'        => 1,            'ref_adjustment_id' => $inventory_adjustments_id,            'notes'             => $notes,        );                $result                     = $this->AddRecordLoc('inventory_counts', $db_record);        $passed                     = (!$result) ? false : $passed;        $this->EchoQuery();                        # ===== COMMIT TRANSACTION ============================================================        if ($passed) {            $this->SQL->TransactionCommit();                        // ----- Do A force redirect to bypass BaseClass further procesing this            $link = $this->getPageURL();            $_SESSION['alert_message'] = "INVENTORY ADJUSTED SUCESSFULLY";            header("Location: {$link}");        } else {            return $FormArray;        }                //exit();    }                        public function DeleteBuildRecord()    {        # FUNCTION :: USED TO FULLY DELETE AN ADJUSTMENT RECORD                /* P-CODE ========================================================                Delete the Adjust Record        Remove the inventory counts record                 =============================================================== */                echo "<h2>Dialogid_Id: {$this->Dialogid_Id}</h2>";                        if (!$this->Dialogid_Id) {                        $this->Dialogid_Id = Get('DIALOGID');        }                #echo "<h2>Dialogid_Id: {$this->Dialogid_Id}</h2>";        #exit();                if ($this->Inventory_Adjustments_Id) {                        $passed                             = true; // initialize variable                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                        // ----- de-activate the adjustment record            $db_record  = array('active' => 0);            $where      = "`inventory_adjustments_id`='{$this->Inventory_Adjustments_Id}' AND `active`=1";            $result     = $this->UpdateRecordLoc('inventory_adjustments', $db_record, $where);            $passed     = (!$result) ? false : $passed;            $this->EchoQuery();                                    // ----- de-activate the inventory counts records            $db_record  = array('active' => 0);            $where      = "`ref_adjustment_id`='{$this->Inventory_Adjustments_Id}' AND `active`=1";            $result     = $this->UpdateRecordLoc('inventory_counts', $db_record, $where);            $passed     = (!$result) ? false : $passed;            $this->EchoQuery();                                                //echo "passed ===> " . $passed;            //exit();                                    # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                                echo "<br /><br /><h2>SUCCESSFULLY DELETED - REFRESH PARENT TABLE</h2>";                                                                // Put sucess message on screen                //$_SESSION['alert_message'] = "BUILD DELETED SUCESSFULLY";                                // refresh the parent table                if (isset($this->Dialogid_Id)) {                    $script = "top.parent.document.getElementById('appformIframe{$this->Dialogid_Id}').contentWindow.refresh();";                                        echo "                    <script type='text/javascript'>                    {$script}                    </script>                    ";                                        //AddScript($script);                }                                        // close this window                $this->SuccessfulAddRecord();                                                //exit();                            } else {                            echo "<br /><br /><b>ERRORS ===> </b>" . $this->Error;                exit();            }                    }    }                public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = 'http://webmanager.whhub.com/office/class_execute';                                $eq2                    = EncryptQuery("class=Inventory_InventoryAdjustment;v1={$id};PARENT_DIALOGID=$this->Dialogid_Id");                $link2                  = $CLASS_EXECUTE_LINK . '?eq=' . $eq2 . '&action=delete';                $script2                = "ConfirmDeleteAndOpenWindow('{$link2}'); return false;";                                $this->Edit_Links = qqn("                    <td align=`center`><a href=`#` class=`row_delete`   title=`Delete`  onclick=`{$script2}; return false;`></a></td>                    ");                                break;        }    }                        public function JavascriptAutoComplete()    {        $eq = EncryptQuery("class={$this->Classname}");      // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- remove borders from textboxes            //$('#FORM_temp_1').addClass('noborder');            //$('#FORM_temp_2').addClass('noborder');            //$('#FORM_temp_4').addClass('noborder');            //$('#FORM_temp_5').addClass('noborder');            //$('#FORM_temp_6').addClass('noborder');                                    // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_0').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq=$eq;action=autocomplete_inventory_lookup',                minChars        : 0,    // how many characters to type before starting function call                selectFirst     : true,                autoFocus       : true,                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_0" ).val( ui.item.label );                    $( "#FORM_temp_1" ).val( ui.item.barcode );                 // store Barcode                    $( "#FORM_temp_2" ).val( ui.item.sku );                     // store APDM SKU                    $( "#FORM_temp_4" ).val( ui.item.description );             // store Description                    $( "#FORM_temp_5" ).val( ui.item.qty );                     // store quantity                    $( "#FORM_temp_6" ).val( ui.item.cogs );                    // store COGS                         return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "<br>" + item.description + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);                        $script = <<<SCRIPT            (function( $ ) {            $( ".ui-autocomplete-input" ).live( "autocompleteopen", function() {                var autocomplete = $( this ).data( "autocomplete" ),                    menu = autocomplete.menu;                if ( !autocomplete.options.selectFirst ) {                    return;                }                menu.activate( $.Event({ type: "mouseenter" }), menu.element.children().first() );            });            }( jQuery ));SCRIPT;        //AddScript($script);    }        public function JavascriptClearForm()    {        $script = <<<SCRIPT            function clearDataTextboxes() {            // -- clear the textboxes used to search on table data            $("#FORM_temp_0").val('');            $("#FORM_temp_1").val('');            $("#FORM_temp_2").val('');            $("#FORM_temp_4").val('');            $("#FORM_temp_5").val('');            $("#FORM_temp_6").val('');            $("#FORM_temp_7").val('');        }SCRIPT;        AddScript($script);    }    }  // -------------- END CLASS --------------