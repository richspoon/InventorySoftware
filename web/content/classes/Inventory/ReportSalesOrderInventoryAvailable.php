<?phpclass Inventory_ReportSalesOrderInventoryAvailable extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Sales_Order_Count           = 0;        public function  __construct()    {        parent::__construct();        $this->Classname = get_class($this);                $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-29',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-01-06',            'Filename'      => 'Inventory_ReportSalesOrderInventoryAvailable',            'Version'       => '1.0',            'Description'   => 'Create a report to see if current on-hand inventory can meet sales order demand',            'Update Log'    => array(                '2012-11-29_001'    => "Module Created",                '2012-12-10_001'    => "Renamed from InventoryReportSalesOrderInventory to ReportSalesOrderInventoryAvailable",                '2013-01-06_001'    => "Added code to rendering the table so qty_remaining gets swapped into front of table",            ),        );                        #$this->SetParameters(func_get_args());        #$this->Barcode          = $this->GetParameter(0);        #$this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        #$this->Retailer_Code    = $this->GetParameter(2);                $this->Table                = 'inventory_assemblies';        $this->Index_Name           = 'inventory_assemblies_id';        $this->Default_Sort         = '';      // field for default table sort                                                $this->Field_Titles = array(            "{$this->Table}.inventory_assemblies_id"                => 'Inventory Assembly Id',            "{$this->Table}.assembly_name"                          => 'Assembly Name',            "{$this->Table}.barcode"                                => 'Barcode',            "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Status',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',                        //"(SELECT SUM(`price_total`) AS EST_LINE_ITEM_COST FROM `inventory_sales_order_lines` WHERE `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number` AND `inventory_sales_order_lines`.active=1) AS EST_LINE_ITEM_COST" => 'Estimated Line Item Cost',        );                        /*        $this->Join_Array = Array(            'inventory_counts'  => "LEFT OUTER JOIN `inventory_sales_order_lines` ON `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number`",        );        */                $this->Default_Fields   = 'inventory_assemblies_id, assembly_name, barcode, active';        $this->Unique_Fields    = 'assembly_name';                        $this->Default_Values   = array(            'quantity'      => '1',        );                                $this->Default_Where        = '';               // additional search conditions        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Close_On_Success     = true;        $this->Edit_Links_Count     = '4';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        //$_GET['sales_order_list'] = "666, 1256";                AddStylesheet("/css/inventory.css??20121108-1");                $this->OutputSalesOrderForm();        $so_array   = $this->GetSalesOrders();        $output     = $this->CreateTableFromArray($so_array);                echo "<br /><br />" . $output;    }        public function ExecuteAjax()    {        $QDATA = GetEncryptQuery('eq');        $action = Get('action');        $return = 0;                switch ($action) {            case 'opensalesorders':                            // ----- get all sales order numbers                $records = $this->SQL->GetArrayAll(array(                    'table' => "inventory_sales_orders",                    'keys'  => "so_number",                    'where' => "active=1",                    'order' => "date ASC",                ));                                if ($records) {                    // ----- check status of each sales order                    foreach ($records AS $record) {                        $so_number  = $record['so_number'];                        $status     = $this->StatusSalesOrder($so_number);                        if ($status != 'closed') {                            $return .= ", {$so_number}";                        }                    }                }            break;        }                echo $return;    }        public function OutputSalesOrderForm()    {        $onclick 	        = ''; //"submitSalesOrderNumbers('sales_order_list')";        $id 		        = 'btn_barcode';        $name 		        = 'btn_barcode';        $btn_submit         = MakeButton('positive', 'Submit Sales Orders', '', '', $id, $onclick, 'submit', $name);                        $onclick 	        = "getOpenSalesOrders('sales_order_list')";        $id 		        = 'btn_barcode';        $name 		        = 'btn_barcode';        $btn_open         = MakeButton('positive', 'Get All Open Orders', '', '', $id, $onclick, 'button', $name);                                // ----- output the form        // ---- repopulate the form        //$link = $this->getPageURL();        $link   = Server('SCRIPT_URI');        $value  = Post('sales_order_list');        $output = '        <form action="'.$link.'" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        <div class="shadow" style="border:1px dashed blue; padding:5px; background-color:#efefef;">            <br class="formtitlebreak"><div class="formtitle">Sales Orders:</div>            <div class="forminfo">                Seperate each sales order number with a comma!                <br />                <input autocomplete="off" alt="Search" id="sales_order_list" class="formitem ui-autocomplete-input" name="sales_order_list" size="60" maxlength="255" value="'.$value.'" type="text"><span class="ui-helper-hidden-accessible" aria-live="polite" role="status"></span>                <br /><br />                <div>                '.$btn_submit.' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                '.$btn_open.'                </div>                <div style="clear:both;"></div>            </div>        </div>        </form>';        echo $output;                                // ----- javascript for submitting the form        //$link = $this->getPageURL();        $CLASS_EXECUTE_LINK_AJAX    = '/office/AJAX/class_execute';        $eq                         = EncryptQuery("class={$this->Classname};");        $link                       = $CLASS_EXECUTE_LINK_AJAX . '?eq=' . $eq;                $script = <<<SCRIPT            function getOpenSalesOrders(returnID)            {                // CALL THIS CLASS VIA AJAX TO GET BARCODE                $.get( '{$link};action=opensalesorders', '', function(data){                    $('#' + returnID).val(data);                });            }SCRIPT;        AddScript($script);            }        public function GetSalesOrders()    {        $so_array       = array();    // ----- will hold all the sales orders and its barcodes        $so_list        = Post('sales_order_list');                if ($so_list) {            $sales_orders   = explode(',', $so_list);                        // ----- loop through each SO and get the barcodes for it            foreach ($sales_orders AS $sales_order) {                                $sales_order = trim($sales_order);                                if ($sales_order) {                    $this->Sales_Order_Count++;                    $so_array[$sales_order] = $this->GetBarcodesForSalesOrder($sales_order);                }            }        }                return $so_array;    }        public function GetBarcodesForSalesOrder($SO_NUMBER)    {        # FUNCTION :: get all barcodes for this sales order and the latest date for that barcode                $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_sales_order_lines',            'keys'  => '                inventory_sales_order_lines.*, inventory_sales_order_lines.quantity AS QTY_ORDERED,                 inventory_products.description, inventory_products.manufacturer_code, inventory_products.retailer_code,                                 ((                    SELECT SUM(inventory_sales_order_sent.quantity)                      FROM `inventory_sales_order_sent`                     WHERE inventory_sales_order_sent.active     = 1                     AND inventory_sales_order_sent.barcode      = inventory_sales_order_lines.barcode                     AND inventory_sales_order_sent.so_number    = inventory_sales_order_lines.so_number                     GROUP BY barcode                ))  AS QTY_SENT,                                 ((                    SELECT (SUM(`inventory_counts`.`qty_in`) - SUM(`inventory_counts`.`qty_out`)) AS QTY_AVAILABLE                     FROM `inventory_counts`                     WHERE inventory_counts.active     = 1                     AND inventory_counts.barcode      = inventory_sales_order_lines.barcode                     GROUP BY barcode                 ))  AS QTY_AVAILABLE                             ',            'where' => "`inventory_sales_order_lines`.`so_number`='{$SO_NUMBER}' AND `inventory_sales_order_lines`.`active`=1 GROUP BY `inventory_sales_order_lines`.`barcode`",            'joins' => "                LEFT JOIN inventory_sales_order_sent    ON  inventory_sales_order_sent.barcode  = inventory_sales_order_lines.barcode                 LEFT JOIN inventory_counts              ON  inventory_counts.barcode            = inventory_sales_order_lines.barcode                 LEFT JOIN inventory_products            ON  inventory_products.barcode          = inventory_sales_order_lines.barcode             ",        ));        $this->EchoQuery();                return $records;    }        public function CreateTableFromArray($SO_ARR)    {        $output = '';        $output_array           = array();        $temp_so_count_array    = array();        $temp_so_array          = array();                if ($SO_ARR) {            if ($this->Sales_Order_Count > 0) {                // ----- loop though total array to get all barcodes                foreach ($SO_ARR AS $so_number => $so_array) {                    foreach ($so_array AS $id => $arr) {                                                $barcode = $arr['barcode'];                                                if (!in_array($so_number, $temp_so_array)) {                            $temp_so_array[] = $so_number;                        }                                                $temp_so_count_array[$barcode][$so_number] = array(                            'ordered'   => $arr['QTY_ORDERED'],                            'sent'      => $arr['QTY_SENT'],                        );                                                $qty_available = (isset($arr['QTY_AVAILABLE'])) ? $arr['QTY_AVAILABLE'] : 0;                        $output_array[$barcode] = array(                            'barcode'               =>  $arr['barcode'],                            'description'           =>  $arr['description'],                            'manufacturer_code'     =>  $arr['manufacturer_code'],                            'retailer_code'         =>  $arr['retailer_code'],                            'qty_available'         =>  $qty_available,                        );                    }                }                                                // ----- now create the table array                                // ---------- HEADER ----------                $output .= '<table border=1 id="jsonTable" border="1" cellpadding="1" cellspacing="1">';                                $cnt = count($temp_so_array);                $output .= "<tr><td colspan='4'></td><th colspan='{$cnt}'>SALES ORDERS</th><td></td></tr>";                                $output .= "<tr>                            <th>Barcode</th>                            <th>Information</th>                            <th>QTY Available</th>                            <th>QTY Remaining</th>";                                        foreach ($temp_so_array AS $k => $v) {                    $output .= "<th>#{$v}<br /></th>";                }                                $output .= "<th>QTY Remaining</th>                            </tr>";                                                // ---------- DATA ----------                $swap_search = array();                $swap_value = array();                foreach ($output_array AS $barcode => $arr) {                                        $swap_var_value = "@@REMAINING_{$barcode}_VALUE@@";                    $swap_var_style = "@@REMAINING_{$barcode}_STYLE@@";                                        $bgcolor = ($arr['qty_available'] < 0) ? 'pink' : 'white';                    $output .= "                        <tr>                        <td><b>{$arr['barcode']}</b></td>                        <td style='min-width:200px;'><b>{$arr['retailer_code']}</b><br />{$arr['description']}</td>                        <td align='center' style='background-color:{$bgcolor}'>{$arr['qty_available']}</td>                        <td {$swap_var_style}>{$swap_var_value}</td>                        ";                                        $remaining  = $arr['qty_available'];                                                            foreach ($temp_so_array AS $k => $so_number) {                        $ordered    = (isset($temp_so_count_array[$barcode][$so_number]['ordered'])) ? $temp_so_count_array[$barcode][$so_number]['ordered'] : 0;                        $sent       = (isset($temp_so_count_array[$barcode][$so_number]['sent'])) ? $temp_so_count_array[$barcode][$so_number]['sent'] : 0;                        $left       = ($ordered - $sent);                        $remaining  = $remaining - $left;                                                $style_float_l = "style='float:left;'";                        $style_float_r = "style='float:right;'";                        $subtable = "                        <div style='width:100px;'>                        <div><div $style_float_l>Ordered</div>              <div $style_float_r>{$ordered}</div><div class='clear'></div></div>                        <div><div $style_float_l>Sent</div>                 <div $style_float_r>{$sent}</div><div class='clear'></div></div>                        <div><div $style_float_l><b>Remaining</b></div>     <div $style_float_r><b>{$left}</b></div><div class='clear'></div></div>                        </div>";                                                $output .= ($ordered > 0) ? "<td align='center'>{$subtable}</td>" : "<td></td>";                    }                                        $bgcolor    = ($remaining < 0) ? 'pink' : 'white';                    $cell_style = "align='center' style='background-color:{$bgcolor}'";                    $cell_value = $remaining;                                        $output .= "<td {$cell_style}>{$cell_value}</td>                                </tr>";                                        // ----- add all of the swap information into the array -----                    $swap_search[]  = $swap_var_value;                    $swap_search[]  = $swap_var_style;                    $swap_value[]   = $cell_value;                    $swap_value[]   = $cell_style;                                    }                                // ---------- CLOSE TABLE ----------                $output .= "</table>";                                                // ----- swap the 'remaining' data into the eraly part of the table -----                $output = str_replace($swap_search, $swap_value, $output);                            } // end if        } else {            $output = "<center><h2>NO SALES ORDERS SUBMITTED</h2></center>";        } // end if                return $output;    }        }  // -------------- END CLASS --------------