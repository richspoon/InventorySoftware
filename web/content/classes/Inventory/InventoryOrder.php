<?php// ========================================================================================// FILE: Inventory_InventoryOrder.php// Used to scan barcode products into the database// ========================================================================================class Inventory_InventoryOrder extends Inventory_InventoryBase{    public $Page_Location                  = "/office/command_central/inventory_order";    public $Page_Location_Get              = '';    public $Page_Link_Add_Inventory        = '';    public $Page_Link_Success              = '';    public $Show_Query                     = false;            public function  __construct()    {        parent::__construct();                $this->Add_Submit_Name  = 'INVENTORY_PRODUCTS_HOLD_SUBMIT_ADD';        $this->Table            = 'inventory_orders';        $this->Index_Name       = 'inventory_orders_id';                $this->Default_Values   = array(            'speedscan'         => Get('speedscan'),            'multiple_entry'    => Get('multiple_entry'),        );            } // -------------- END __construct --------------    public function Execute()    {        $this->InventoryMenu('ORDERS');            AddScriptOnReady("            $('#FORM_barcode').focus();                        $('#btn_order_place').click(function() {                orderPlace();            });                        $('#btn_order_cancel').click(function() {                orderCancel();            });                        $('#btn_order_receive').click(function() {                orderReceive();            });                        $('#btn_order_reset').click(function() {                orderReset();            });                        function orderPlace() {                $('#FORM_check_order_place').val('1');                $('#FORM_check_order_cancel').val('0');                $('#FORM_check_order_receive').val('0');                                $('#form_wrap').addClass('form_wrapper_order_place').removeClass('form_wrapper_order_cancel').removeClass('form_wrapper_order_receive').removeClass('hidden');                $('#btn_reset').addClass('display').removeClass('hidden');                $('#FORM_barcode').focus();            };                        function orderCancel() {                $('#FORM_check_order_place').val('0');                $('#FORM_check_order_cancel').val('1');                $('#FORM_check_order_receive').val('0');                                $('#form_wrap').removeClass('form_wrapper_order_place').addClass('form_wrapper_order_cancel').removeClass('form_wrapper_order_receive').removeClass('hidden');                $('#btn_reset').addClass('display').removeClass('hidden');                $('#FORM_barcode').focus();            };                        function orderReceive() {                $('#FORM_check_order_place').val('0');                $('#FORM_check_order_cancel').val('0');                $('#FORM_check_order_receive').val('1');                                $('#form_wrap').removeClass('form_wrapper_order_place').removeClass('form_wrapper_order_cancel').addClass('form_wrapper_order_receive').removeClass('hidden');                $('#btn_reset').addClass('display').removeClass('hidden');                $('#FORM_barcode').focus();            };                        function orderReset() {                $('#FORM_multiple_entry').attr('checked', false);                                $('#FORM_check_order_place').val('0');                $('#FORM_check_order_cancel').val('0');                $('#FORM_check_order_receive').val('0');                                $('#FORM_order_details').val('');                $('#FORM_barcode').val('');                $('#FORM_quantity').val('');                                $('#form_wrap').removeClass('form_wrapper_order_place').removeClass('form_wrapper_order_cancel').removeClass('form_wrapper_order_receive').addClass('hidden');                $('#btn_reset').addClass('hidden').removeClass('display');                $('#FORM_barcode').focus();            };                        function orderPartialReset() {                $('#FORM_barcode').val('');                $('#FORM_quantity').val('');                                var valOrder    = $('#FORM_check_order').val();                var valCancel   = $('#FORM_check_cancel').val();                                if (valOrder == 1) { orderPlace(); }                if (valCancel == 1) { orderCancel(); }            }        ");                                $method = Get('method');        if ($method == 'order') AddScriptOnReady("orderPlace();");        if ($method == 'cancel') AddScriptOnReady("orderCancel();");        if ($method == 'receive') AddScriptOnReady("orderReceive();");                                $this->AddRecord();                                if (Session('RESET_FORM_ORDER')) {            switch(Session('RESET_FORM_ORDER')) {                case 'place':                    $script = "orderPlace();";                break;                                case 'cancel':                    $script = "orderCancel();";                break;                                case 'receive':                    $script = "orderReceive();";                break;            }            unset($_SESSION['RESET_FORM_ORDER']);            AddScriptOnReady($script);        }    }            public function SetFormArrays()    {        AddStyle("            #btn_order_place {                width:140px; height:50px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:left;                background-color:#0F63A5; color:#fff;            }            #btn_order_cancel {                width:140px; height:50px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:left;                background-color:#CC2A21; color:#fff;            }            #btn_order_receive {                width:140px; height:50px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:left;                background-color:#FFA011; color:#fff;            }            #btn_order_reset {                width:100px; height:20px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:right;                background-color:#2FB406; color:#fff;            }            .hidden {                display:none;            }            .display {                display:visible;            }            .form_wrapper_order_place {                background-color:#0F63A5; color:#fff;                display:visible;            }            .form_wrapper_order_cancel {                background-color:#CC2A21; color:#fff;                display:visible;            }            .form_wrapper_order_receive {                background-color:#FFA011; color:#fff;                display:visible;            }        ");            $action_msg = "<div id='checkin_msg' style=''>msgh here</div>";        $buttons = "            <div id='btn_order_place'>PLACE Item Order</div>&nbsp;&nbsp;&nbsp;            <div id='btn_order_cancel'>CANCEL Item Order</div>&nbsp;&nbsp;&nbsp;            <div id='btn_order_receive'>RECEIVE Item Order</div>            <div class='clear'></div>            ";        $btn_reset = "            <div id='btn_order_reset'>RESET</div>            <div class='clear'></div>            ";                        $message = Session('scan_message');        AddFlash($message);        unset ($_SESSION['scan_message']);                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",            "code|<div style='min-width:500px; min-height:500px;'>",                        'hidden|check_order_place',            'hidden|check_order_cancel',            'hidden|check_order_receive',                        #"info||$message<br /><br />",                        "code|$buttons",            "code|<div id='form_wrap' class='hidden'>",                'code|<br />',                                'textarea|Order Details|order_details|N|10|2',                'text|BARCODE|barcode|N|40|255',                'text|G-CODE|retailer_code|N|40|255',                'text|QTY|quantity|N|10|10',                                                'checkbox|MULTIPLE ENTRY|multiple_entry||1|0',                'checkbox|SKIP INVENTORY|speedscan||1|0',                "submit|Add Record|$this->Add_Submit_Name",            "code|</div>",            "code|$btn_reset",                        "code|</div>",            'endform',        );                $this->Form_Data_Array_Add = $base_array;    }            public function PostProcessFormValues($FormArray)    {        #echo ArrayToStr($FormArray);        #exit();                        # DON'T CONTINUE IF THERE ARE EXISTING FORM ERRORS        # ==========================================================        if ($this->Error) {            return false;        }                        # HANDLE FORM INFORMATION        # ============================================================        $multiple_entry                     = ($FormArray['multiple_entry'] == 1 ) ? true : false;        $speedscan                          = ($FormArray['speedscan'] == 1 ) ? true : false;        $quantity                           = ($FormArray['quantity'] != '' ) ? $FormArray['quantity'] : 1;                $qty_order_place                    = ($FormArray['check_order_place'] == 1) ? $quantity : 0;        $qty_order_cancel                   = ($FormArray['check_order_cancel'] == 1) ? $quantity : 0;        $qty_order_receive                  = ($FormArray['check_order_receive'] == 1) ? $quantity : 0;                $FormArray['barcode']               = $FormArray['barcode'];        $FormArray['qty_order']             = $qty_order_place;        $FormArray['qty_cancel']            = $qty_order_cancel;        $FormArray['qty_receive']           = $qty_order_receive;                                if ($qty_order_place > 0) {            $_SESSION['scan_message']           = "ORERING Item";            $method                             = "order";        }        if ($qty_order_cancel > 0) {            $_SESSION['scan_message']           = "CANCEL Item Order";            $method                             = "cancel";        }        if ($qty_order_receive > 0) {            $_SESSION['scan_message']           = "RECEIVE Oredered Item";            $method                             = "receive";        }                                # IF A RETAILER CODE HAS BEEN SENT IN - FIGURE OUT THE BARCODE INSTEAD        # ==========================================================================        if ($FormArray['retailer_code'] != '' && $FormArray['barcode'] == '') {                        #echo "<br />ATTEMPTING TO LOCATE BARCODE FROM RETAILER CODE.";            #echo "<br />retailer_code ===> " . $FormArray['retailer_code'];            #echo "<br />barcode ===> " . $FormArray['barcode'];                        $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => '*',                'where' => "`retailer_code`='{$FormArray['retailer_code']}' AND `active`=1",            ));            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                        if (!$record || $record['barcode']=='') {                $this->Error = "You are trying to <b>{$method}</b> a product without a barcode - and it is NOT in the system. To complete this order - you must enter a barcode in addition to the G-CODE!";                return false;            } else {                $FormArray['barcode'] = $record['barcode'];            }                    }                                # CREATE LINK FOR PAGE SUCCESSFULY ADDING        # ============================================================        $method_link                = ($multiple_entry) ? $method : '';        $this->Page_Location_Get    = ";multiple_entry={$multiple_entry};speedscan={$speedscan};method={$method_link}";        $this->Page_Link_Success    = "{$this->Page_Location}{$this->Page_Location_Get}";                        # CREATE LINK FOR ADDING INVENTORY TO SYSTEM        # ============================================================        $post_add_link                  = HexEncodeString("{$this->Page_Location}{$this->Page_Location_Get}");        $link                           = getClassExecuteLinkNoAjax(EncryptQuery("class=Inventory_InventoryProducts;v1={$FormArray['barcode']};v2={$post_add_link};v3={$FormArray['retailer_code']}"));        $link                          .= ";action=add";        $this->Page_Link_Add_Inventory  = $link;                                if (!$speedscan) {            # VERIFY IF WE HAVE THIS PRODUCT IN INVENTORY            # ============================================================            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => '*',                'where' => "`barcode`={$FormArray['barcode']} AND `active`=1",            ));            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                        if (!$record) {                echo "<br /><br />UNABLE TO LOCATE PRODUCT ININVENTORY. <br /><a href='#'>Would you like to add inventory details?</a>";                $_SESSION['scan_add_inventory'] = $FormArray['barcode'];            }        }                                # CANCEL ==> CHECK TO SEE IF PRODUCTS HAVE BEEN ORDERED        # ==================================================================        if ($qty_order_cancel > 0) {                        $record = $this->SQL->GetCustomRecord("                SELECT (SUM(`qty_order`) - SUM(`qty_cancel`)) AS TOTAL_ON_ORDER                 FROM {$this->Table}                WHERE `barcode`={$FormArray['barcode']} AND `active`=1            ");            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                        $check_value = (isset($record['TOTAL_ON_ORDER'])) ? $record['TOTAL_ON_ORDER'] : 0;                        if ($qty_order_cancel > $check_value) {                $this->Error = "You are trying to cancel more products than have been ordered. <b>Current on Order = {$check_value}.</b> Cancelling transaction.";                ###$FormArray['qty_cancel'] = $check_value; # can't release more than what is on hold                $_SESSION['RESET_FORM_ORDER'] = 'cancel';            }        }                                # RECEIVE ==>         # ============================================================        if ($qty_order_receive > 0) {                        #CHECK TO SEE IF PRODUCTS HAVE BEEN ORDERED            # ============================================================            $record = $this->SQL->GetCustomRecord("                SELECT (SUM(`qty_order`) - SUM(`qty_cancel`)) AS TOTAL_ON_ORDER                 FROM {$this->Table}                WHERE `barcode`={$FormArray['barcode']} AND `active`=1            ");            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                        $check_value = (isset($record['TOTAL_ON_ORDER'])) ? $record['TOTAL_ON_ORDER'] : 0;                        if ($qty_order_receive > $check_value) {                $this->Error = "You are trying to receive more products than have been ordered. <b>Current on Order = {$check_value}.</b> Cancelling transaction.";                $_SESSION['RESET_FORM_ORDER'] = 'receive';            } else {                # MOVE THE PRODUCT INTO INVENTORY                # ============================================================                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_counts',                    'keys'      => "barcode,qty_in",                    'values'    => "'{$FormArray['barcode']}', '{$FormArray['qty_receive']}'",                ));                if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                                if (!$result) {                    $this->Error = "Unable to check inventory in. Cancelling transaction.";                    $_SESSION['RESET_FORM_ORDER'] = 'receive';                }            }        }                                #echo "<br />record ===> $record";        #echo "<br />qty_order_cancel ===> $qty_order_cancel";        #echo "<br />check_value ===> $check_value";        #exit();                        # RETURN THE FORM ARRAY FOR DATABASE ENTRY        # ============================================================        unset($FormArray['retailer_code']);        unset($FormArray['quantity']);        unset($FormArray['check_order_place']);        unset($FormArray['check_order_cancel']);        unset($FormArray['check_order_receive']);        unset($FormArray['speedscan']);        unset($FormArray['multiple_entry']);                return $FormArray;    }            }  // -------------- END CLASS --------------