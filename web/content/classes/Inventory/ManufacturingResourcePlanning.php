<?phpclass Inventory_ManufacturingResourcePlanning extends Inventory_InventoryBase{    public $Show_Query                      = false;    public $Indent_Character                = "    ";    public $Line_Break_Character            = "|*";    public $Section_Break_Character         = "|";    public $Line_Break_Character_XLS        = "*";    public $Section_Break_Character_XLS     = "\t";        public $BOM_Array                       = array();      // will hold the BOM information    public $Needed_Array                    = array();      // will hold actual quantities needed for build    public $Order_Array                     = array();      // will hold actual inventoy to order for build    public $Inventory_Available_Array       = array();      // will hold inventory levels    public $Gantt_Array                     = array();      // will hold Gantt-formatted array        public $Total_Part_Count                = 5;            // how many data parts are in a row        public $Use_Fake_Inventory_Available    = false;        public $Show_Input_Form_Stored_Bom      = true;    public $Show_Input_Form_Manual_Bom      = false;            public $Show_XLS_Form                   = true;    public $Show_Gantt                      = false;    public $Show_Summary                    = true;    public $Show_Edit_Table                 = false;    public $Show_Bom_Array                  = false;    public $Show_Needed_Array               = false;    public $Show_Order_Array                = false;    public $Show_Inventory_Array            = false;    public $Show_Google_Visualization       = false;            public $Build_Quantity                  = 0;    public $Build_Date                      = 0;    public $Build_Barcode                   = 0;        public $Multi_BOM                       = false;        // will hold status of multiple BOMs being processed at once        // ----- these items should always return 0 QTY or processing will fail    // ----- they are also skipped when considering an item's parent quantity    // ----- labor and shipping    public $Inventory_Available_Skip_Array = array(        30298,  //Labor_1_Minute_Unskilled        30307,  //Labor_1_Minute_Skilled        90003,  //Labor_At_Vendor        90001,  //Shipping_To_Vendor        90002,  //Shipping_From_Vendor        );                public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-12-06',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Determine Inventory Purchases needed to meet production quota',            'Update Log'    => array(                '2012-12-06_1.0' => "Module Created",            ),        );            } // -------------- END __construct --------------        /* ----- READING EXCEL DOCUMENTS -----------------        http://php-drops.blogspot.in/2011/04/read-excel-sheet-xls-file-with-php.html    http://phpexcel.codeplex.com/        ----------------------------------------------- */            /* ======= P-CODE ===================================        Overview - given a BOM (or end SKU)determine how much inventory needs to be purchased and when        Take in target date    Take in target inventory qty for barcodes        Basic case assumes no other production going on at the current time.     Advanced case - there is other production so need to determine how much inventory that will eliminate - then run basic analysis        Loop back through the creation of the one barcode    Store the number of each thing needed    Determine how much inventory is currently available    Determine how much more is needed    Determine if its an assembly (made up of other parts) -- NOT assembly in database - this BOM is seperate    If assembly - get those subparts    Keep looping until no other parts    Output the inventory needed        Note: time is an inventory item that can adjust purchases. I.e. if a board has to be shipped to a vendor - something done        to that item, then it comes back to us --- time is an inventory duration cost. This could be done as an assmebly item. That        would allow the base logic of always looking to assemblies to work.        Note: We can't use the assemblies in the database because there could be multiple assemblies for a given end barcode. I.e. Its        possible that two different parts could be used to make a dock (top metal/plastic dependant). It can't arbitraily look at the        database and know which one to use. I suppose the assembly ID could be stored in the bom.            Note: Start by NOT considering the weekends as non-working days. we'll alter calculate weekends as no good and can also add holidays.    ================================================== */        public function ShowFilesInDir()    {        // open the current directory        $ROOT           = "/mnt/stor3-wc2-dfw1/482052/webmanager.whhub.com/web/content";        $directory      = "/bomfiles";        $open           = "{$ROOT}{$directory}";        $dhandle = opendir($open);                // define an array to hold the files        $files = array();        if ($dhandle) {           // loop through all of the files           while (false !== ($fname = readdir($dhandle))) {              // if the file is not this file, and does not start with a '.' or '..',              // then store it for later display              if (($fname != '.') && ($fname != '..') &&                  ($fname != basename($_SERVER['PHP_SELF']))) {                  // store the filename                  $files[] = (is_dir( "./$fname" )) ? "(Dir) {$fname}" : $fname;              }           }           // close the directory           closedir($dhandle);        }        $output = "<select name='selectFile'>\n";        $output .= "<option>-- SELECT --</option>\n";        // Now loop through the files, echoing out a new select option for each one        foreach( $files as $fname )        {           $output .= "<option>{$fname}</option>\n";        }        $output .= "</select>\n";                AddScriptOnReady("            $('#selectFile').live('change', function() {                var filename = $('#selectFile :selected').text();                alert(filename);            });        ");                        return $output;    }        public function Execute()    {        //$_GET['sales_order_list'] = "666, 1256";                AddStylesheet("/css/inventory.css??20121108-1");        AddStylesheet("/css/gantt/gantti.css");                date_default_timezone_set('UTC');        setlocale(LC_ALL, 'en_US');                $BARCODE    = Post('build_barcode'); //20081;                                        // Monitor_COMPLETE_Opal_SI_v1.2        $QUANTITY   = Post('build_qty'); //50;                                              // Total of this we want        $DATE       = (Post('build_date')) ? Post('build_date') : date('2013-01-30');       // Date we want this quantity on                $this->Build_Quantity   = $QUANTITY;        $this->Build_Date       = $DATE;        $this->Build_Barcode    = $BARCODE;                $BOM_ARR = null;        $good_bom = false;                        switch (Get('action')) {            case 'xls':                $this->Use_Fake_Inventory_Available = Post('cb_fakeinventory');                $BOM        = Post('list');                                                     // get the raw BOM file                $BOM_ARR    = $this->ConvertBOMFromFormInputXLSToArray($BOM);                   // convery raw file to array of lines                $BOM_ARR    = $this->ModifyBOMArrayForQuantity($BOM, $this->Build_Quantity);    // modify the BOM for proper quantity to produce                                #$this->EchoVar('BOM_ARR', $BOM_ARR);                #exit();            break;            case 'table':                                $this->Use_Fake_Inventory_Available = Post('cb_fakeinventory');                                $build_qty_opal                 = Post('build_qty_opal');                $build_qty_emerald              = Post('build_qty_emerald');                $build_qty_sapphire             = Post('build_qty_sapphire');                $build_qty_nextgen_opal         = Post('build_qty_nextgen_opal');                $build_qty_nextgen_emerald      = Post('build_qty_nextgen_emerald');                $build_qty_nextgen_sapphire     = Post('build_qty_nextgen_sapphire');                $build_qty_ap                   = Post('build_qty_ap');                $build_qty_dock_1               = Post('build_qty_dock_1');                $build_qty_dock_2               = Post('build_qty_dock_2');                $build_qty_dock_3               = Post('build_qty_dock_3');                $build_qty_dock_4               = Post('build_qty_dock_4');                $build_qty_dock_5               = Post('build_qty_dock_5');                $build_qty_dock_6               = Post('build_qty_dock_6');                $build_qty_dock_7               = Post('build_qty_dock_7');                $build_qty_kit                  = Post('build_qty_kit');                $build_qty_syncbox              = Post('build_qty_syncbox');                                $this->EchoVar('build_qty_ap', $build_qty_ap);                                $BOM_ARR = array();                $BOM_ARR = ($build_qty_opal > 0)                ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(20081)), $build_qty_opal)) : $BOM_ARR;                $BOM_ARR = ($build_qty_emerald > 0)             ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(20101)), $build_qty_emerald)) : $BOM_ARR;                $BOM_ARR = ($build_qty_sapphire > 0)            ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(20102)), $build_qty_sapphire)) : $BOM_ARR;                $BOM_ARR = ($build_qty_nextgen_opal > 0)        ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(20103)), $build_qty_nextgen_opal)) : $BOM_ARR;                $BOM_ARR = ($build_qty_nextgen_emerald > 0)     ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(20104)), $build_qty_nextgen_emerald)) : $BOM_ARR;                $BOM_ARR = ($build_qty_nextgen_sapphire > 0)    ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(20105)), $build_qty_nextgen_sapphire)) : $BOM_ARR;                $BOM_ARR = ($build_qty_ap > 0)                  ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(10110)), $build_qty_ap)) : $BOM_ARR;                $BOM_ARR = ($build_qty_dock_1 > 0)              ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(10085)), $build_qty_dock_1)) : $BOM_ARR;                $BOM_ARR = ($build_qty_dock_2 > 0)              ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(30329)), $build_qty_dock_2)) : $BOM_ARR;                $BOM_ARR = ($build_qty_dock_3 > 0)              ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(10086)), $build_qty_dock_3)) : $BOM_ARR;                $BOM_ARR = ($build_qty_dock_4 > 0)              ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(30297)), $build_qty_dock_4)) : $BOM_ARR;                $BOM_ARR = ($build_qty_dock_5 > 0)              ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(30330)), $build_qty_dock_5)) : $BOM_ARR;                $BOM_ARR = ($build_qty_dock_6 > 0)              ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(10087)), $build_qty_dock_6)) : $BOM_ARR;                $BOM_ARR = ($build_qty_dock_7 > 0)              ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(30331)), $build_qty_dock_7)) : $BOM_ARR;                $BOM_ARR = ($build_qty_kit > 0)                 ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode('kit')), $build_qty_kit)) : $BOM_ARR;                $BOM_ARR = ($build_qty_syncbox > 0)             ? array_merge($BOM_ARR, $this->ModifyBOMArrayForQuantity($this->ConvertBOMFromFormInputXLSToArray($this->GetBOMFromBarcode(20052)), $build_qty_syncbox)) : $BOM_ARR;                                $this->Multi_BOM = true;                                //$this->EchoVar('BOM_ARRBOM_ARR', $BOM_ARR);            break;            case 'reprocess':                //$BOM        = $this->GetBOMFromSubmitTable();            break;            default:                #$BOM        = $this->GetBOMFromBarcode($this->Build_Barcode);       // get the raw BOM file                #$BOM_ARR    = $this->ConvertBOMFromTextFileToArray($BOM);           // convery raw file to array of lines            break;        }                if ($BOM_ARR) {            // ===== DO VARIOUS ARRAY PROCESSING =====            $this->BOM_Array        = $this->ConvertBOMArrayToParts($BOM_ARR);                                                          // convert array of lines to detailed array            $good_bom               = ($this->BOM_Array != false) ? true : false;                        //$this->EchoVar('this->BOM_Array', $this->BOM_Array);                        if ($good_bom) {                $this->Inventory_Available_Array = $this->GetInventoryAvailable();                                                          // get the inventory available in the system                $this->Needed_Array     = $this->ProcessBOMInventoryNeeded_Extended($this->BOM_Array);                                      // calculate actual inventory quantity needed                $this->Order_Array      = $this->ProcessBOMInventoryOrder($this->Needed_Array, $this->Build_Date);                          // calculate how much inventory to order                $this->Gantt_Array      = $this->ConvertBOMToGantti($this->Needed_Array);                                                   // format array for Gantt chart            }        }                        // ===== OUTPUT VARIOUS FORM ITEMS =====            if ($this->Show_XLS_Form) {                 echo $this->OutputForm();            }                        if ($this->Show_Edit_Table && $good_bom) {                 echo $this->ConvertBOMToEditableTable($this->BOM_Array);                        // create editable table (modifying lead times)            }                        if ($this->Show_Summary && $good_bom) {                 if ($this->Use_Fake_Inventory_Available) {                    echo "<br /><br /><div style='font-size:18px; color:red; font-weight:bold;'>FAKE INVENTORY QUANTITY BEING USED</div>";                }                echo "<br /><br />" . $this->ConvertBOMToSummary_Extended();                    // create summary of BOM data                //echo "<br /><br />" . $this->ConvertBOMToSummary($this->Needed_Array);          // create summary of BOM data            }                                                if ($this->Show_Gantt && $good_bom) {                 //$this->Gantt_Array = $this->FAKE_GetGanttiData();                echo $this->OutputGantt($this->Gantt_Array);                                    // create Gantt output            }                                    if ($this->Show_Google_Visualization && $good_bom) {                 echo $this->OutputGoogleVisualization($this->BOM_Array);                                    // create Gantt output            }                                    // ========== OUTPUT ARRAYS FOR DEBUG ==========            if ($this->Show_Inventory_Array) {                echo "<div style='border:5px solid orange; margin:10px;'>";                $this->EchoVar('Inventory_Available_Array', $this->Inventory_Available_Array);                echo "</div>";            }                        if ($this->Show_Bom_Array) {                echo "<div style='border:5px solid blue; margin:10px;'>";                $this->EchoVar('BOM_Array', $this->BOM_Array);                echo "</div>";            }                        if ($this->Show_Needed_Array) {                echo "<div style='border:5px solid green; margin:10px;'>";                $this->EchoVar('Needed_Array', $this->Needed_Array);                echo "</div>";            }                        if ($this->Show_Order_Array) {                echo "<div style='border:5px solid red; margin:10px;'>";                $this->EchoVar('Order_Array', $this->Order_Array);                echo "</div>";            }            }            public function OutputGoogleVisualization($ARR)    {        //<script type="text/javascript" src="https://www.google.com/jsapi"></script>    //<script type="text/javascript" src="querywrapper.js"></script>        AddScriptInclude("https://www.google.com/jsapi");                    $output = "";        $output .= "var data = google.visualization.arrayToDataTable([";        $output .= "['Name', 'Manager', 'Tooltip'],";        $output .= "['BUILD RECORD', null, null],";        /*        var data = google.visualization.arrayToDataTable([";        ['Name',                                                                 'Manager', 'Tooltip'],        ['Mike',                                                                 null,      'The President'],        [{v: 'Jim', f: 'Jim<br/><font color="red"><i>Vice President<i></font>'}, 'Mike',    null],        ['Alice',                                                                'Mike',    null],        ['Bob',                                                                  'Jim',     'Bob Sponge'],        ['Carol',                                                                'Bob',     null]        ]);        */                /*        var data = google.visualization.arrayToDataTable([        ['Name', 'Manager', 'Tooltip'],        ['{v: '20081-1', f: '20081'}', 'null', 'Tooltip Here'],        ['{v: '30298-2', f: '30298'}', '20081-1', 'Tooltip Here'],        ['{v: '20088-3', f: '20088'}', '30298-2', 'Tooltip Here'],['{v: '30298-4', f: '30298'}', '20088-3', 'Tooltip Here'],['{v: '10060-5', f: '10060'}', '30298-4', 'Tooltip Here'],['{v: '10053-6', f: '10053'}', '30298-4', 'Tooltip Here'],['{v: '30298-7', f: '30298'}', '10053-6', 'Tooltip Here'],['{v: '10068-8', f: '10068'}', '30298-7', 'Tooltip Here'],['{v: '30298-9', f: '30298'}', '10068-8', 'Tooltip Here'],['{v: '10076-10', f: '10076'}', '30298-9', 'Tooltip Here'],['{v: '10077-11', f: '10077'}', '30298-9', 'Tooltip Here'],['{v: '10078-12', f: '10078'}', '30298-9', 'Tooltip Here'],['{v: '10176-13', f: '10176'}', '30298-9', 'Tooltip Here'],['{v: '30021-14', f: '30021'}', '30298-9', 'Tooltip Here'],['{v: '90002-15', f: '90002'}', '30021-14', 'Tooltip Here'],['{v: '90003-16', f: '90003'}', '90002-15', 'Tooltip Here'],['{v: '90001-17', f: '90001'}', '90003-16', 'Tooltip Here'],['{v: '10079-18', f: '10079'}', '90001-17', 'Tooltip Here'],['{v: '30298-19', f: '30298'}', '10079-18', 'Tooltip Here'],['{v: '30308-20', f: '30308'}', '30298-19', 'Tooltip Here'],['{v: '30305-21', f: '30305'}', '30298-7', 'Tooltip Here'],['{v: '30298-22', f: '30298'}', '30305-21', 'Tooltip Here'],['{v: '10052-23', f: '10052'}', '30298-22', 'Tooltip Here'],['{v: '10056-24', f: '10056'}', '30298-22', 'Tooltip Here'],['{v: '10059-25', f: '10059'}', '30298-4', 'Tooltip Here'],['{v: '30298-26', f: '30298'}', '10059-25', 'Tooltip Here'],['{v: '10058-27', f: '10058'}', '30298-26', 'Tooltip Here'],['{v: '10057-28', f: '10057'}', '30298-26', 'Tooltip Here'],['{v: '10062-29', f: '10062'}', '30298-4', 'Tooltip Here'],['{v: '90002-30', f: '90002'}', '10062-29', 'Tooltip Here'],['{v: '90003-31', f: '90003'}', '90002-30', 'Tooltip Here'],['{v: '90001-32', f: '90001'}', '90003-31', 'Tooltip Here'],['{v: '10061-33', f: '10061'}', '90001-32', 'Tooltip Here']]);        */                $first          = true;        $count          = 0;        $level_last     = 0;        $level_cur      = 0;        $uid_last       = '';                $parent_array = array();        // holds what the parent item is at any indent level --- array(indent_level => uid)                foreach ($ARR as $record) {                        $count++;            $level_cur  = $record['indent'];            $barcode    = $record['barcode'];            $sku        = $record['sku'];            $qty        = $record['quantity'];            $uid        = $barcode . '-' . $count;      // create a UID for this record - in case barcode used multiple times            $parent_array[$level_cur] = $uid;           // store this as the most current parent level                        if ($level_cur > $level_last) {                // this is subpart of a parent - find the parent                $manager = $parent_array[$level_cur-1];            }                        $name_var           = "{$uid}";            $name_description   = "{$barcode} (qty: {$qty})<br/>{$sku}";                        $name               = "{v: '{$name_var}', f: '{$name_description}'}";            $manager            = (isset($manager)) ? "'{$manager}'" : "null";            $manager            = ($first) ? "'BUILD RECORD'" : $manager;            $tooltip            = "null"; //"'Tooltip Here'";                        $output .= "[{$name}, {$manager}, {$tooltip}],";            $first = false;        }                $output = substr($output, 0, -1);       // trim off the trailing comma        $output .= "]);";                       // close the javascript array                                $script = "";        $script .= "google.load('visualization', '1', {packages: ['orgchart']});";        $script .= "function drawVisualization() {";        $script .= $output;        $script .= "new google.visualization.OrgChart(document.getElementById('visualization')).draw(data, {allowHtml: true});";        $script .= "}";        //$script .= "google.setOnLoadCallback(drawVisualization);";        AddScript($script);                echo '<div id="visualization" style="width: 700px; height: 500px; overflow:scroll; "></div>';        echo "<div style='border:3px solid blue; padding:10px; margin:10px;'>";        echo $output;        echo "</div>";        AddScriptOnReady("drawVisualization();");                /*        echo "            <script type='text/javascript'>                alert('hello test');                drawVisualization();            </script>";        */                        //$this->EchoVar('ARR', $ARR);    }                public function OutputForm()    {        $onclick 	        = ''; //"submitSalesOrderNumbers('list')";        $id 		        = 'btn_barcode';        $name 		        = 'btn_barcode';        $btn_submit         = MakeButton('positive', 'Submit Barcodes', '', '', $id, $onclick, 'submit', $name);                        $onclick 	        = ''; //"submitSalesOrderNumbers('list')";        $id 		        = 'btn_table';        $name 		        = 'btn_table';        $btn_submit_table   = MakeButton('positive', 'Submit Table', '', '', $id, $onclick, 'submit', $name);                       // ----- output the form        // ---- repopulate the form        //$link = $this->getPageURL();        $link   = Server('SCRIPT_URI');                $value                      = Post('list');        $checked_cb_fakeinventory   = (Post('cb_fakeinventory')) ? "checked" : '';        $value_build_qty            = Post('build_qty');        $value_build_date           = Post('build_date');        $value_build_barcode        = Post('build_barcode');                $build_qty_opal                 = Post('build_qty_opal');        $build_qty_emerald              = Post('build_qty_emerald');        $build_qty_sapphire             = Post('build_qty_sapphire');        $build_qty_nextgen_opal         = Post('build_qty_nextgen_opal');        $build_qty_nextgen_emerald      = Post('build_qty_nextgen_emerald');        $build_qty_nextgen_sapphire     = Post('build_qty_nextgen_sapphire');        $build_qty_ap                   = Post('build_qty_ap');        $build_qty_dock_1               = Post('build_qty_dock_1');        $build_qty_dock_2               = Post('build_qty_dock_2');        $build_qty_dock_3               = Post('build_qty_dock_3');        $build_qty_dock_4               = Post('build_qty_dock_4');        $build_qty_dock_5               = Post('build_qty_dock_5');        $build_qty_dock_6               = Post('build_qty_dock_6');        $build_qty_dock_7               = Post('build_qty_dock_7');        $build_qty_kit                  = Post('build_qty_kit');        $build_qty_syncbox              = Post('build_qty_syncbox');                                        $file_selectbox = $this->ShowFilesInDir();                $form_stored_bom = '        <form action="'.$link.';action=table" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        <div class="shadow" style="border:1px dashed blue; padding:5px; background-color:#efefef;">                        <table><tr><td width="50%" valign="top">                        <br class="formtitlebreak"><div class="formtitle"># of Kits:</div>            <div class="forminfo"><input id="build_qty_kit" name="build_qty_kit" class="formitem" type="text" value="'.$build_qty_kit.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Opal:</div>            <div class="forminfo"><input id="build_qty_opal" name="build_qty_opal" class="formitem" type="text" value="'.$build_qty_opal.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Emerald:</div>            <div class="forminfo"><input id="build_qty_emerald" name="build_qty_emerald" class="formitem" type="text" value="'.$build_qty_emerald.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Sapphire:</div>            <div class="forminfo"><input id="build_qty_sapphire" name="build_qty_sapphire" class="formitem" type="text" value="'.$build_qty_sapphire.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty N/G Opal:</div>            <div class="forminfo"><input id="build_qty_nextgen_opal" name="build_qty_nextgen_opal" class="formitem" type="text" value="'.$build_qty_nextgen_opal.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty N/G Emerald:</div>            <div class="forminfo"><input id="build_qty_nextgen_emerald" name="build_qty_nextgen_emerald" class="formitem" type="text" value="'.$build_qty_nextgen_emerald.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty N/G Sapphire:</div>            <div class="forminfo"><input id="build_qty_nextgen_sapphire" name="build_qty_nextgen_sapphire" class="formitem" type="text" value="'.$build_qty_nextgen_sapphire.'"></div>                        <br class="formtitlebreak"><div class="formtitle">AP:</div>            <div class="forminfo"><input id="build_qty_ap" name="build_qty_ap" class="formitem" type="text" value="'.$build_qty_ap.'"></div>                        <br class="formtitlebreak"><div class="formtitle">SyncBox:</div>            <div class="forminfo"><input id="build_qty_syncbox" name="build_qty_syncbox" class="formitem" type="text" value="'.$build_qty_syncbox.'"></div>                        </td><td width="50%" valign="top">                        <br class="formtitlebreak"><div class="formtitle">Qty Dock (x1) Metal [10085]:</div>            <div class="forminfo"><input id="build_qty_dock_1" name="build_qty_dock_1" class="formitem" type="text" value="'.$build_qty_dock_1.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Dock (x2) Metal [30329]:</div>            <div class="forminfo"><input id="build_qty_dock_2" name="build_qty_dock_2" class="formitem" type="text" value="'.$build_qty_dock_2.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Dock (x3) Metal [10086]:</div>            <div class="forminfo"><input id="build_qty_dock_3" name="build_qty_dock_3" class="formitem" type="text" value="'.$build_qty_dock_3.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Dock (x4) Metal [30297]:</div>            <div class="forminfo"><input id="build_qty_dock_4" name="build_qty_dock_4" class="formitem" type="text" value="'.$build_qty_dock_4.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Dock (x5) Metal [30330]:</div>            <div class="forminfo"><input id="build_qty_dock_5" name="build_qty_dock_5" class="formitem" type="text" value="'.$build_qty_dock_5.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Dock (x6) Metal [10087]:</div>            <div class="forminfo"><input id="build_qty_dock_6" name="build_qty_dock_6" class="formitem" type="text" value="'.$build_qty_dock_6.'"></div>                        <br class="formtitlebreak"><div class="formtitle">Qty Dock (x7) Metal [30331]:</div>            <div class="forminfo"><input id="build_qty_dock_7" name="build_qty_dock_7" class="formitem" type="text" value="'.$build_qty_dock_7.'"></div>                        </td></tr></table>                        <br class="formtitlebreak">            <div class="formtitle">Fake Inventory QTY:</div>            <div class="forminfo">                <input id="cb_fakeinventory" class="formitem" name="cb_fakeinventory" value="1" type="checkbox" '.$checked_cb_fakeinventory.'>            </div>                        <br class="formtitlebreak">            <div class="formtitle"></div>            <div class="forminfo">                '.$btn_submit_table.' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            </div>            <div style="clear:both;"></div>                    </div>        </form>        ';                                $form_excel_bom ='        <br /><br />                        <form action="'.$link.';action=xls" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        <div class="shadow" style="border:1px dashed blue; padding:5px; background-color:#efefef;">                                    <br class="formtitlebreak">            <div class="formtitle">BOM FILES:</div>            <div class="forminfo">                '.$file_selectbox.'            </div>                                                            <br class="formtitlebreak">            <div class="formtitle">Barcode to Build:</div>            <div class="forminfo">                <input id="build_barcode" class="formitem" name="build_barcode" type="text" value="'.$value_build_barcode.'">            </div>                        <br class="formtitlebreak">            <div class="formtitle">QTY to Build:</div>            <div class="forminfo">                <input id="build_qty" class="formitem" name="build_qty" type="text" value="'.$value_build_qty.'">            </div>                        <br class="formtitlebreak">            <div class="formtitle">Build By Date:</div>            <div class="forminfo">                <input id="build_date" class="formitem" name="build_date" type="text" value="'.$value_build_date.'">            </div>                                                <br class="formtitlebreak">            <div class="formtitle">BOM (XLS):</div>            <div class="forminfo">                Copy and paste Excel file into this box - NO HEADERS                <br />                <textarea autocomplete="off" alt="Search" id="list" class="formitem ui-autocomplete-input" name="list" size="50" rows="4">'. $value .'</textarea>            </div>            <br class="formtitlebreak">            <div class="formtitle">Fake Inventory QTY:</div>            <div class="forminfo">                <input id="cb_fakeinventory" class="formitem" name="cb_fakeinventory" value="1" type="checkbox" '.$checked_cb_fakeinventory.'>            </div>                        <br class="formtitlebreak">            <div class="formtitle"></div>            <div class="forminfo">                '.$btn_submit.' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            </div>            <div style="clear:both;"></div>                    </div>        </form>';                        $output = '';        $output = ($this->Show_Input_Form_Stored_Bom) ? $output . $form_stored_bom : $output;        $output = ($this->Show_Input_Form_Manual_Bom) ? $output . $form_excel_bom : $output;                        return $output;    }        public function OutputGantt($DATA)    {        $gantti = new Gantt_Gantti($DATA, array(            'title'      => 'Inventory<br />Order',            'cellwidth'  => 25,            'cellheight' => 35,            'today'      => true        ));                return $gantti;    }            public function ConvertBOMFromFormInputXLSToArray($BOM)    {        # FUNCTION :: Take form input and convert it to an array of lines - for more processing                if (empty($BOM)) {            echo "<br />ERROR :: ConvertBOMFromFormInputXLSToArray() :: No BOM passed in.";            exit();            return false;        }                        $output     = array();        $lines      = explode($this->Line_Break_Character_XLS, $BOM);                foreach ($lines as $line) {                        $templine       = '';            $part_count     = 0;            $complete       = false;            $line           = str_replace($this->Section_Break_Character_XLS, '~', $line);                      // replace tabs with a better character            $parts          = explode("~", $line);                                                              // explode line ito its parts            foreach ($parts as $part) {                if (!$complete) {                    $part           = trim($part);                                                              // trim the value                    $templine      .= (empty($part) &&  $part != "0") ? $this->Indent_Character : "{$part}|";   // determine if holding real value                    $part_count     = (empty($part) &&  $part != "0") ? $part_count : $part_count+1;            // count how many real values we have (not spaces)                    $complete       = ($part_count == $this->Total_Part_Count) ? true : false;                                        // mark row as complete because we have enough info                }            }                        $checkline = trim($templine);            if (!empty($checkline)) {                $templine      .= $this->Line_Break_Character;                                                  // add ending character                $templine       = str_replace("||*", $this->Line_Break_Character, $templine);                   // last little cleanup                $output[]       = $templine;                                                                    // store value in array            }                        //echo $templine . "|*". "<br />";                                }                #$this->EchoVar('output', $output);        #exit();                return $output;    }        public function ConvertBOMFromTextFileToArray($BOM)    {        # FUNCTION :: Take textfile input and convert it to an array of lines - for more processing                if (!$BOM) {            echo "<br />ERROR :: ConvertBOMFromTextFileToArray() :: No BOM passed in.";            exit();            return false;        }                        $output = array();                $bom_parts = explode($this->Line_Break_Character, $BOM);        foreach ($bom_parts as $id => $bom_line) {            if (!empty($bom_line)) {                $output[] = $bom_line;            }        }                //$this->EchoVar('output', $output);        return $output;    }        public function ConvertBOMArrayToParts($ARR)    {        # FUNCTION :: Convert a line-by-line BOM array into a more detailed array of parts - for more processing                // ----- check that an array was actually passed in        if (!is_array($ARR)) {            echo "<br />ERROR :: ConvertBOMArrayToParts() :: BOM array not passed in - or not array.";            exit();            return false;        }                $output = array();                $count = 0;        foreach ($ARR as $line) {                        $bom_line_parts     = explode($this->Section_Break_Character, $line);                        // ----- get initial values            $indent             = $this->ArrIndex($bom_line_parts, 0);            $line_quantity      = $this->ArrIndex($bom_line_parts, 1);            $line_orderable     = $this->ArrIndex($bom_line_parts, 2);      // must be 0 or 1            $line_leadtime      = $this->ArrIndex($bom_line_parts, 3);            $line_sku           = $this->ArrIndex($bom_line_parts, 4);                                    // ----- post-process parts            $indent_count       = substr_count ($indent, $this->Indent_Character);             $line_barcode       = trim($this->ArrIndex($bom_line_parts, 0));            $line_leadtime      = ($line_leadtime) ? $line_leadtime : '0 days';            $label              = "[{$line_barcode}] {$line_sku}";                        // ----- sanity-check that data seems to be valid and we should continue processing            $passed         = true;            $passed_error   = '';            /*            if (!is_numeric($indent_count) || empty($indent_count))    {                $passed = false;                $passed_error .= "<li>indent_count failure</li>";            }            */            if (!is_numeric($line_barcode) || empty($line_barcode))    {                $passed = false;                $passed_error .= "<li>line_barcode failure</li>";            }            if (!is_numeric($line_orderable))  {                $passed = false;                $passed_error .= "<li>line_orderable failure</li>";            }            if (!is_numeric($line_quantity))   {                $passed = false;                $passed_error .= "<li>line_quantity failure</li>";            }            if (is_numeric($line_sku))   {                $passed = false;                $passed_error .= "<li>line_sku failure</li>";            }                        if (!$passed) {                echo "<div style='border:5px solid red; padding:10px; color:red; font-size:16px;'>";                echo "ERROR :: ConvertBOMArrayToParts() :: BOM array does not appear to conform.";                echo "<br /><br />Line: {$line}";                echo "<ul>$passed_error</ul>";                echo "</div><br /><br />";                return false;            }                        // ----- store the parts in array            $output[$count] = array(                'indent'        => $indent_count,                'barcode'       => $line_barcode,                'sku'           => $line_sku,                'quantity'      => $line_quantity,                'leadtime'      => $line_leadtime,                'date_needed'   => '',                'orderable'     => $line_orderable,            );                        $count++;        }                return $output;    }                            public function GetInventoryAvailable()    {        # FUNCTION :: Get all available inventory counts - all barcodes in system        $output = array();                $records = $this->GetInventoryQuantityAvailableAll();        if ($records) {            foreach ($records as $record) {                $output[$record['barcode']] = array(                        'stock'     => $record['INVENTORY_AVAILABLE'],                        'hold'      => 0,                        'available' => $record['INVENTORY_AVAILABLE'],                    );            }        }                //$this->EchoVar('output', $output);        return $output;    }            public function GetBOMFromSubmitTable()    {        # FUNCTION :: Processes the submitted table and form new array to be processed        echo ArrayToStr($_POST);        echo ArrayToStr($_GET);                $bom = $this->GetBOMFromBarcode($this->Build_Barcode);        return $bom;    }        public function ConvertBOMToEditableTable($BOM)    {        # FUNCTION :: Convert the BOM to a table of editable fields                $onclick 	        = ''; //"submitSalesOrderNumbers('sales_order_list')";        $btn_submit         = MakeButton('positive', 'Update Page', '', '', 'btn_barcode_1', $onclick, 'submit', 'btn_barcode_1');                $link   = Server('SCRIPT_URI');        $output = '        <form action="'.$link.';action=reprocess" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        ';                $output .= "<table border='1'>";        $output .= "            <tr>                <th>Barcode</th>                <th>Quantity</th>                <th>SKU</th>                <th>Lead Time</th>            </tr>        ";                $row = 0;        foreach ($BOM as $id => $record) {                        $indent_count       = $record['indent'];            $line_barcode       = $record['barcode'];            $line_quantity      = $record['quantity'];            $line_sku           = $record['sku'];            $line_leadtime      = $record['leadtime'];                        $label              = "[{$line_barcode}] {$line_sku}";            $indent             = $indent_count + strlen($label);            $label              = str_replace(" ", "&nbsp;&nbsp;&nbsp;&nbsp;", str_pad($label, $indent, " ", STR_PAD_LEFT));                        $row++;            //$input_leadtime     = "<input id='row{$row}_leadtime' value='{$line_leadtime}' size='10'>";                        $output .= "                <tr>                    <td>    <input name='row{$row}_barcode'     id='row{$row}_barcode'  value='{$line_barcode}' size='10'>    </td>                    <td>    <input name='row{$row}_quantity'    id='row{$row}_quantity' value='{$line_quantity}' size='4'>  </td>                    <td>    <input name='row{$row}_sku'         id='row{$row}_sku'      value='{$line_sku}' size='50'>            </td>                    <td>    <input name='row{$row}_leadtime'    id='row{$row}_leadtime' value='{$line_leadtime}' size='10'>  </td>                </tr>            ";                }                $output .= "</table>";        $output .= "            <input name='rowcount' id='rowcount' value='{$row}' size='10'>            <br />{$btn_submit}<br />            </form>            <br /><br />        ";                        return $output;    }            public function ConvertBOMToGantti($ARR)    {        //echo ArrayToStr($ARR);                $data = array();                foreach ($ARR as $barcode => $record) {            $label = "[{$barcode}] {$record['sku']}";            foreach ($record['order_details'] as $id => $line) {                                                $class = ($line['line_quantity_to_order'] > 0) ? 'urgent' : '';                                $data[] = array(                    'label' => $label,                    'start' => $line['date_order'],                     'end'   => $line['date_needed'],                    'class' => $class,   //'important', 'urgent'                );            }        }                return $data;    }        public function ConvertBOMToSummary($ARR)    {        # FUNCTION :: Create an overall summary and inventory table for this BOM                //$this->EchoVar('ConvertBOMToSummary() :: ARR', $ARR);                        $this->Build_Quantity = ($this->Build_Quantity) ? $this->Build_Quantity : 1;                if ($this->Build_Barcode) {            $record = $this->GetInventoryRecordFromBarcode($this->Build_Barcode);                        $output = "                <div style='font-size:14px;'>                    <div><b>ITEM TO BE BUILT</b></div>                    <div><b>Barcode:</b> {$record['barcode']}</div>                    <div><b>SKU:</b> {$record['retailer_code']}</div>                    <div><b>Description:</b> {$record['description']}</div>                    <br /><br />                    <div><b>BUILD DETAILS</b></div>                    <div><b>QTY:</b> {$this->Build_Quantity}</div>                    <div><b>Build By Date:</b> {$this->Build_Date}</div>                </div>                <br /><br />            ";        } else {            $output = "                <div style='font-size:14px;'>                    <div><b>ITEM TO BE BUILT</b></div>                    NOT SPECIFIED                    </div>                <br /><br />            ";        }                                $cols = 12;        $output .= "<table border='1' id='jsonTable'>";        $output .= "            <tr>                <th colspan='{$cols}'><b>INVENTORY ITEMS USED IN THIS BUILD</b></th>            </tr>            <tr>                <th>&nbsp;</th>                <th>Barcode</th>                <th>SKU</th>                                <th>Quantity<br />Each</th>                <th>Total for Build</th>                                <th>Available Stock</th>                <th>Available Parent Stock</th>                                <th>Total to Order</th>                <th>Stock After Build</th>                <th>Earliest<br />Date Needed</th>                <th>Earliest<br />Date to Order</th>                <th>Lead Time</th>            </tr>        ";                        $count = 0;        foreach ($ARR as $barcode => $record) {                                                $count++;            $skip               = in_array($barcode, $this->Inventory_Available_Skip_Array);           // do we process this line for inventory levels and other things            $indent             = '';            $label              = "{$indent}[{$barcode}] {$record['sku']}";            $barcode            = "{$indent}[{$barcode}]";            $sku                = $record['sku'];            $post_build_stock   = $record['available_stock'] + $record['total_to_order'] - $record['total_for_build'];            $post_build_stock   = ($post_build_stock < 0) ? 0 : $post_build_stock;            $orderable          = $record['orderable'];            $color              = ($record['total_to_order'] > 0) ? "pink" : "";            $total_to_order     = $record['total_to_order'];            $qty_each           = ($record['total_for_build'] / $this->Build_Quantity);                        $qty_each           = ($this->Multi_BOM) ? '-' : $qty_each;                        if (!$orderable) {                $color              = ($record['total_to_order'] > 0) ? "white" : $color;                $total_to_order     = 'no-order';                $date_needed        = 'no-order';                $date_order         = 'no-order';                $lead_time          = 'no-order';            }                                    // ----- make calculations for ordering            if ($orderable) {                $date_needed    = '3000-00-00';                $date_order     = '3000-00-00';                $lead_time      = 'n/a';                                // ----- determine the earliest order and needed time                foreach ($record['order_details'] as $id => $line) {                                    $date_needed        = (($line['date_needed'] != '0000-00-00') && ($line['date_needed'] < $date_needed))     ? $line['date_needed'] : $date_needed;                    $date_order         = (($line['date_order'] != '0000-00-00') && ($line['date_order'] < $date_order))        ? $line['date_order'] : $date_order;                    $lead_time          = $line['lead_time'];                                        if (false) {                    $output .= "                        <tr style='background-color:{$color};'>                            <td>{$count}.</td>                            <td>{$barcode}</td>                            <td>{$sku}</td>                                                        <td>{$qty_each}</td>                            <td>{$record['total_for_build']}</td>                                                        <td>{$record['available_stock']}</td>                            <td>{$record['available_parent_stock']}</td>                                                        <td>{$total_to_order}</td>                            <td>{$post_build_stock}</td>                            <td>{$date_needed}</td>                            <td>{$date_order}</td>                            <td>{$lead_time}</td>                        </tr>                    ";                    }                }            }                                    // ----- create the output            //$skip = true;            if (!$skip) {                $output .= "                    <tr style='background-color:{$color};'>                        <td>{$count}.</td>                        <td>{$barcode}</td>                        <td>{$sku}</td>                                                <td>{$qty_each}</td>                        <td>{$record['total_for_build']}</td>                                                <td>{$record['available_stock']}</td>                        <td>{$record['available_parent_stock']}</td>                                                <td>{$total_to_order}</td>                        <td>{$post_build_stock}</td>                        <td>{$date_needed}</td>                        <td>{$date_order}</td>                        <td>{$lead_time}</td>                    </tr>                ";            } // end skip check                                } // end foreach                $output .= "            <tr>                <td colspan='{$cols}'>                <ul style='padding:5px;'>                <li>If an assembly item is in stock - this table will not show the parts that go into it.</li>                <li>'No-order' items can only be created by assembling parts - they cannot be directly ordered from a vendor.</li>                <li>Items shaded in red need to be ordered.</li>                </ul>                </td>            </tr>";                $output .= "</table>";                        return $output;    }                public function ConvertBOMToSummary_Extended()    {        # FUNCTION :: Create an overall summary and inventory table for this BOM                //$this->EchoVar('ConvertBOMToSummary() :: ARR', $ARR);                        $arr_barcode_qty_remaining = array();   // will hold how much raw inventory remains as we process each line                        $this->Build_Quantity = ($this->Build_Quantity) ? $this->Build_Quantity : 1;                if ($this->Build_Barcode) {            $record = $this->GetInventoryRecordFromBarcode($this->Build_Barcode);                        $output = "                <div style='font-size:14px;'>                    <div><b>ITEM TO BE BUILT</b></div>                    <div><b>Barcode:</b> {$record['barcode']}</div>                    <div><b>SKU:</b> {$record['retailer_code']}</div>                    <div><b>Description:</b> {$record['description']}</div>                    <br /><br />                    <div><b>BUILD DETAILS</b></div>                    <div><b>QTY:</b> {$this->Build_Quantity}</div>                    <div><b>Build By Date:</b> {$this->Build_Date}</div>                </div>                <br /><br />            ";        } else {            $output = "                <div style='font-size:14px;'>                    <div><b>ITEM TO BE BUILT</b></div>                    NOT SPECIFIED                    </div>                <br /><br />            ";        }                /*        <th>Available Raw Stock</th>        <th>Built Parent Stock</th>        <th>Total Stock</th>        */                $bom_header_row = "            <tr>                <th>&nbsp;</th>                <th>Barcode</th>                <th>SKU</th>                <th>Quantity Per<br />Build Item</th>                <th>Total Needed<br />for Build</th>                <th colspan='5'>STOCK<br />Raw + Parent = Total</th>                <th>Total<br />Build/Order</th>                <th>Orderable</th>                <th colspan='5'>Stock After Build<br />Raw + Parent = Total</th>                <th>Earliest Date<br />Needed</th>                <th>Earliest Date<br />to Order</th>                <th>Lead Time</th>            </tr>";                        $cols = 22;        $output .= "<table border='1' id='jsonTable_nowidth'>";        $output .= "            <tr>                <th colspan='{$cols}'><b>SUMMARY OF BOM(s)</b></th>            </tr>        ";                        $count = 0;                //$this->EchoVar('this->BOM_Array', $this->BOM_Array);        //$this->EchoVar('this->Needed_Array', $this->Needed_Array);                        foreach ($this->BOM_Array as $id => $record_bom) {            /*            [55] => Array            (                [indent] => 3                [barcode] => 30298                [sku] => Labor_1_Minute_Unskilled                [quantity] => 0                [leadtime] => 1 day                [date_needed] =>                 [orderable] => 0            )            */                        $barcode        = $record_bom['barcode'];            $first_row      = ($record_bom['indent'] == 0) ? true : false;                        // ----- start of a new BOM so output header            if ($first_row) {                                // ----- get details about what this BOM is building                $record_info = $this->GetInventoryRecordFromBarcode($barcode);                $info = "                    <div style='font-size:14px;'>                        <div><b>ITEM TO BE BUILT</b></div>                        <div><b>Barcode:</b> {$record_info['barcode']}</div>                        <div><b>SKU:</b> {$record_info['retailer_code']}</div>                        <div><b>Description:</b> {$record_info['description']}</div>                        <div><b>QTY:</b> {$record_bom['quantity']}</div>                        <div><b>Build By Date:</b> {$this->Build_Date}</div>                    </div>                ";                $output .= "<tr><th colspan='{$cols}'><br />{$info}</th></tr>";                $output .= $bom_header_row;            }                        $count++;                        $pad = '';            $loops = $record_bom['indent'];            for ($y=1; $y<=$loops; $y++) {                $pad .= '~~~~~~';                                  // horizontal space                $pad .= '';                                    // vertical line                $pad = ($y == $loops) ? $pad . '^@' : $pad;      // right arrow            }                        $label_barcode      = "{$pad}{$barcode}";            $label_barcode      = str_replace(array('~', '^', '@'), array('&nbsp;', '|', '&rarr;'), $label_barcode);            $label_sku          = $record_bom['sku'];                                                                                                $record_order           = $this->Needed_Array[$barcode]['order_details'][$id];            $qty_for_build          = $record_order['line_quantity_for_build'];            $qty_raw_stock          = $record_order['line_quantity_available'];            $qty_parent             = $record_order['line_parent_qty'];                                                            // override inventory available with ocal array values            if (isset($arr_barcode_qty_remaining[$barcode])) {                $t_qty  = $arr_barcode_qty_remaining[$barcode]['raw'];                $qty_raw_stock  = ($t_qty > 0) ? $t_qty : $qty_raw_stock;                //$qty_parent     = $arr_barcode_qty_remaining[$barcode]['parent'];     // parent's are unusable at this level            }                        $qty_available_total    = $qty_raw_stock + $qty_parent;            //$qty_available_total    = $record_order['line_total_qty'];            //$qty_to_order           = $record_order['line_quantity_to_order'];                        $qty_to_order           = $qty_for_build - $qty_available_total;            $post_build_stock       = $qty_available_total - $qty_for_build;                        $date_needed            = $record_order['date_needed'];            $date_order             = $record_order['date_order'];            $lead_time              = $record_order['lead_time'];                        $qty_each               = ($first_row) ? 1 : $record_bom['quantity'];       // set first line to 1 or it will show incorrect qty            $qty_raw_stock          = ($qty_raw_stock) ? $qty_raw_stock : 0;            // don't allow blank values            $qty_to_order           = ($qty_to_order < 0) ? '-' : $qty_to_order;        // don't show negative number for order quantity            $post_build_stock       = ($post_build_stock < 0) ? 0 : $post_build_stock;  // don't show negative number for post build                        // take the total inventory needed            // first subtract required from the parent stock eliminates parent stock)            // if any reaminder needs - subtract from raw            // report the remaining parent stock and raw stock                        $remainder          = $qty_for_build - $qty_parent;            $remaining_parent   = ($remainder >= 0) ? 0 : abs($remainder);                        if ($remainder > 0) {                // ----- wasn't enough parent stock to fulfill needs                $remainder      = $qty_raw_stock - $remainder;                $remaining_raw  = ($remainder > 0) ? $remainder : 0;            } else {                // ----- there was enough parent stock to fulfill needs                $remaining_raw  = $qty_raw_stock;            }                        $remaining_total = $remaining_parent + $remaining_raw;                                    // store how much raw inventory will remain in array            $arr_barcode_qty_remaining[$barcode] = array(                'raw'       => $remaining_raw,                'parent'    => $remaining_parent,                'total'     => $remaining_total,            );                                                // output human-readable text for orderable status            if ($record_bom['orderable'] == 1 && $qty_to_order > 0) {                $orderable          = 'YES';                $color              =  'yellow';            } elseif ($record_bom['orderable'] == 0 && $qty_to_order > 0) {                $orderable          = 'NO';                $color              = 'pink';            } else {                $orderable          = '-';                $color              = '';            }                        #if ($record_bom['barcode'] == 30009) {            #    $color              = 'pink';            #}                                                                                                // ----- output the actual line information to the table            $output .= "                <tr style='background-color:{$color};'>                    <td>{$count}.</td>                    <td>{$label_barcode}</td>                    <td>{$label_sku}</td>                                        <td>{$qty_each}</td>                    <td>{$qty_for_build}</td>                                                                                <td style='border-right:01px solid #fff;'>{$qty_raw_stock}</td>                    <td style='border-right:01px solid #fff;'>+</td>                    <td style='border-right:01px solid #fff;'>{$qty_parent}</td>                    <td style='border-right:01px solid #fff;'>=</td>                    <td>{$qty_available_total}</td>                                                            <td>{$qty_to_order}</td>                    <td>{$orderable}</td>                                                                                <td style='border-right:01px solid #fff;'>{$remaining_raw}</td>                    <td style='border-right:01px solid #fff;'>+</td>                    <td style='border-right:01px solid #fff;'>{$remaining_parent}</td>                    <td style='border-right:01px solid #fff;'>=</td>                    <td>{$remaining_total}</td>                                                            <td>{$date_needed}</td>                    <td>{$date_order}</td>                    <td>{$lead_time}</td>                </tr>";                }                // ----- close the table with footer details        $output .= $bom_header_row;        $output .= "            <tr>                <td colspan='{$cols}'>                <ul style='padding:5px;'>                <li>If an assembly item is in stock - this table will not show the parts that go into it.</li>                <li>'No-order' items can only be created by assembling parts - they cannot be directly ordered from a vendor.</li>                <li>Items shaded in red need to be ordered.</li>                </ul>                </td>            </tr>";                $output .= "</table>";                        return $output;    }                    public function GetBOMFromBarcode($BARCODE)    {        # FUNCTION :: Returns a BOM for a given barcode        # Note: Assumes right now only 1 BOM exists for a barcode        # Note: Right now returning fake BOM - needs to be stored in database        # Note: Returned string must not have white space before it                # ISSUE: How do we handle groupings of vendor labor (i.e. we send 100 bat boards out - they return 100)                # BARCODE|QTY|SKU|TIME DELAY (#m #h #d #w)|*                //$ROOT = dirname(__FILE__);                $ROOT           = "/mnt/stor3-wc2-dfw1/482052/webmanager.whhub.com/web/content";        $directory      = "/bomfiles";        $filename       = "{$BARCODE}.txt";        $open           = "{$ROOT}{$directory}/{$filename}";                //$this->EchoVar('open', $open);                $bom            = file_get_contents($open);                /*        $bom = "20081|1|Monitor_COMPLETE_Opal_SI_v1.2|*    10053|1|Monitor_ASSEMBLY_pcb|*        10068|1|Battery_COMPLETE_v2.2|*            30298|10|Labor_1_Minute_Unskilled|1 day|*            10079|1|Battery_Plain_3.7v_450MAH|1 week|*            30021|1|BatteryBoard_ASSEMBLY_v2.1|*                90002|0|Shipping_From_Vendor|2 days|*                90003|0|Labor_At_Vendor|5 days|*                90001|0|Shipping_To_Vendor|2 days|*                10071|1|BatteryBoard_PCB_Tested|*                    30298|5|Labor_1_Minute_Unskilled|1 days|*                    10070|1|BatteryBoard_PCB_Untested|2 weeks|*        10056|1|Monitor_uSDcard_8GB|5 days|*        30305|1|Monitor_pcb_tested|1 day|*    10060|2|Monitor_case_screw_T3xM1.4x3mm-Stainless-SelfTapping|8 weeks|*    10059|1|Monitor_ASSEMBLY_top|1 day|*    10062|1|Monitor_case_bottom_SI|1 day|*        ";        */                        /*        $bom = "20081|1|Monitor_COMPLETE_Opal_SI_v1.2|*    10053|1|Monitor_ASSEMBLY_pcb|*        10068|1|Battery_COMPLETE_v2.2|1 day|*            30298|10|Labor_1_Minute_Unskilled|1 day|*            10079|1|Battery_Plain_3.7v_450MAH|1 week|*            30021|1|BatteryBoard_ASSEMBLY_v2.1|*    10079|1|Battery_Plain_3.7v_450MAH|1 week|*        ";    */            return $bom;    }                public function ProcessBOMInventoryNeeded_Extended($BOM)    {        # FUNCTION :: Determine how much inventory quantity is needed for each barcode in BOM        # Note: This does NOT calculate what needs to be ordered                // ----- check that an array was actually passed in        if (!is_array($BOM)) {            echo "<br />ERROR :: ProcessBOMInventoryNeeded() :: BOM array not passed in - or not array.";            return false;        }                        $QUANTITY               = 1;                            // initialize value        $DATE                   = $this->Build_Date;        $first_line             = true;                         // triggers special first line triggering        $indent_character       = $this->Indent_Character;      // holds the level indentation        $current_indent         = 0;                            // holds the indent level of the line were looking at        $last_indent            = 0;                            // will hold indent level of last row processed        $indent_no_lower_than   = 0;                            // will hold the next indent level to process        $inventory_needed       = array();                      // will hold all needed inventory levels        $last_date              = $this->Build_Date;            // will hold reference date for backing up inventory - initialize to production date        $current_date           = $this->Build_Date;            // will hold reference date for backing up inventory - initialize to production date        $indent_qty_multiplier  = array();                      // will hold multiplication factor for each indent level        $arr_parent_qty         = array();                      // will hold parent quantity of all barcodes (but not qty of a raw barcode itself)        $arr_barcode_processed  = array();                      // will hold what barcodes in BOM we've processed already (used for parent quantities)                        /*        $this->EchoVar('BOM', $BOM);        // Feed this bom into the assembly_explode function to determine the raw inventory items        // Then         // LOOP THORUGH BOM AND BREAK INVENTORY DOWN TO RAW PARTS        // Used to determine parent inventory        $OBJ_EXPLODE = new Inventory_AssemblyExplode();        foreach ($BOM as $id => $record) {                        $assembly = $OBJ_EXPLODE->CheckIfAssembly($record['barcode']);            if ($assembly) {                            $this->EchoVar('BARCODE', $record['barcode']);                $OBJ_EXPLODE->Barcode = $record['barcode'];                $OBJ_EXPLODE->Execute();                $arr_bom_temp = $OBJ_EXPLODE->BOM;                $this->EchoVar('arr_bom_temp', $arr_bom_temp);                                                // ----- process the raw inventory items from this BOM                foreach($arr_bom_temp as $t_barcode => $t_qty) {                    $total_qty_temp = (isset($arr_parent_qty[$t_barcode])) ? $arr_parent_qty[$t_barcode] + $t_qty : $t_qty;                    $arr_parent_qty[$t_barcode] = $total_qty_temp;                }                            }        }        $this->EchoVar('arr_parent_qty', $arr_parent_qty);        exit();        */                                #$this->EchoVar('BOM', $BOM);        foreach ($BOM as $id => $record) {                        // ========== GET INFORMATION FROM RECORD ==========            $indent_count       = $record['indent'];            $current_indent     = $record['indent'];            $line_barcode       = $record['barcode'];            $line_quantity      = $record['quantity'];            $line_sku           = $record['sku'];            $line_leadtime      = $record['leadtime'];            $line_orderable     = $record['orderable'];            $QUANTITY           = ($current_indent == 0) ? $line_quantity : $QUANTITY;      // if first line - qty is how many of this we're building                        // ----- debug variables            if (false) {                echo "<br /><br />";                $this->EchoVar('id', $id);                $this->EchoVar('current_indent', $current_indent);                $this->EchoVar('indent_no_lower_than', $indent_no_lower_than);            }                        #$this->EchoVar('');            #$this->EchoVar('line_barcode', $line_barcode);            #$this->EchoVar('stock', $this->Inventory_Available_Array[$line_barcode]['stock']);                        // =============== CALCULATE PARENT INVENTORY ===============            if ($current_indent == 0) {                $arr_parent_qty[$line_barcode] = array(                    'total'     => $this->Inventory_Available_Array[$line_barcode]['stock'],                    // store how much of this item available                    'parent'    => 0,                                                                           // store how much of this item is in parent                );            } else {                $parent_barcode             = $this->GetParentBarcode($id);                $parent_stock_qty           = $arr_parent_qty[$parent_barcode]['total'];                        // get stored parent qty                $true_parent_stock_qty      = ($parent_stock_qty * $line_quantity);                             // calculate how much of this should be in stock based on how parent was built (note: assumes assembly was made based on this BOM which may not be true).                                if (!in_array($line_barcode, $arr_barcode_processed)) {                    $this_barcode_stock         = $this->Inventory_Available_Array[$line_barcode]['stock'];     // get qty of this barcode in stock                    $arr_barcode_processed[]    = $line_barcode;                                                // store that we have processed this barcode                } else {                    $this_barcode_stock         = 0;                                                            // we've already assigned all inventory to this barcode on a previous line                }                                $arr_parent_qty[$line_barcode] = array(                    'total'     => $true_parent_stock_qty + $this_barcode_stock,                                // store how much of this item available                    'parent'    => $true_parent_stock_qty,                                                      // store how much of this item is in parent                );            }                                                $line_parent_qty    = $arr_parent_qty[$line_barcode]['parent'];            $line_total_qty     = $arr_parent_qty[$line_barcode]['total'];                        //$this->EchoVar('arr_parent_qty', $arr_parent_qty);            //exit();                                    // ----- if hit the first line of a new multi-bom - reset the indent_no_lower_than variable            // ----- otherwise the BOM won't get processed due to rules from previous BOM.            if ($current_indent == 0) {                $indent_no_lower_than = 0;            }                        // ----- this level of BOM is already covered by a parent item having enough inventory (because $indent_no_lower_than was set).            // ----- when we get to inventory processing - don't subtract inventory - but DO run other calculations            $remove_inventory = ($current_indent <= $indent_no_lower_than) ? true : false;                                    // ----- debug variables            if (false) {                $this->EchoVar('indent_count', $indent_count);                $this->EchoVar('barcode', $line_barcode);                //$this->EchoVar('quantity', $line_quantity);                //$this->EchoVar('sku', $line_sku);                //$this->EchoVar('leadtime', $line_leadtime);            }                                    // ========== PERFORM SOME BASIC CHECKS ==========            $exist      = $this->StatusInventoryItemExist($line_barcode);                           // does inventory item exist in system            $skip       = in_array($line_barcode, $this->Inventory_Available_Skip_Array);           // do we process this line for inventory levels and other things (i.e. skip labor and shipping as inventory items)                        if (!$exist) {                echo "<br />ERROR :: ProcessBOMInventoryNeeded() :: Inventory item not found. Barcode: {$line_barcode}.";                exit();            }                                                // ========== DETERMINE THE INDENT LEVEL MULTIPLICATION FACTOR ==========            // ----- This keeps track of how much a parent quantity affects this indent level (i.e. if the parent level is 7 items and it            // ----- takes 2 of this subitem to make the parent - we need a total of 14 items). This allows storing and multiplying no            // ----- matter how deep in the BOM stack we are. This assumes that BOM lines are processed in order - when we hit a new item            // ----- that's at the same indent level as a previous item - that old value will get overwritten - which is fine.            $parent_multiplication_factor               = ($current_indent == 0) ? 1 : $indent_qty_multiplier[$current_indent - 1];                 // no multiplication factor if first line of BOM            $line_total_quantity_needed                 = ($line_quantity * $parent_multiplication_factor);                                         // quantity needed to fulfill this line            $multiplier                                 = ($line_quantity == 0) ? $parent_multiplication_factor : $line_total_quantity_needed;      // multiplier to store for next indent level            $indent_qty_multiplier[$current_indent]     = $multiplier;                                    // ----- debug variables            if (false) {                echo '<br /><br />';                $this->EchoVar('line_barcode', $line_barcode);                $this->EchoVar('current_indent', $current_indent);                $this->EchoVar('line_quantity', $line_quantity);                $this->EchoVar('QUANTITY', $QUANTITY);                $this->EchoVar('parent_multiplication_factor', $parent_multiplication_factor);                $this->EchoVar('line_total_quantity_needed', $line_total_quantity_needed);                $this->EchoVar('multiplier', $multiplier);            }                                                                                                // ========== GET INFROMATION ON AVAILABLE INVENTORY ==========            if ($remove_inventory) {                if ($this->Use_Fake_Inventory_Available) {                    $barcode_quantity_available     =  ($skip) ? 0 : $this->FAKE_GetInventoryQuantityAvailable($line_barcode);  // determine how much of this inventory item is in stock                } else {                                        // ----- determine how much of this inventory item is in stock                    $barcode_quantity_available = $this->Inventory_Available_Array[$line_barcode]['available'];                                        // ----- update the inventory available                    $stock      = $this->Inventory_Available_Array[$line_barcode]['stock'];                    $hold       = $this->Inventory_Available_Array[$line_barcode]['hold'] + $line_total_quantity_needed;                    $hold       = ($hold > $stock) ? $stock : $hold;                    $available  = $stock - $hold;                    $available  = ($available < 0) ? 0 : $available;                                        $this->Inventory_Available_Array[$line_barcode] = array(                        'stock'     => $stock,                        'hold'      => $hold,                        'available' => $available,                    );                                        $DATE = '';                    //$barcode_quantity_available     =  ($skip) ? 0 : $this->InventoryItemQuantityAvailable($line_barcode, $DATE);        // determine how much of this inventory item is in stock                }            }                                    // ========== GET INFROMATION ON AVAILABLE PARENT INVENTORY ==========            // ----- if some inventory was available on this item's parent level - then we don't need to build all of this level            if ($current_indent == 0) {                $parent_quantity_available  = 0;            } else {                $parent_barcode             = $this->GetParentBarcode($id);                $parent_quantity_available  = $inventory_needed[$parent_barcode]['available_stock'];                                if (false) {                    echo "<br /><br />";                    $this->EchoVar('line_barcode', $line_barcode);                    $this->EchoVar('parent_barcode', $parent_barcode);                    $this->EchoVar('parent_quantity_available', $parent_quantity_available);                }            }                                                // ========== CALCULATE THE QUANTITY INFORMATION ==========            $total_previously_for_build     = isset($inventory_needed[$line_barcode]['total_for_build']) ? $inventory_needed[$line_barcode]['total_for_build'] : 0;     // get any previous build quantity            $total_previously_to_order      = isset($inventory_needed[$line_barcode]['total_for_build']) ? $inventory_needed[$line_barcode]['total_to_order'] : 0;      // get any previous order quantity            $new_total_for_build            = $total_previously_for_build + $line_total_quantity_needed;                // calculate new build total            $inventory_available_for_build  = $barcode_quantity_available - $total_previously_to_order + $parent_quantity_available;                 // positive value means there's some inventory available in stock            $need_to_order                  = ($new_total_for_build > $barcode_quantity_available) ? true : false;      // determine if we need to order inventory            $new_line_to_order              = 0;                                                                        // initialize quantity                                    // ----- debug variables            if (false) {                echo '<br /><br />';                $this->EchoVar('line_barcode', $line_barcode);                $this->EchoVar('total_previously_to_order', $total_previously_to_order);                $this->EchoVar('total_previously_for_build', $total_previously_for_build);                $this->EchoVar('new_total_for_build', $new_total_for_build);                $this->EchoVar('inventory_available_for_build', $inventory_available_for_build);                $this->EchoVar('need_to_order', $need_to_order);                $this->EchoVar('line_total_quantity_needed', $line_total_quantity_needed);                $this->EchoVar('barcode_quantity_available', $barcode_quantity_available);            }                                    // ----- new total needed will exceed available inventory - so we need to order            if ($need_to_order) {                                // -- check if there's inventory stock available to fulfill needs                if ($inventory_available_for_build > 0) {                    // -- some inventory in stock -- use all of this first                    $new_line_to_order = $line_total_quantity_needed - $inventory_available_for_build;                  // quantity needed to order after accounting for available inventory in stock                } else {                    // -- no available inventory -- need to order everything for this line                    $new_line_to_order = $line_total_quantity_needed;                                                   // quantity needed to order                }            }                        $new_total_to_order             = $total_previously_to_order + $new_line_to_order;                          // what is the new total amount to order for barcode                                    // ----- debug variables            if (false) {                $this->EchoVar('need_to_order', $need_to_order);                $this->EchoVar('new_line_to_order', $new_line_to_order);                $this->EchoVar('new_total_to_order', $new_total_to_order);            }                                                // ========== CALCULATE THE DATE INFORMATION ==========            $previous_item_date     = $this->GetParentDate($id);            $previous_item_date     = ($previous_item_date) ? $previous_item_date : $DATE;            $date_needed            = date('Y-m-d', strtotime("{$previous_item_date} - {$line_leadtime}"));                        // ----- store the date information            $this->BOM_Array[$id]['date_needed'] = $date_needed;                                                // ========== STORE THE INFROMATION INTO ARRAY ==========            // ----- store the base record information for the given barcode            if (isset($inventory_needed[$line_barcode])) {                $inventory_needed[$line_barcode]['total_for_build']     = $new_total_for_build;                $inventory_needed[$line_barcode]['total_to_order']      = $new_total_to_order;            } else {                $inventory_needed[$line_barcode] = array(                    'sku'                       => $line_sku,                       // set on initial creation ONLY                    'available_stock'           => $barcode_quantity_available,     // set on initial creation ONLY                    'available_parent_stock'    => $parent_quantity_available,      // set on initial creation ONLY                    'total_for_build'           => $new_total_for_build,                    'total_to_order'            => $new_total_to_order,                    'orderable'                 => $line_orderable,                 // set on initial creation ONLY                    'order_details'             => array(),                );            }                                    // ----- store the inventory needed by dates for barcode -regardless if need to order or not            $inventory_needed[$line_barcode]['order_details'][$id] = array(                'line_quantity_for_build'   => $line_total_quantity_needed,                'line_quantity_available'   => $barcode_quantity_available,                'line_quantity_to_order'    => $new_line_to_order,                'date_needed'               => $previous_item_date,                'date_order'                => $date_needed,                'lead_time'                 => $line_leadtime,                'indent_count'              => $indent_count,                'id'                        => $id,                'line_parent_qty'           => $line_parent_qty,                'line_total_qty'            => $line_total_qty,            );                                                    // ========== DETERMINE NEXT LEVEL TO PROCESS ==========            //$this->EchoVar('skip', $skip);            if ($need_to_order || $skip) {                // ----- we need to produce more of this item                // ----- next line should be at this level or one lower indent level (higher number = lower indent level)                // ----- going lower in stack checks to make sure we have enough supporting inventory for this item                $indent_no_lower_than = $current_indent + 1;            } else {                // ----- we don't need to produce more of this                 // ----- so just loop until we get to the same or higher indent level                // ----- items lower than this indent level aren't needed                $indent_no_lower_than = $current_indent;            }                                                                                            $last_indent    = $current_indent;      // store the indent level we were just on            $first_line     = false;                // set variable to show we've processed first line of BOM        } // end foreach                //$this->EchoVar('AAA inventory_needed', $inventory_needed);        return $inventory_needed;    // return the array    }            public function ProcessBOMInventoryNeeded($BOM)    {        # FUNCTION :: Determine how much inventory quantity is needed for each barcode in BOM        # Note: This does NOT calculate what needs to be ordered                // ----- check that an array was actually passed in        if (!is_array($BOM)) {            echo "<br />ERROR :: ProcessBOMInventoryNeeded() :: BOM array not passed in - or not array.";            return false;        }                        $QUANTITY               = 1;                            // initialize value        $DATE                   = $this->Build_Date;        $first_line             = true;                         // triggers special first line triggering        $indent_character       = $this->Indent_Character;      // holds the level indentation        $current_indent         = 0;                            // holds the indent level of the line were looking at        $last_indent            = 0;                            // will hold indent level of last row processed        $indent_no_lower_than   = 0;                            // will hold the next indent level to process        $inventory_needed       = array();                      // will hold all needed inventory levels        $last_date              = $this->Build_Date;            // will hold reference date for backing up inventory - initialize to production date        $current_date           = $this->Build_Date;            // will hold reference date for backing up inventory - initialize to production date        $indent_qty_multiplier  = array();                      // will hold multiplication factor for each indent level                        //$this->EchoVar('BOM', $BOM);        foreach ($BOM as $id => $record) {                        // ========== GET INFORMATION FROM RECORD ==========            $indent_count       = $record['indent'];            $current_indent     = $record['indent'];            $line_barcode       = $record['barcode'];            $line_quantity      = $record['quantity'];            $line_sku           = $record['sku'];            $line_leadtime      = $record['leadtime'];            $line_orderable     = $record['orderable'];            $QUANTITY           = ($current_indent == 0) ? $line_quantity : $QUANTITY;                        // ----- debug variables            if (false) {                echo "<br /><br />";                $this->EchoVar('id', $id);                $this->EchoVar('current_indent', $current_indent);                $this->EchoVar('indent_no_lower_than', $indent_no_lower_than);            }                                    // ----- if hit the first line of a new multi-bom - reset the indent_no_lower_than variable            // ----- otherwise the BOM won't get processed due to rules from previous BOM.            if ($current_indent == 0) {                $indent_no_lower_than = 0;            }                        if ($current_indent <= $indent_no_lower_than) {                // ----- we want to process this line because we've gone down one indent in BOM (higher number = lower indent level)                                // ----- debug variables                if (false) {                    $this->EchoVar('indent_count', $indent_count);                    $this->EchoVar('barcode', $line_barcode);                    //$this->EchoVar('quantity', $line_quantity);                    //$this->EchoVar('sku', $line_sku);                    //$this->EchoVar('leadtime', $line_leadtime);                }                                                // ========== PERFORM SOME BASIC CHECKS ==========                $exist      = $this->StatusInventoryItemExist($line_barcode);                           // does inventory item exist in system                $skip       = in_array($line_barcode, $this->Inventory_Available_Skip_Array);           // do we process this line for inventory levels and other things                                if (!$exist) {                    echo "<br />ERROR :: ProcessBOMInventoryNeeded() :: Inventory item not found. Barcode: {$line_barcode}.";                    exit();                }                                                                // ========== DETERMINE THE INDENT LEVEL MULTIPLICATION FACTOR ==========                // ----- This keeps track of how much a parent quantity affects this indent level (i.e. if the parent level is 7 items and it                // ----- takes 2 of this subitem to make the parent - we need a total of 14 items). This allows storing and multiplying no                // ----- matter how deep in the BOM stack we are. This assumes that BOM lines are processed in order - when we hit a new item                // ----- that's at the same indent level as a previous item - that old value will get overwritten - which is fine.                $parent_multiplication_factor               = ($current_indent == 0) ? 1 : $indent_qty_multiplier[$current_indent - 1];                 // no multiplication factor if first line of BOM                $line_total_quantity_needed                 = ($line_quantity * $parent_multiplication_factor);                                         // quantity needed to fulfill this line                $multiplier                                 = ($line_quantity == 0) ? $parent_multiplication_factor : $line_total_quantity_needed;      // multiplier to store for next indent level                $indent_qty_multiplier[$current_indent]     = $multiplier;                                                // ----- debug variables                if (false) {                    echo '<br /><br />';                    $this->EchoVar('line_barcode', $line_barcode);                    $this->EchoVar('current_indent', $current_indent);                    $this->EchoVar('line_quantity', $line_quantity);                    $this->EchoVar('QUANTITY', $QUANTITY);                    $this->EchoVar('parent_multiplication_factor', $parent_multiplication_factor);                    $this->EchoVar('line_total_quantity_needed', $line_total_quantity_needed);                    $this->EchoVar('multiplier', $multiplier);                }                                                                                                                                // ========== GET INFROMATION ON AVAILABLE INVENTORY ==========                if ($this->Use_Fake_Inventory_Available) {                    $barcode_quantity_available     =  ($skip) ? 0 : $this->FAKE_GetInventoryQuantityAvailable($line_barcode);  // determine how much of this inventory item is in stock                } else {                                        // ----- determine how much of this inventory item is in stock                    $barcode_quantity_available = $this->Inventory_Available_Array[$line_barcode]['available'];                                        // ----- update the inventory available                    $stock      = $this->Inventory_Available_Array[$line_barcode]['stock'];                    $hold       = $this->Inventory_Available_Array[$line_barcode]['hold'] + $line_total_quantity_needed;                    $hold       = ($hold > $stock) ? $stock : $hold;                    $available  = $stock - $hold;                    $available  = ($available < 0) ? 0 : $available;                                        $this->Inventory_Available_Array[$line_barcode] = array(                        'stock'     => $stock,                        'hold'      => $hold,                        'available' => $available,                    );                                        $DATE = '';                    //$barcode_quantity_available     =  ($skip) ? 0 : $this->InventoryItemQuantityAvailable($line_barcode, $DATE);        // determine how much of this inventory item is in stock                }                                                // ========== GET INFROMATION ON AVAILABLE PARENT INVENTORY ==========                // ----- if some inventory was available on this item's parent level - then we don't need to build all of this level                if ($current_indent == 0) {                    $parent_quantity_available  = 0;                } else {                    $parent_barcode             = $this->GetParentBarcode($id);                    $parent_quantity_available  = $inventory_needed[$parent_barcode]['available_stock'];                                        if (false) {                        echo "<br /><br />";                        $this->EchoVar('line_barcode', $line_barcode);                        $this->EchoVar('parent_barcode', $parent_barcode);                        $this->EchoVar('parent_quantity_available', $parent_quantity_available);                    }                }                                                                // ========== CALCULATE THE QUANTITY INFORMATION ==========                $total_previously_for_build     = isset($inventory_needed[$line_barcode]['total_for_build']) ? $inventory_needed[$line_barcode]['total_for_build'] : 0;     // get any previous build quantity                $total_previously_to_order      = isset($inventory_needed[$line_barcode]['total_for_build']) ? $inventory_needed[$line_barcode]['total_to_order'] : 0;      // get any previous order quantity                $new_total_for_build            = $total_previously_for_build + $line_total_quantity_needed;                // calculate new build total                $inventory_available_for_build  = $barcode_quantity_available - $total_previously_to_order + $parent_quantity_available;                 // positive value means there's some inventory available in stock                $need_to_order                  = ($new_total_for_build > $barcode_quantity_available) ? true : false;      // determine if we need to order inventory                $new_line_to_order              = 0;                                                                        // initialize quantity                                                // ----- debug variables                if (false) {                    echo '<br /><br />';                    $this->EchoVar('line_barcode', $line_barcode);                    $this->EchoVar('total_previously_to_order', $total_previously_to_order);                    $this->EchoVar('total_previously_for_build', $total_previously_for_build);                    $this->EchoVar('new_total_for_build', $new_total_for_build);                    $this->EchoVar('inventory_available_for_build', $inventory_available_for_build);                    $this->EchoVar('need_to_order', $need_to_order);                    $this->EchoVar('line_total_quantity_needed', $line_total_quantity_needed);                    $this->EchoVar('barcode_quantity_available', $barcode_quantity_available);                }                                                // ----- new total needed will exceed available inventory - so we need to order                if ($need_to_order) {                                        // -- check if there's inventory stock available to fulfill needs                    if ($inventory_available_for_build > 0) {                        // -- some inventory in stock -- use all of this first                        $new_line_to_order = $line_total_quantity_needed - $inventory_available_for_build;                  // quantity needed to order after accounting for available inventory in stock                    } else {                        // -- no available inventory -- need to order everything for this line                        $new_line_to_order = $line_total_quantity_needed;                                                   // quantity needed to order                    }                }                                $new_total_to_order             = $total_previously_to_order + $new_line_to_order;                          // what is the new total amount to order for barcode                                                // ----- debug variables                if (false) {                    $this->EchoVar('need_to_order', $need_to_order);                    $this->EchoVar('new_line_to_order', $new_line_to_order);                    $this->EchoVar('new_total_to_order', $new_total_to_order);                }                                                                // ========== CALCULATE THE DATE INFORMATION ==========                $previous_item_date     = $this->GetParentDate($id);                $previous_item_date     = ($previous_item_date) ? $previous_item_date : $DATE;                $date_needed            = date('Y-m-d', strtotime("{$previous_item_date} - {$line_leadtime}"));                                // ----- store the date information                $this->BOM_Array[$id]['date_needed'] = $date_needed;                                                                // ========== STORE THE INFROMATION INTO ARRAY ==========                // ----- store the base record information for the given barcode                if (isset($inventory_needed[$line_barcode])) {                    $inventory_needed[$line_barcode]['total_for_build']     = $new_total_for_build;                    $inventory_needed[$line_barcode]['total_to_order']      = $new_total_to_order;                } else {                    $inventory_needed[$line_barcode] = array(                        'sku'                       => $line_sku,                       // set on initial creation ONLY                        'available_stock'           => $barcode_quantity_available,     // set on initial creation ONLY                        'available_parent_stock'    => $parent_quantity_available,      // set on initial creation ONLY                        'total_for_build'           => $new_total_for_build,                        'total_to_order'            => $new_total_to_order,                        'orderable'                 => $line_orderable,                 // set on initial creation ONLY                        'order_details'             => array(),                    );                }                                                // ----- store the inventory needed by dates for barcode -regardless if need to order or not                $inventory_needed[$line_barcode]['order_details'][] = array(                    'line_quantity_for_build'   => $line_total_quantity_needed,                    'line_quantity_available'   => $barcode_quantity_available,                    'line_quantity_to_order'    => $new_line_to_order,                    'date_needed'               => $previous_item_date,                    'date_order'                => $date_needed,                    'lead_time'                 => $line_leadtime,                    'indent_count'              => $indent_count,                );                                                                // ========== DETERMINE NEXT LEVEL TO PROCESS ==========                //$this->EchoVar('skip', $skip);                if ($need_to_order || $skip) {                    // ----- we need to produce more of this item                    // ----- next line should be at this level or one lower indent level (higher number = lower indent level)                    // ----- going lower in stack checks to make sure we have enough supporting inventory for this item                    $indent_no_lower_than = $current_indent + 1;                } else {                    // ----- we don't need to produce more of this                     // ----- so just loop until we get to the same or higher indent level                    // ----- items lower than this indent level aren't needed                    $indent_no_lower_than = $current_indent;                }                            } else {                                        // ========== STORE THE INFORMATION INTO ARRAY ==========                                // ----- store the base record information for the given barcode                if (isset($inventory_needed[$line_barcode])) {                    $inventory_needed[$line_barcode]['total_for_build']     = 0;                    $inventory_needed[$line_barcode]['total_to_order']      = 0;                } else {                    $barcode_quantity_available = $this->Inventory_Available_Array[$line_barcode]['available'];                    $inventory_needed[$line_barcode] = array(                        'sku'                       => $line_sku,                       // set on initial creation ONLY                        'available_stock'           => $barcode_quantity_available,     // set on initial creation ONLY                        'available_parent_stock'    => '-',                             // set on initial creation ONLY                        'total_for_build'           => 0,                        'total_to_order'            => 0,                        'orderable'                 => $line_orderable,                 // set on initial creation ONLY                        'order_details'             => array(),                    );                }                                                // ----- store the inventory needed by dates for barcode -regardless if need to order or not                $inventory_needed[$line_barcode]['order_details'][] = array(                    'line_quantity_for_build'   => 0,                    'line_quantity_available'   => $barcode_quantity_available,                    'line_quantity_to_order'    => 0,                    'date_needed'               => '0000-00-00',                    'date_order'                => '0000-00-00',                    'lead_time'                 => $line_leadtime,                    'indent_count'              => $indent_count,                );                                          } // end indent check                        $last_indent    = $current_indent;      // store the indent level we were just on            $first_line     = false;                // set variable to show we've processed first line of BOM        } // end foreach                //$this->EchoVar('AAA inventory_needed', $inventory_needed);        return $inventory_needed;    // return the array    }        public function ProcessBOMInventoryOrder($BOM, $DATE)    {        # FUNCTION :: Determine which of the barcodes actually need inventory ordered                $inventory_order_arr = array();                 foreach ($BOM as $barcode => $stock_arr) {                        //if ($stock_arr['total_needed'] > $stock_arr['available_stock']) {            if ($stock_arr['total_to_order'] > 0) {                  //$order_quantity = $stock_arr['total_needed'] - $stock_arr['available_stock'];                                $inventory_order_arr[$barcode] = array(                    'sku'               => $stock_arr['sku'],                    'order_quantity'    => $stock_arr['total_to_order'],                    'arrive_date'       => '',                    'lead_time'         => '',                    'place_date'        => '',                );            }                    } // end foreach $BOM                return $inventory_order_arr;    }                        public function GetParentDate($ID)     {        # FUNCTION :: Returns the calculated date of the parent item to this item - traverses up array to find it        # $ID - is the ID of the row were on                $date               = 0;        $current_indent     = $this->BOM_Array[$ID]['indent'];                for ($x=$ID; $x--; $x >= 0) {            $temp_indent = $this->BOM_Array[$x]['indent'];            if ($temp_indent < $current_indent) {                // ----- we have found the master item                $date   = $this->BOM_Array[$x]['date_needed'];     // ----- store the date                                #$this->EchoVar('Parent Indent', $x);                #$this->EchoVar('Parent Date', $date);                                $x      = 0;                               // ----- stop further processing            }        }                return $date;    }            public function GetParentBarcode($ID)     {        # FUNCTION :: Returns the barcodefor the parent object to this item - traverses up array to find it        # $ID - is the ID of the row were on                $barcode            = 0;        $current_indent     = $this->BOM_Array[$ID]['indent'];                for ($x=$ID; $x--; $x >= 0) {            $temp_indent = $this->BOM_Array[$x]['indent'];            if ($temp_indent < $current_indent) {                                // ----- skip over array items that shouldn't be considered as parents (i.e. labor or shipping)                $barcode = $this->BOM_Array[$x]['barcode'];                if (!in_array($barcode, $this->Inventory_Available_Skip_Array)) {                                        // ----- we have found the master item                    $barcode    = $this->BOM_Array[$x]['barcode'];      // ----- store the barcode                    $x          = 0;                                    // ----- stop further processing                                    } // end in_array check            }        }                return $barcode;    }            public function ArrIndex($ARR, $INDEX)    {        # FUNCTION :: Checks to see if value in array exists - otherwise return blank                $return = isset($ARR[$INDEX]) ? $ARR[$INDEX] : '';        return $return;    }            public function ModifyBOMArrayForQuantity($BOM, $QUANTITY)    {        # FUNCTION :: Modify the first line of BOM to have proper quantity being produced                // ----- check that an array was actually passed in        if (!is_array($BOM)) {            echo "<br />ERROR :: ModifyBOMArrayForQuantity() :: BOM array not passed in - or not array.";            return false;        }                // ----- break up the first line        $line       = $BOM[0];        $parts      = explode($this->Section_Break_Character, $line);       // explode line ito its parts                // ----- change the value         $barcode    = $parts[0];        $qty        = ($QUANTITY) ? $QUANTITY : $parts[1];        $order      = $parts[2];        $lead       = $parts[3];        $sku        = $parts[4];        $end        = $parts[5];                // ----- recreate the line        $sb         = $this->Section_Break_Character;        $newline    = $barcode . $sb . $qty . $sb . $order . $sb . $lead . $sb . $sku . $sb . $end;                // ----- store line in the array        $BOM[0]     = $newline;                return $BOM;    }                    public function FAKE_GetInventoryQuantityAvailable($line_barcode)    {        # FUNCTION :: Provide fake return quantities available                $output = rand(0, 55);        $output = 0;        return $output;                $fake_arr = array(            '20081' => 0,       // |1|Monitor_COMPLETE_Opal_SI_v1.2|*                '10053' => 0,       // |1|Monitor_ASSEMBLY_pcb|*                    '10068' => 0,       // |1|Battery_COMPLETE_v2.2|*                        '30298' => 0,       // |10|Labor_1_Minute_Unskilled|1d|*                        '10079' => 20,       // |1|Battery_Plain_3.7v_450MAH|1w|*                        '30021' => 100,       // |1|BatteryBoard_ASSEMBLY_v2.1|*                            '90002' => 0,       // |0|Shipping_From_Vendor|2d|*                            '90003' => 0,       // |0|Labor_At_Vendor|5d|*                            '90001' => 0,       // |0|Shipping_To_Vendor|2d|*                            '10071' => 0,       // |1|BatteryBoard_PCB_Tested|*                                '30298' => 0,       // |5|Labor_1_Minute_Unskilled|1d|*                                '10070' => 0,       // |1|BatteryBoard_PCB_Untested|2w|*                    '10056' => 0,       // |1|Monitor_uSDcard_8GB|5d|*                    '30305' => 0,       // |1|Monitor_pcb_tested|1d|*                '10060' => 100,       // |2|Monitor_case_screw_T3xM1.4x3mm-Stainless-SelfTapping|1d|*                '10059' => 100,       // |1|Monitor_ASSEMBLY_top|1d|*                '10062' => 100,       // |1|Monitor_case_bottom_SI|1d|*                        );                return $this->ArrIndex($fake_arr, $line_barcode);       // return quantity - or 0    }        public function FAKE_GetGanttiData()    {            $data = array();        $data[] = array(          'label' => 'Project 1',          'start' => '2012-04-20',           'end'   => '2012-05-12'        );        $data[] = array(          'label' => 'Project 2',          'start' => '2012-04-22',           'end'   => '2012-05-22'        );        $data[] = array(          'label' => 'Project 3',          'start' => '2012-05-25',           'end'   => '2012-06-20'        );        $data[] = array(          'label' => 'Project 4',          'start' => '2012-05-06',           'end'   => '2012-06-17',          'class' => 'important',        );        $data[] = array(          'label' => 'Project 5',          'start' => '2012-05-11',           'end'   => '2012-06-03',           'class' => 'urgent',        );        $data[] = array(          'label' => 'Project 6',          'start' => '2012-05-15',           'end'   => '2012-07-03'        );        $data[] = array(          'label' => 'Project 7',          'start' => '2012-06-01',           'end'   => '2012-07-03',           'class' => 'important',        );        $data[] = array(          'label' => 'Project 8',          'start' => '2012-06-01',           'end'   => '2012-08-05'        );        $data[] = array(          'label' => 'Project 9',          'start' => '2012-07-22',           'end'   => '2012-09-05',          'class' => 'urgent',        );        return $data;    }    }  // -------------- END CLASS --------------