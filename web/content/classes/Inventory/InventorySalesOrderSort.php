<?phpclass Inventory_InventorySalesOrderSort extends Inventory_InventoryBase{        public $Show_Query              = false;    // (false) TRUE = output the database queries ocurring on this page        public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database        		$this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-05-22',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Visual drag-and-drop sort for how sales orders are listed',            'Update Log'    => Array(                '2013-05-22_1.0'    => "Module Created",            ),        );                $this->Table                = 'inventory_sales_orders';                    } // ---------- end construct -----------        public function Execute()    {        $this->AddStyle();        $this->AddScript();        $this->GetAllSalesOrdersForSort();    }        public function ExecuteAjax()    {        if (false) {            echo "<br />action => $action<br /><br />";            echo "<br />get ==> " . ArrayToStr($_GET);            echo "<br />post ==> " . ArrayToStr($_POST);            echo "<br />post ITEM ==> " . ArrayToStr($_POST['item']);            echo "<br />post ITEM ==> " . ArrayToStr(unserialize($_POST['id']));            echo "<br />post ==> " . ArrayToStr($_POST['order']);            echo "<br />order ==> " . $_POST['order'];            echo "<br />items ==> " . ArrayToStr($items);        }                $return = '';                switch (Get('action')) {            case 'sort':                                # CREATE THE ARRAY THE IS PROCESSABLE                $items = array();                $order = 1;                $parts = explode('item[]=', $_POST['order']);                foreach ($parts as $part) {                    if ($part) {                        $key = intonly($part);                        $items[$key] = $order;                        $order++;                    }                }                                # RUN ALL OF THE SORTS                $passed = true;                foreach($items as $id => $order) {                    $id     = intonly($id);                    $order  = intonly($order);                                        $result = $this->SQL->UpdateRecord(array(                        'table'         => $this->Table,                        'key_values'    => "priority_sort_order='{$order}'",                        'where'         => "inventory_sales_orders_id='{$id}'",                    ));                    $passed = (!$result) ? false : $passed;                }                $return = ($passed) ? 1 : 0;            break;        }                echo $return;    }    public function GetAllSalesOrdersForSort()    {        # FUNCTION :: Get all sales orders from the database                $output = '';                // ----- determine if limiting to certain pipeline group        $pipeline_status    = Get('status');        $where_pipeline     = ($pipeline_status) ? " AND pipeline_status='{$pipeline_status}'" : '';                $records = $this->SQL->GetArrayAll(array(            'table' => $this->Table,            'keys'  => 'inventory_sales_orders_id, universal_id, order_type, customer',            'where' => "active=1 {$where_pipeline}",            'order' => '`priority_sort_order` ASC',        ));        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        if ($records) {            $output .= '<ul id="sortable">';            foreach ($records AS $record) {                                $display    = "";                $display   .= "ID => {$record['inventory_sales_orders_id']}";                $display   .= "</br>UID => {$record['universal_id']}";                $display   .= "</br>Type => {$record['order_type']}";                $display   .= "</br>Customer => {$record['customer']}";                                $id         = $record['inventory_sales_orders_id'];                                $output    .= "<li id='item_{$id}' class='ui-state-default' style='min-width:200px;'><span class='ui-icon ui-icon-arrowthick-2-n-s'></span>{$display}</li>";                            }            $output .= '</ul>';        }                echo $output;            }    public function AddStyle()    {        AddStyle("            #sortable {                list-style-type: none;                margin: 0;                padding: 0;                /*width: 60%;*/            }            #sortable li {                margin: 0 3px 3px 3px;                padding: 0.4em;                padding-left: 1.5em;                font-size: 1.4em;                /*height: 18px;*/            }            #sortable li span {                position: absolute;                margin-left: -1.3em;            }        ");    }        public function AddScript()    {        AddScriptInclude("https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js");                $link   = getClassExecuteLink(EncryptQuery("class={$this->Classname};"));        $SCRIPT = <<<SCRIPT                        $("#sortable").sortable({                placeholder: 'ui-state-highlight',                stop: function(i) {                    placeholder: 'ui-state-highlight',                    $.ajax({                        type: "POST",                        url: "{$link};action=sort;",                        data: { order: $("#sortable").sortable("serialize") },                        success: function( result ) {                                if (result == 1) {                                    //alert('Instructors have been re-ordered');                                } else {                                    alert('Failed to re-order instructors');                                }                            }                    });                }            });            $("#sortable").disableSelection();            SCRIPT;        AddScriptOnReady($SCRIPT);    }        }  // -------------- END CLASS --------------