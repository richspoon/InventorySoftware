<?phpclass Inventory_Valuation_ValueSummaryReport extends Inventory_InventoryBase{    public $Show_Query                  = false;            // ----- INPUT VARIABLES -----    public $Barcode                     = 0;            // barcode we're creating report for    public $Value_Array                 = array();      // array we are converting to a table    public $Inventory_Assemblies_ID     = 0;            // can pass in ID of exact assembly we're using    public $Sub_Report                  = false;        // (FALSE) true = hide certain details in report         // ----- OUTPUT VARIABLES -----    public $Sumary_Table                = "";           // will hold the final summary table    public $Report                      = "";           // will hold the final report (also returned by functions)        // ----- OTHER VARIABLES -----    public $Show_Method_Details         = false;    public $Show_Assembly_Details       = false;                public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);		$this->SQL->Calling_Classname = $this->Classname;        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-02-28',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Create a summary table of how value was calculated',            'Update Log'    => array(                '2013-02-28_1.0'    => "Module Created",            ),        );                // ----- initialize GET variables        $this->Show_Method_Details      = (Get('methoddetails') == 'true') ? true : false;        $this->Show_Assembly_Details    = (Get('assemblydetails') == 'true') ? true : false;                    } // -------------- END __construct --------------            public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                        [DESCRIPTION:]        Create a summary report table of how value was caluclated. This report can be output on any page to show the user        how the value was calculated.                        [NOTES]:        Value = money value of an inventory item prior to it being sold        COGS = money value of inventory item at time of sale. COGS can be a summation of all values making up an inventory item.        ";                $output = $this->PseudocodeFormat($output);        return $output;    }            public function Execute()    {        if (!is_array($this->Value_Array))   {            $error = "Missing Value_Array";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                if (!$this->Barcode)   {            $error = "Missing barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- determine what type of report to make - and call that function        $is_asembly = $this->CheckIfAssembly($this->Barcode);        if ($is_asembly) {            if ($this->Sub_Report) {                $this->Report = $this->CreateReport_Assembly_SubAssembly();            } else {                $this->Report = $this->CreateReport_Assembly();            }        } else {            $this->Report = $this->CreateReport_Barcode();        }                                        // ----- call the function to process report array        #$report = $this->CreateReport();        return $this->Report;    }        public function ArrayToTable($ARR)    {        $row_1 = "";        $row_2 = "";                foreach ($ARR as $key => $val) {                        if (is_array($val)) {                $val = $this->ArrayToTable($val);            }                        $row_1 .= "<th>{$key}</th>";            $row_2 .= "<td>{$val}</td>";        }                $output = "            <table class='vr_assy_table' width='100%'>            <tr>{$row_1}</tr>            <tr>{$row_2}</tr>            </table>            ";                return $output;    }        public function CreateReport()    {        # FUNCTION :: Actually make the summary table report                //foreach ($this->Value_Array)                $this->JavascriptToggleFunctionality();                                             // toggling show/hide a div area                                $record = $this->Value_Array;                        $value_each         = money_format("%n", $record['value_each']);        $value_total        = money_format("%n", $record['value_total']);        $method_details     = ArrayToStr($record['method_details']);                $method_table = '            <div class="form_section_header">Method Details <a class="toggle" href="#" id="menu_group_1"><span class="updown">&nbsp;</span></a></div>                <div class="menu_group" style="display:none;" id="div_menu_group_1">                '.$method_details.'                </div>            </div>';                $output = "        <div style='width:300px;'>        <div class=\"form_section_header\">Value Report <a class=\"toggle\" href=\"#\" id=\"menu_group_A\"><span class=\"updown\">&nbsp;</span></a></div>            <div class=\"menu_group\" style=\"display:none;\" id=\"div_menu_group_A\">            <table class='vr_assy_table' width='100%'>            <tr>                <th>Product</th>                <th>Value</th>                <th>Class</th>                <th>Method</th>            </tr>            <tr>                <td><b>{$record['barcode']}<br />{$record['sku']}</b></td>                <td>{$value_each} X {$record['quantity']} = {$value_total}</td>                <td>{$record['class']}</td>                <td><b>{$record['method']}</b></td>            </tr>            <tr>                <td colspan='6'>{$method_table}</td>            </tr>            </table>            </div>        </div>        </div>        ";                                // ----- add styles -----        AddStylesheet("/css/inventory.css");        AddStyle("            .vr_header {                font-size:          22px;                font-weight:        bold;                color:              #003399;            }            .vr_header_barcode {                font-size:          16px;                font-weight:        bold;                color:              #003399;            }                        .vr_table td:first-child {                font-weight:        bold;                text-align:         right;            }                        .vr_assy_table {                border:             1px solid blue;                border-collapse:    collapse;                            }            .vr_assy_table th {                border:             1px solid black;                font-weight:        bold;                background-color:   #C2D1F0;                padding:            3px;            }            .vr_assy_table td {                border:             1px solid black;                padding:            3px;            }        ");                                return $output;    }            public function GetInventoryAssemblies($inventory_assemblies_id)    {        $record = $this->SQL->GetRecord(array(            'table' => 'inventory_assemblies',            'keys'  => '*',            'where' => "inventory_assemblies_id='{$inventory_assemblies_id}' AND active=1",        ));        $this->EchoQuery();                return $record;    }                public function CreateReport_Barcode()    {        # FUNCTION :: Create a value summary report for a KNOWN assmebly record.        # NOTE :: Have to know its ammesbly - because that makes the array be formatted a specific way                        $record = $this->Value_Array;        //$this->EchoVar('record', $record);                        // ----- process each row of the assembly array        $total_cost         = 0;        $row_data           = '';        $value_each         = money_format("%n", $record['value_each']);        $method_details     = ($this->Show_Method_Details) ? ArrayToStr($record['method_details']) : '';                $row_data .= "            <tr>                <td>{$record['barcode']}</td>                <td>{$record['sku']}</td>                <td>{$record['quantity']}</td>                <th>{$value_each}</th>                <td>{$record['class']}<br /><b>{$record['method']}</b>{$method_details}</td>            </tr>";                // ----- create link for showing/hiding details        global $PAGE;        $pagelink   = str_replace(array('&methoddetails=false','&methoddetails=true'), '', $PAGE['pagelinkquery']);     // strip off previous query modification        $link_on    = "<a href='{$pagelink}&methoddetails=true'>View Details</a>";        $link_off   = "<a href='{$pagelink}&methoddetails=false'>Hide Details</a>";        $link       = ($this->Show_Method_Details) ? $link_off : $link_on;                        $row_header = "            <tr>                <th>Barcode</th>                <th>SKU</th>                <th>Qty</th>                <th>Cost/Each</th>                <th>Valuation Method ({$link})</th>            </tr>";                $row_footer = "";                $key = $this->ValueMethodKey();                $report = "            <div class='pageheader'>VALUATION SUMMARY REPORT</div>            <br />            <div style='font-size:14px;'>                <b>Type:</b> Barcode<br />                <b>Barcode:</b> {$record['barcode']}<br />                <b>APDM SKU:</b> {$record['sku']}<br />                <b>Cost/Value Each:</b> {$value_each}            </div>            <br /><br />            <table border='1' id='jsonTable'>                {$row_header}                {$row_data}                {$row_footer}            </table>            {$key}            ";                        return $report;    }        public function CreateReport_Assembly_SubAssembly()    {        # FUNCTION :: Create a sub-assembly report                $record = $this->Value_Array;        //$this->EchoVar('record', $record);                        // ----- process each row of the assembly array        $total_cost = 0;        $row_data   = '';        foreach ($record['method_details'] as $line) {                        $value_each         = money_format("%n", $line['value_each']);            $value_total        = money_format("%n", $line['value_total']);            $total_cost        += $line['value_total'];            $method_details     = ($this->Show_Method_Details) ? ArrayToStr($line['method_details']) : '';            $is_assembly        = (isset($line['is_assembly'])) ? 1 : 0;            $assembly_text      = ($is_assembly) ? 'YES' : '';                                    $row_data .= "                <tr>                    <td colspan='2'>{$line['barcode']} - {$line['sku']}</td>                    <td>{$line['quantity']}</td>                    <td>{$value_each}</td>                    <td>{$value_total}</td>                    <td>{$line['class']}<br /><b>{$line['method']}</b>{$method_details}</td>                    <td align='center'>{$assembly_text}</td>                </tr>";                                    if ($is_assembly && $this->Show_Assembly_Details) {                                $value_array_temp = $line;                $value_array_temp['method_details'] = $line['method_details'];                                $Obj_Summary                    = new Inventory_Valuation_ValueSummaryReport();         // instantiate new value report                $Obj_Summary->Barcode           = $line['barcode'];                                     // barcode we're creating report for                $Obj_Summary->Value_Array       = $value_array_temp;                $Obj_Summary->Sub_Report        = true;                $sub_report                     = $Obj_Summary->Execute();                                $row_data .= "<tr><td></td><td colspan='6'>{$sub_report}</td></tr>";                                unset($Obj_Summary);            }                                                        }                $total_cost = money_format("%n", $total_cost);                        $row_header = "            <tr>                <th colspan='2'>Barcode - SKU</th>                <th>Qty</th>                <th>Each</th>                <th>Total</th>                <th>Valuation Method</th>                <th>Assy</th>            </tr>";                        $row_footer = "            <tr>                <td colspan='4'></td>                <th><b>{$total_cost}</b></th>                <td colspan='2'></td>            </tr>";                        $report = "            <table border='1' id='jsonTable'>                {$row_header}                {$row_data}                {$row_footer}            </table>";                        return $report;    }        public function CreateReport_Assembly()    {        # FUNCTION :: Create a value summary report for a KNOWN assmebly record.        # NOTE :: Have to know its ammesbly - because that makes the array be formatted a specific way                        $record = $this->Value_Array;        //$this->EchoVar('record', $record);                        // ----- get additional details about assembly (if available)        $assy_name = "";        if ($this->Inventory_Assemblies_ID) {            $record_assy    = $this->GetInventoryAssemblies($this->Inventory_Assemblies_ID);            if ($record_assy) {                $assy_name  = "<b>Assembly Name:</b> {$record_assy['assembly_name']}<br />";            }        }                        // ----- process each row of the assembly array        $total_cost = 0;        $row_data   = '';        foreach ($record['method_details'] as $line) {                        $value_each         = money_format("%n", $line['value_each']);            $value_total        = money_format("%n", $line['value_total']);            $total_cost        += $line['value_total'];            $method_details     = ($this->Show_Method_Details) ? ArrayToStr($line['method_details']) : '';            $is_assembly        = (isset($line['is_assembly'])) ? 1 : 0;            $assembly_text      = ($is_assembly) ? 'YES' : '';                                    $row_data .= "                <tr>                    <td>{$line['barcode']}</td>                    <td>{$line['sku']}</td>                    <td>{$line['quantity']}</td>                    <td>{$value_each}</td>                    <td>{$value_total}</td>                    <td>{$line['class']}<br /><b>{$line['method']}</b>{$method_details}</td>                    <td align='center'>{$assembly_text}</td>                </tr>";                                    if ($is_assembly && $this->Show_Assembly_Details) {                                $value_array_temp = $line;                $value_array_temp['method_details'] = $line['method_details'];                                $Obj_Summary                    = new Inventory_Valuation_ValueSummaryReport();         // instantiate new value report                $Obj_Summary->Barcode           = $line['barcode'];                                     // barcode we're creating report for                $Obj_Summary->Value_Array       = $value_array_temp;                $Obj_Summary->Sub_Report        = true;                $sub_report                     = $Obj_Summary->Execute();                                $row_data .= "<tr><td></td><td colspan='6'>{$sub_report}</td></tr>";                                unset($Obj_Summary);            }        }                                // ----- strip off previous query modification        global $PAGE;        $pagelink           = $PAGE['pagelinkquery'];        $pagelink           = str_replace(array('&methoddetails=false','&methoddetails=true'), '', $pagelink);        $pagelink           = str_replace(array('&assemblydetails=false','&assemblydetails=true'), '', $pagelink);                // ----- determine what variables are currently triggered - and make sure they are used in other links        $link_method_current    = ($this->Show_Method_Details) ? '&methoddetails=true' : '&methoddetails=false';        $link_assembly_current  = ($this->Show_Assembly_Details) ? '&assemblydetails=true' : '&assemblydetails=false';                // ----- create the link for showing/hiding methods        $link_method_on     = "<a href='{$pagelink}&methoddetails=true{$link_assembly_current}'>View Details</a>";        $link_method_off    = "<a href='{$pagelink}&methoddetails=false{$link_assembly_current}'>Hide Details</a>";        $link_method        = ($this->Show_Method_Details) ? $link_method_off : $link_method_on;                // ----- create the link for showing/hiding assemblies        $link_assembly_on   = "<a href='{$pagelink}&assemblydetails=true{$link_method_current}'>View Details</a>";        $link_assembly_off  = "<a href='{$pagelink}&assemblydetails=false{$link_method_current}'>Hide Details</a>";        $link_assembly      = ($this->Show_Assembly_Details) ? $link_assembly_off : $link_assembly_on;                                        $total_cost = money_format("%n", $total_cost);                        $row_header = "            <tr>                <th>Barcode</th>                <th>SKU</th>                <th>Qty</th>                <th>Cost/Each</th>                <th>Total Cost</th>                <th>Valuation Method ({$link_method})</th>                <th>Assembly ({$link_assembly})</th>            </tr>";                                $row_footer = "            <tr>                <td colspan='4'></td>                <th><b>{$total_cost}</b></th>                <td colspan='2'></td>            </tr>";                $key = $this->ValueMethodKey();                $header = "            <div class='pageheader'>VALUATION SUMMARY REPORT</div>                <br />                <div style='font-size:14px;'>                    <b>Type:</b> Assembly<br />                    {$assy_name}                    <b>Barcode Created:</b> {$record['barcode']}<br />                    <b>APDM SKU Created:</b> {$record['sku']}<br />                    <b>Total Cost/Value:</b> {$total_cost}                </div>                <br /><br />";                $report = "            {$header}            <table border='1' id='jsonTable'>                {$row_header}                {$row_data}                {$row_footer}            </table>            {$key}";                        return $report;    }                    public function ValueMethodKey()    {        $this->JavascriptToggleFunctionality();         // Javascript for taggling show/hide a div area                $output = "            <br /><br />            <div class='shadow form_section_wrapper'>            <div class=\"form_section_header\" style='font-size:10px;'>Valuation Method Key <a class=\"toggle\" href=\"#\" id=\"menu_group_a\"><span class=\"updown\">&nbsp;</span></a></div>            <div class=\"menu_group\" style=\"display:none;\" id=\"div_menu_group_a\">                <table class='jsonTable_nowidth' width='100%'>                <tr><td><b>total_average</b></td><td>The system looks at every purchase order (and possibly adjustment record) and averages the purchase price (with shipping) over all records. This method is accurate for actual value but does not indicate correct current-day pricing if the price has been increasing or dropping significantly over time.</td></tr>                <tr><td><b>default_value</b></td><td>When no other method can be used to determine a part's value the system will look at the manually stored default value. You can modify this value by editing a product's record. This method is the least accurate as default values can be wrong or even $0.</td></tr>                <tr><td><b>sub_assembly_value_total_sum</b></td><td>This is an assembly item and the price reflected is the SUM of all the 'total cost' for each assembly item.</td></tr>                </table>            </div>            </div>            ";        return $output;    }        public function CheckIfAssembly($barcode)    {        // Check if this item is a sub-assembly                $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_assemblies',            'keys'  => 'inventory_assemblies_id',            'where' => "barcode='{$barcode}' AND active=1"        ));        $this->EchoQuery();                $is_subassembly = ($records) ? 1 : 0;        return $is_subassembly;    }    }  // -------------- END CLASS --------------