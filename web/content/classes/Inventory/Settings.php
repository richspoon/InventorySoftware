<?phpclass Inventory_Settings extends Inventory_InventoryBase{    public $Module_Offline              = false;                    // (false) TRUE = dispaly offline message to users    public $Show_Query                                  = false;    // (false) TRUE = display database queries used in this class            // ----- INPUT VARIABLES -----        // ----- OUTPUT VARIABLES -----	    // ----- OTHER VARIABLES -----            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-05-13',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Manage inventory settings',            'Update Log'    => array(                '2013-05-13_1.0'    => "Module Created",            ),        );                        // ----- Process any parameters sent in construct        //$this->SetParameters(func_get_args());        //$this->Inventory_Production_Board_Whitesheet_Id = $this->GetParameter(0);        //$this->Inventory_Production_Board_Id            = $this->GetParameter(1);                        // ----- Configuration for database table        $this->Table                = 'inventory_settings';                             // database table        $this->Add_Submit_Name      = "{$this->Table}_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_EDIT";        $this->Index_Name           = 'inventory_settings_id';                          // index field for database table        $this->Flash_Field          = 'inventory_settings_id';        $this->Default_Sort         = '';                                               // field for default table sort                        $this->Field_Titles = array(            "{$this->Table}.inventory_settings_id"                  => 'ID',            "{$this->Table}.variable"                               => 'Variable',            "{$this->Table}.value"                                  => 'Value',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                $this->Join_Array           = Array();        $this->Group_By             = "";        $this->Default_Fields       = 'variable, value';        $this->Edit_Links_Count     = 3;        $this->Unique_Fields        = '';        $this->Default_Values       = array();        $this->Use_Selection_Tab    = false;        // (TRUE) false = hide the search tab on the table        $this->Default_List_Size    = 100;          // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window        $this->Show_Export          = false;        // (true) false = hide the export block            } // -------------- END __construct --------------    public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $this->ModuleOfflineMessage();  // show module offline essage - if activated                $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;                        case 'list':            default:                // ----- display list of all assemblies that can be built				$this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {            default:            break;        }                echo $return;    }                public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                $base_array = array(            "form|$this->Action_Link|post|db_edit_form",            'text|Variable|variable|N|20|255',            'textarea|Value|value|N|40|4',        );        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        }  // -------------- END CLASS --------------