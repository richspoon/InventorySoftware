<?php// ========================================================================================// NOTES :// Always store the shipping and unit prices in TOTAL - do division later. This is more accurate than// previously having divided up a total and then doing multiplication on it - because of remainders.// // ========================================================================================class Inventory_InventoryBase extends BaseClass{    public $Page_Location                  = "/office/inventory/inventory_hold";    public $Page_Location_Get              = '';    public $Page_Link_Add_Inventory        = '';    public $Page_Link_Success              = '';    public $Show_Query                     = false;    public $Global_Form_Start              = '';    public $Global_Form_End                = '';        public $Barcode                        = '';    public $Add_Record_Link                = '';        public $Error                           = "";    public $Message                         = "";            public $title_template    = "<span class=\"formtitle\" style='font-weight:bold;'>@</span>\n";       // -------- Template for the title    public $info_template     = "<br /><span class=\"forminfo\">@</span>\n\n";                          // -------- templete for the input field            public $Classname                       = "";           // call in class construct with "$this->Classname = get_class($this);"        public $Error_Arr                       = array();              // will hold errors generated by this class    public $Have_Error                      = 0;                    // will = 1 if there are any errors     public $Notice_Arr                      = array();              // will hold notices generated by this class    public $Have_Notice                     = 0;                    // will = 1 if there are any notices     public $Show_Error                      = false;            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);                setlocale(LC_MONETARY, 'en_US');                        // set money locality        date_default_timezone_set('America/Los_Angeles');       // set to PST timezone            } // -------------- END __construct --------------    public function InventoryMenu($cur)    {        $this->AddScriptSessionHold();        AddStyle("            .menu {                width:70px; height:20px; border:1px solid #ccc;                 font-size:10px; padding:10px; text-align:center; float:left;                background-color:#cecece; color:#000;                text-decoration:none;                margin-right:10px;            }            .menu_current {                background-color:yellow;            }        ");                $extra_class_1 = ($cur == 'SCANS') ? 'menu_current' : '';        $extra_class_2 = ($cur == 'ORDERS') ? 'menu_current' : '';        $extra_class_3 = ($cur == 'HOLDS') ? 'menu_current' : '';        $extra_class_4 = ($cur == 'PRODUCTS') ? 'menu_current' : '';        $extra_class_5 = ($cur == 'PO') ? 'menu_current' : '';                echo "            <a class='menu $extra_class_1' href='/office/inventory/inventory_scan'>SCANS</a>            <a class='menu $extra_class_2' href='/office/inventory/inventory_order'>ORDERS</a>            <a class='menu $extra_class_3' href='/office/inventory/inventory_hold'>HOLDS</a>            <a class='menu $extra_class_4' href='/office/inventory/inventory_products'>PRODUCTS</a>            <a class='menu $extra_class_5' href='/office/inventory/inventory_po;t=place'>PURCHASE ORDER PLACE</a>            <a class='menu $extra_class_5' href='/office/inventory/inventory_po;t=receive'>PURCHASE ORDER RECEIVE</a>                                                <div class='clear'></div>            <br />            <div style='border-bottom:2px dashed #cecece;'></div>            <br /><br />        ";    }        /*    public function GetTableHeading($colcount)    {        $export = ($this->Show_Export)? $this->GetExportBlock() : '';        $RESULT = '            <tr class="TABLE_TITLE">                <td colspan="'. $colcount. '">                ' . $export . '                    Search Results : ' . $this->GetTableTitle() . '                                </td>            </tr>';        return $RESULT;    }    */        public function AddScriptSessionHold()    {        AddScript("            var holdSessionInterval = 300000;  // 5-minutes                        function holdSessionOpenAction()            {                $.get('HOLDSESSION');            }            setInterval('holdSessionOpenAction()', holdSessionInterval);        ");    }        /*    public function SuccessfulAddRecord()    {        if (Session('scan_message')) {            $_SESSION['scan_message'] .= "<br />SCAN SUCCESSFUL";        } else {            $_SESSION['scan_message'] = "<br />SCAN SUCCESSFUL";        }                header("Location: {$this->Success_Redirect}");    }    */        public function AddRecordLoc($table, $db_record)     {        $keys   = '';        $values = '';                    foreach ($db_record as $var => $val) {            $val = addslashes($val);                        $keys   .= "`$var`, ";            $values .= "'$val', ";        }        $keys   = substr($keys, 0, -2);        $values = substr($values, 0, -2);                $result = $this->SQL->AddRecord(array(            'table'     => $table,            'keys'      => $keys,            'values'    => $values,        ));        //if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                $return = ($result) ? true : false;        return $return;    }        public function UpdateRecordLoc($table, $db_record, $where)     {        $key_values = '';        foreach ($db_record as $var => $val) {            $val = addslashes($val);            $key_values .= "`$var`='$val', ";        }        $key_values = substr($key_values, 0, -2);                $result = $this->SQL->UpdateRecord(array(            'table'         => $table,            'key_values'    => $key_values,            //'where'         => "{$where} AND active=1",            'where'         => "{$where} ",        ));        //if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                $return = ($result) ? true : false;        return $return;    }    public function getPageURL()    {        // FUNCTION :: Returns complete URL of page currently on                if (isset($_SERVER["HTTPS"])) {            $pageURL = (@$_SERVER["HTTPS"] == "on") ? "https://" : "http://";        } else {            $pageURL = "http://";        }                if ($_SERVER["SERVER_PORT"] != "80")        {            $pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];        }         else         {            $pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];        }        return $pageURL;    }            public function __AddMessage($MSG)    {        if ($MSG) { $this->Message .= "<br />" . $MSG;  }    }        public function __AddError($MSG)    {        if ($MSG) { $this->Error .= "<br />" . $MSG;    }    }        public function EchoVar($NAME='', $VAR='', $COLOR='black')    {        if (is_array($VAR)) {            echo "<br /><span style='color:{$COLOR};'><b>{$NAME}</b></span> ----> " . ArrayToStr($VAR);        } else {            if ($NAME || $VAR) {                echo "<br /><span style='color:{$COLOR};'><b>{$NAME}</b></span> ----> {$VAR}";            } else {                echo "<br />";            }        }    }        public function EchoQuery($FORCE_ON=false)    {        if ($this->Show_Query || $FORCE_ON || Session('WANT_DB_QUERIES'))         {             echo "            <br />            <div style='border:1px solid #ddd;'>                <div style='padding:5px; background-color:#e3e3e3;'><b>QUERY</b> :: Classname: {$this->Classname}</div>                <div style='padding:5px;'>{$this->SQL->Db_Last_Query}</div>            </div>            <br />";        }    }                public function EchoInformation($TITLE='', $INFO='', $BORDERCOLOR='black', $RETURN=false)    {        $output = "            <br />            <div style='border:2px solid {$BORDERCOLOR};'>                <div style='padding:5px; background-color:#e3e3e3; font-weight:bold;'>{$TITLE}</div>                <div style='padding:5px;'>{$INFO}</div>            </div>            <br />";                if ($RETURN) { return $output; } else { echo $output; };    }        public function PseudocodeFormat($OUTPUT)    {        # FUNCTION :: Special formatting for Pseudocode function                $search     = array('[', ']');        $replace    = array('<b>', '</b>');        $output     = str_replace($search, $replace, $OUTPUT);      // special formatting        $output     = nl2br($output);                               // create line breaks                return $output;    }                # ===== ERROR FUNCTIONS ===============    public function AddError($CLASS='', $FUNCTION='', $ERROR='')    {        if ($ERROR) {            $this->Error_Arr[]  = "{$CLASS} :: {$FUNCTION} :: {$ERROR}";            $this->Have_Error   = 1;        }    }        public function EchoError($CLASS='', $FUNCTION='', $ERROR='', $FORCESHOW=false)    {        if ($this->Show_Error || $FORCESHOW) {            $this->EchoVar('ERROR', "{$CLASS} :: {$FUNCTION} :: {$ERROR}", 'red');        }    }        public function DumpErrors($RETURN=false)    {        if ($this->Have_Error) {                        $errors = '';            foreach ($this->Error_Arr as $error) {                $errors .= "{$error}<br />";            }                        $output = "                <br />                <div style='border:2px solid red;'>                <div style='padding:5px; background-color:pink; font-weight:bold;'>{$this->Classname} :: DumpErrors()</div>                <div style='padding:5px;'>{$errors}</div>                </div>                <br />";                            if ($RETURN) { return $output; } else { echo $output; }        }    }            # ===== NOTICE FUNCTIONS ===============    public function AddNotice($CLASS='', $FUNCTION='', $NOTICE='')    {        if ($NOTICE) {            $this->Notice_Arr[]  = "{$CLASS} :: {$FUNCTION} :: {$NOTICE}";            $this->Have_Notice   = 1;        }    }        public function EchoNotice($CLASS='', $FUNCTION='', $NOTICE='', $FORCESHOW)    {        if ($this->Show_Notice || $FORCESHOW) {            $this->EchoVar('NOTICE', "{$CLASS} :: {$FUNCTION} :: {$NOTICE}", 'Orange');        }    }        public function DumpNotices($RETURN=false)    {        if ($this->Have_Notice) {                        $notices = '';            foreach ($this->Notice_Arr as $notice) {                $notices .= "{$notice}<br />";            }                        $output = "                <br />                <div style='border:2px solid orange;'>                <div style='padding:5px; background-color:yellow; font-weight:bold;'>{$this->Classname} :: DumpNotices()</div>                <div style='padding:5px;'>{$notices}</div>                </div>                <br />";                        if ($RETURN) { return $output; } else { echo $output; }        }    }                                        public function JavascriptToggleFunctionality()    {        $script = "        $('.toggle').each(function() {            var id = $(this).attr('id');            $('#' + id + ' span').toggleClass('updown_down');            $(this).click(function (){                $('#div_' + id).slideToggle('normal', function (){                    $('#' + id + ' span').toggleClass('updown_down');                });                return false;            });        });        ";        addScriptOnReady($script);    }        public function JavascriptDatepickerFunctionality ($ARR)    {        # FUNCTION :: Add datepicker functionality to all field IDs passed in                if (is_array($ARR)) {            foreach ($ARR as $field) {                addScriptOnReady("$('#{$field}').datepicker({dateFormat: 'yy-mm-dd'});");            }        }    }        public function JavascriptTimepickerFunctionality ($ARR)    {        # FUNCTION :: Add timepicker functionality to all field IDs passed in                if (is_array($ARR)) {            foreach ($ARR as $field) {                AddScriptOnReady("$('#{$field}').timepicker();");            }        }    }        public function JavascriptDisableFunctionality ($ARR)    {        # FUNCTION :: Disable all field IDs passed in (jQuery 1.6+)                if (is_array($ARR)) {            foreach ($ARR as $field) {                AddScriptOnReady("$('#{$field}').prop('disabled', true);");            }        }    }        public function JavascriptInputNoBorder ($ARR)    {        # FUNCTION :: Disable all field IDs passed in (jQuery 1.6+)                if (is_array($ARR)) {            foreach ($ARR as $field) {                AddScriptOnReady("$('#{$field}').addClass('noborder');");            }        }    }        public function JavascriptConfirmDeleteAndOpenWindow()    {                AddScript("            function ConfirmDeleteAndOpenWindow (link) {                if (confirm('Are you sure you want to delete (inactivate) row?')) {                    //alert(link);                    top.parent.appformCreate('Window', link, 'apps');                    return false;                }            }        ");            }        public function JavascriptDisplaySessionMessage()    {                // ----- If a message has been sent in - display it - then unset it        // ----- Messages put into $_SESSION['alert_message'] variable        $msg = Session('alert_message');        if  ($msg) {            AddScriptOnReady("alert('{$msg}');");            unset($_SESSION['alert_message']);        }    }        public function ScriptJSONTableGeneric()    {        # FUNCTION :: Generic parts of JavaScript for handling the JSON HTML table                // ----- SCRIPTS NEEDED FOR CREATING HTML TABLE FROM JSON DATA        AddScriptInclude("http://webmanager.whhub.com/jslib/jsontable/json_to_table.js");       // convert JSON to HTML table        AddScriptInclude("http://webmanager.whhub.com/jslib/jsontable/jquery.csv-0.7.min.js");  // process CSV to JSON object                        $script = <<<SCRIPT                                                function tableDeleteRow(deleteRowId) {                                // get the content rows                // loop through each row                // if this is the one we want to delete - remove it                // renumber each row after this point to one less than current - so they are associated to correct row                                                var targetText          = $("#" + targetTextID);            // where the array will be stored                var targetTableDiv      = $("#" + targetTableDivID);        // where the table will be displayed                var content             = targetText.val().trim();          // trim to remove extra linebreak                var split               = content.split("\\n");             // actual data rows                targetText.val('');                                         // clear the textbox area                                for(var contentRow in split){                    // check to see if the deleteRowId is in this row - in which case we want to delete it                    var pos = split[contentRow].search(deleteRowId);                                        if (pos == -1) {                        // -- output the row because its not the one we're deleting                        targetText.val(targetText.val() + split[contentRow] + "\\n");                    }                }                                // ----- create the table from this new content                createTableFromTextbox(targetText, targetTableDiv);                        }                        function addDataToTable() {                                // Usage Website --> http://jquery-csv.googlecode.com/git/examples/basic-usage.html                // Usage Website --> http://code.google.com/p/jquery-csv/wiki/API                // -- get contents of textbox                // -- convert contents to an array                // -- convert array to JSON                // -- process JSON into a table                                                // ===== USER DEFINED VARIABLES =====                //var requiredFieldArray  = requiredFieldArray;   // fields that must have values                //var headerText          = headerText;           // header for the table display                                                // ----- Check if required fields have been filled in                var passedCheck         = true;                var checkFieldVal       = "";                var checkFieldName      = "";                var outputMessage       = "";                                for (var i = 0; i < requiredFieldArray.length; i++) {                    checkFieldVal   = $("#" + requiredFieldArray[i]).val();                    checkFieldName  = $("#" + requiredFieldArray[i]).attr('alt');                                        if (checkFieldVal == "") {                        passedCheck = false;                        outputMessage += "A required field ("+ checkFieldName +") hasn't been filled in. \\n";                    }                }                                                // ----- output the error message to screen                if (!passedCheck) {                    alert(outputMessage);                }                                                // ----- complete adding data to table if no errors                if (passedCheck) {                                        var targetText          = $("#" + targetTextID);        // where the array will be stored                    var targetTableDiv      = $("#" + targetTableDivID);    // where the table will be displayed                    var contentInTable      = false;                        // will hold state of content                                                            // ----- build a delete row button                    var content     = targetText.val().trim();          // trim to remove extra linebreak                    var count       = content.split("\\n").length;      // number of rows in the textbox                    var newCount    = (count == 0) ? 1 : count--;       // gives count without counting title row or extra line break                    var id          = "row_" + newCount;                // id for this row                    var delBtn      = "<div class='button_delete' id='"+ id +"' onclick='tableDeleteRow(\" "+ id +" \")'>X</div>";                                                            // -- check to see if textbox is empty                    // -- if it is - then we need a header row for table function                    // -- create it - add it - then continue                    if (targetText.val() == '') {                        targetText.val(headerText + '\\n');                    }                                                            // -- move the values into the textbox                    var rowData = formTableRow();                    targetText.val(targetText.val() + rowData + '|' + delBtn + '\\n');                                                            // -- call table creation function                     createTableFromTextbox(targetText, targetTableDiv);                                                            // -- clear the textboxes (do after table creation in case it fails - saves reentering data)                    clearDataTextboxes()                                                        } // end checking if passed checks            }                        function createTableFromTextbox(sourceText, targetTableDiv) {                            // -- determine if some content in the textbox - otherwise next stuff will error                contentInTable = (sourceText.val() == '') ? false : true;                                if (contentInTable) {                    // -- Create the HTML table                     var input           = sourceText.val();                    var objectArray     = $.csv.toObjects(input, {                            separator: '|',                            delimiter: '~'                        });                    var jsonHtmlTable   = ConvertJsonToTable(eval(objectArray), 'jsonTable', null, 'Download');                                        // -- Put the HTML table into the display                    targetTableDiv.html(jsonHtmlTable);                }            }SCRIPT;        AddScript($script);    }        public function ScriptCalculatePrice()    {        AddScript("            function calculatePriceFromEach (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromEach');                if(!isNaN(priceEach.val()) && priceEach.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    var qty         = parseFloat(fieldQty.val());                    var price       = parseFloat(priceEach.val());                    var priceNew    = (price * qty);                                         priceTotal.val(priceNew.toFixed(2));                }            }                        function calculatePriceFromTotal (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromTotal');                if(!isNaN(priceTotal.val()) && priceTotal.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    var qty         = parseFloat(fieldQty.val());                    var price       = parseFloat(priceTotal.val());                    var priceNew    = (price / qty);                                         priceEach.val(priceNew.toFixed(2));                }            }        ");                AddScriptOnReady("            $('#' + priceEach).keyup(function() {                var IDfieldQty      = $('#' + fieldQty);                var IDpriceEach     = $('#' + priceEach);                var IDpriceTotal    = $('#' + priceTotal);                            calculatePriceFromEach(IDfieldQty, IDpriceEach, IDpriceTotal);            });                        $('#' + priceTotal).keyup(function() {                var IDfieldQty      = $('#' + fieldQty);                var IDpriceEach     = $('#' + priceEach);                var IDpriceTotal    = $('#' + priceTotal);                 calculatePriceFromTotal(IDfieldQty, IDpriceEach, IDpriceTotal);            });        ");    }            public function ScriptCalculatePriceArray()    {        # FUNCTION :: Allows auto-completing price information - needs livequery for this version                AddScriptInclude('/jslib/jquery.livequery.js');        AddScript("            function calculatePriceFromQuantity (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromQuantity');                if(!isNaN(priceEach.val()) && priceEach.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    // ----- uses the calculate price from each function                    calculatePriceFromEach (fieldQty, priceEach, priceTotal);                }            }                        function calculatePriceFromEach (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromEach');                if(!isNaN(priceEach.val()) && priceEach.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    var qty         = parseFloat(fieldQty.val());                    var price       = parseFloat(priceEach.val());                    var priceNew    = (price * qty);                                         priceTotal.val(priceNew.toFixed(2));                }            }                        function calculatePriceFromTotal (fieldQty, priceEach, priceTotal)            {                //alert('calculatePriceFromTotal');                if(!isNaN(priceTotal.val()) && priceTotal.val().length!=0 && !isNaN(fieldQty.val()) && fieldQty.val().length!=0) {                    var qty         = parseFloat(fieldQty.val());                    var price       = parseFloat(priceTotal.val());                    var priceNew    = (price / qty);                                         priceEach.val(priceNew.toFixed(2));                }            }        ");                AddScriptOnReady("            $('.calc_price_quantity').livequery('keyup', function(event) {                 var ID              = $(this).attr('jqVar1');                var IDfieldQty      = $('#qty_' + ID);                var IDpriceEach     = $('#price_each_' + ID);                var IDpriceTotal    = $('#price_total_' + ID);                calculatePriceFromQuantity(IDfieldQty, IDpriceEach, IDpriceTotal);            });                        $('.calc_price_each').livequery('keyup', function(event) {                 var ID              = $(this).attr('jqVar1');                var IDfieldQty      = $('#qty_' + ID);                var IDpriceEach     = $('#price_each_' + ID);                var IDpriceTotal    = $('#price_total_' + ID);                calculatePriceFromEach(IDfieldQty, IDpriceEach, IDpriceTotal);            });                        $('.calc_price_total').livequery('keyup', function(event) {                 var ID              = $(this).attr('jqVar1');                var IDfieldQty      = $('#qty_' + ID);                var IDpriceEach     = $('#price_each_' + ID);                var IDpriceTotal    = $('#price_total_' + ID);                calculatePriceFromTotal(IDfieldQty, IDpriceEach, IDpriceTotal);            });        ");    }                public function CleanNumber($STR)    {        # FUNCTION :: Strip off all characters except numbers        return preg_replace('/[^0-9]+/', '', $STR);    }    public function CleanMoney($STR)    {        # FUNCTION :: Strip off all characters except numbers and decimal point        return preg_replace('/[^0-9.]+/', '', $STR);     }        public function CleanStringForJqueryHTML($STR)    {        # FUNCTION :: Swap out characters that can't go into a jQuery HTML area        $STR        = htmlentities($STR);                           // convert to HTML entities        $STR        = nl2br($STR);                                  // convert new lines to <br>        $STR        = str_replace(array("\r","\n"),"",$STR);        // removes excessive lines                return $STR;    }                            public function CalculateAssemblyValue($inventory_assemblies_id)    {        # FUNCTION :: Claculate an assembly COGS - return just the value                $total_cost = 0;                if ($inventory_assemblies_id) {            // ----- get all the lines for assembly record            $records = $this->SQL->GetArrayAll(array(                'table' => "inventory_assembly_lines",                'keys'  => "*",                'where' => "`inventory_assemblies_id`='{$inventory_assemblies_id}' AND active=1",            ));            $this->EchoQuery();                        if ($records) {                // ----- calculate the price of assembly - based on actual inventory item cost -----                $assembly_cost = 0;                foreach ($records as $line) {                    if ($line['quantity_out'] > 0) {                        // ----- get the latest price info for this line                        $cost       = $this->InventoryItemLastCost($line['barcode']);                        $linecost   = ($cost * $line['quantity_out']);                                                $assembly_cost += $linecost;                    }                }                $total_cost = $assembly_cost;            }        }                return $total_cost;    }            public function CalculateInventoryValue($BARCODE, $DATE='', $MONEY_FORMATTED=true)    {        # FUNCTION :: Get the value of all the available inventory in the system                $total_cogs     = 0;                $barcode        = $BARCODE;        $SO_Number      = '666-xx';                                                             // create fake Sales Order        $qty_available  = $this->InventoryItemQuantityAvailable($barcode, $DATE);               // get total available in inventory        $now_date       = ($DATE) ? $DATE : date('Y-m-d');                                      // get today's date - or date passed in        $date           = ($DATE) ? date('Y-m-d', strtotime("$DATE + 1 days")) : date('Y-m-d', strtotime("$now_date + 10 days"));    // push into future or will error                        // ----- TESTING VARIABLES -----        if (false) {            $this->EchoVar('qty_available', $qty_available);            $this->EchoVar('now_date', $now_date);            $this->EchoVar('date', $date);        }                        if ($qty_available > 0) {                        #$this->EchoVar('qty_available', $qty_available);                        // ----- inititalize the COGS object class            $objtemp = new Inventory_InventorySalesOrderCalculateCOGS();                        // ----- create a fake sales order with this barcode            $objtemp->Inventory_Current_Salesorder_Arr[$barcode][] = array(                'date'      => $date,                'date_max'  => $date,                'qty_out'   => $qty_available,            );                        // ----- get all inventory counts and pricing information for each of the barcodes            #$this->EchoVar('DATE', $DATE);            $objtemp->GetInventoryCountForBarcodes($DATE);                        #$this->EchoVar('Inventory_In_Arr', $objtemp->Inventory_In_Arr);            #$this->EchoVar('Inventory_Out_Arr', $objtemp->Inventory_Out_Arr);                        // ----- store the actual record            $objtemp->Inventory_Out_Arr[$barcode][0] = array(                'date'          => $date,                'qty_out'       => $qty_available,                'so_number'     => $SO_Number,            );                        #$this->EchoVar('Inventory_Out_Arr', $objtemp->Inventory_Out_Arr);                                    // ========== PROCESS ARRAY FOR COGS ==========            $cogs_arr = $objtemp->ProcessInventoryCounts($SO_Number);                 //$this->EchoVar('cogs_arr', $cogs_arr);                        // ========== CALCULATE THE COGS FOR THIS SALES ORDER ==========            if ($cogs_arr) {                $total_cogs = 0;                if ($cogs_arr) {                    foreach ($cogs_arr AS $value) {                        $total_cogs += $value;                    }                }                                // ----- format to money standard                if ($MONEY_FORMATTED) {                    $total_cogs = money_format('%n', $total_cogs);                }                //$this->EchoVar('COGS value', $total_cogs);            } else {                $total_cogs = $objtemp->Error;            }                                    if (false) {                echo "<div style='width:300px;'></div>";                $objtemp->OutputCOGS($total_cogs);                $objtemp->OutputContent($objtemp->Error, 'error');                $objtemp->OutputContent($objtemp->Message, 'message');            }        }                return $total_cogs;    }        public function InventoryItemQuantityAvailable($BARCODE, $DATE='')    {        # FUNCTION :: Determine how much inventory is available - can check by a given date                if ($BARCODE) {            // ----- get the quantity received -----                        $wheredate = ($DATE) ? " AND date <= '$DATE' " : "";                        $record = $this->SQL->GetRecord(array(                'table' => 'inventory_counts',                'keys'  => '(SUM(`qty_in`) - SUM(`qty_out`)) AS QTY_AVAILABLE',                'where' => "`barcode`='{$BARCODE}' AND active=1 {$wheredate}",            ));            $this->EchoQuery();                        $return = ($record) ? $record['QTY_AVAILABLE'] : 0;                    } else {            $return = 0;        }                return $return;    }        public function GetInventoryBarcodeFromID($inventory_products_id)    {        # FUNCTION :: Get Sales Order Number From a passed in database ID                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_products',            'keys'  => 'barcode',            'where' => "`inventory_products_id`='{$inventory_products_id}'",        ));        $this->EchoQuery();                $barcode = ($record) ? $record['barcode'] : 0;        return $barcode;    }            private static function ____date_sort($a, $b)     {        //return strcmp($a['date'], $b['date']); //only doing string comparison        //$a = convert_date($a['date']);        //$b = convert_date($b['date']);                $a = $a['date'];        $b = $b['date'];                if ($a == $b) {            return 0;        }        return ($a < $b) ? -1 : 1;    }        public function orderBy ($unsorted, $column, $adesc = 'ASC')     {        $sorted = $unsorted;        for ($i=0; $i < sizeof($sorted)-1; $i++) {            for ($j=0; $j<sizeof($sorted)-1-$i; $j++) {                if ($sorted[$j][$column] > $sorted[$j+1][$column]) {                    $tmp = $sorted[$j];                    $sorted[$j] = $sorted[$j+1];                    $sorted[$j+1] = $tmp;                };            };        };                if ($adesc == 'DESC') {            return array_reverse($sorted);        } else {            return $sorted;        };    }    public function GetInventoryInOutPriceReport($BARCODE, $DATE='')    {        # FUNCTION :: Get all the inventory INs and OUTs and what the price must be for those                $Obj            = new Inventory_BarcodeSummaryReport();        $Obj->Barcode   = $BARCODE;        $Obj->Date      = $DATE;        $Obj->Execute();            }                public function GetInventoryMovements($BARCODE='', $DATE='')    {        # FUNCTION :: Get all the inventory INs and OUTs related to a specified barcode                $wheredate = ($DATE) ? " AND inventory_counts.date <= '{$DATE}' " : "";                $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_counts',            'keys'  => "    inventory_counts.*,                             `inventory_purchase_order_received`.`price_total`                               AS IN_PRICE_TOTAL,                            `inventory_purchase_order_received`.`price_shipping_total`                      AS IN_PRICE_SHIPPING_TOTAL,                            `inventory_purchase_order_received`.`date`                                      AS IN_DATE,                            `inventory_purchase_order_received`.`inventory_purchase_order_received_id`      AS IN_REF_ID,                            `inventory_purchase_order_received`.`active`                                    AS IN_ACTIVE,                            `inventory_purchase_order_received`.`notes`                                     AS IN_NOTES,                                                        `inventory_adjustments`.`price_total`                                           AS ADJ_PRICE_TOTAL,                            `inventory_adjustments`.`price_shipping_total`                                  AS ADJ_PRICE_SHIPPING_TOTAL,                            `inventory_adjustments`.`date`                                                  AS ADJ_DATE,                            `inventory_adjustments`.`inventory_adjustments_id`                              AS ADJ_REF_ID,                            `inventory_adjustments`.`active`                                                AS ADJ_ACTIVE,                            `inventory_adjustments`.`notes`                                                 AS ADJ_NOTES,                                                        `inventory_assembly_build`.`date`                                               AS ASSY_DATE,                            `inventory_assembly_build`.`inventory_assembly_build_id`                        AS ASSY_REF_ID,                            `inventory_assembly_build`.`active`                                             AS ASSY_ACTIVE,                            `inventory_assembly_build`.`notes`                                              AS ASSY_NOTES,                                                        `inventory_sales_order_sent`.`date`                                             AS OUT_DATE,                            `inventory_sales_order_sent`.`so_number`                                        AS OUT_SO_NUMBER,                            `inventory_sales_order_sent`.`inventory_sales_order_sent_id`                    AS OUT_SO_REF_ID,                            `inventory_sales_order_sent`.`so_number`                                        AS OUT_REF_NUMBER,                            `inventory_sales_order_sent`.`active`                                           AS OUT_ACTIVE,                            `inventory_sales_order_sent`.`notes`                                            AS OUT_NOTES,                                                        `inventory_products`.`part_cost`                                                AS DEFAULT_PRICE_EACH,                            `inventory_products`.`description`                                              AS description,                            `inventory_products`.`retailer_code`                                            AS retailer_code,                            `inventory_products`.`price_reference_source`,                            `inventory_products`.`price_reference_number`,                            `inventory_products`.`price_reference_date`,                            `inventory_products`.`price_reference_url`,                            `inventory_products`.`price_reference_price`,                            `inventory_products`.`price_reference_quantity`,                            `inventory_products`.`status_use_assembly_pricing`,                            `inventory_products`.`inventory_assemblies_id`            ",            'where' => "`inventory_counts`.`barcode`='{$BARCODE}' {$wheredate} AND                                 (                `inventory_counts`.`active`=1 OR                 `inventory_purchase_order_received`.`active`=1 OR                 `inventory_adjustments`.`active`=1 OR                `inventory_assembly_build`.`active`=1  OR                 `inventory_sales_order_sent`.`active`=1                  ) AND                                 (                `inventory_counts`.`qty_in` > 0 OR                 `inventory_counts`.`qty_out` > 0                 ) AND                                 `inventory_counts`.`active` = 1            ",            'joins' => "                        LEFT JOIN `inventory_purchase_order_received`   ON `inventory_purchase_order_received`.`inventory_purchase_order_received_id`   = `inventory_counts`.`ref_purchase_orders_received_id`                         LEFT JOIN `inventory_adjustments`               ON `inventory_adjustments`.`inventory_adjustments_id`                           = `inventory_counts`.`ref_adjustment_id`                         LEFT JOIN `inventory_assembly_build`            ON `inventory_assembly_build`.`inventory_assembly_build_id`                     = `inventory_counts`.`ref_assembly_build_id`                         LEFT JOIN `inventory_sales_order_sent`          ON `inventory_sales_order_sent`.`inventory_sales_order_sent_id`                 = `inventory_counts`.`ref_sales_order_sent_id`                         LEFT JOIN `inventory_products`                  ON `inventory_products`.`barcode`                                               = `inventory_counts`.`barcode`            ",            'order' => "`inventory_counts`.`date` ASC",        ));        $this->EchoQuery();                return $records;    }                public function InventoryItemLastCost($BARCODE)    {        # FUNCTION :: Get the last cost of received inventory item        #             This is used when making an inventory adjustment and don't have        #             a cost when we scan the item (i.e. physical inventory count)                if ($BARCODE) {                        // ----- get the actual records of all inbound inventory            // ----- NOTE :: Gets slower with time as more records added - use SQL to limit            $records = $this->SQL->GetArrayAll(array(                'table' => 'inventory_counts',                'keys'  => "    inventory_counts.*,                                 `inventory_purchase_order_received`.`price_total`               AS IN_PRICE_TOTAL,                                `inventory_purchase_order_received`.`price_shipping_total`      AS IN_PRICE_SHIPPING_TOTAL,                                `inventory_purchase_order_received`.`date`                      AS IN_DATE,                                                                `inventory_adjustments`.`price_total`                           AS ADJ_PRICE_TOTAL,                                `inventory_adjustments`.`price_shipping_total`                  AS ADJ_PRICE_SHIPPING_TOTAL,                                `inventory_adjustments`.`date`                                  AS ADJ_DATE,                                                                `inventory_assembly_build`.`price_total`                        AS ASSY_PRICE_TOTAL,                                `inventory_assembly_build`.`date`                               AS ASSY_DATE,                                                                `inventory_products`.`part_cost`                                AS DEFAULT_PRICE_EACH                ",                                'where' => "`inventory_counts`.`barcode`='{$BARCODE}' AND `qty_in` > 0 AND                                         (                    `inventory_counts`.`active`=1 OR                     `inventory_purchase_order_received`.`active`=1 OR                     `inventory_adjustments`.`active`=1 OR                    `inventory_assembly_build`.`active`=1                      )                ",                                'joins' => "                            LEFT JOIN `inventory_purchase_order_received`   ON `inventory_purchase_order_received`.`inventory_purchase_order_received_id`   = `inventory_counts`.`ref_purchase_orders_received_id`                             LEFT JOIN `inventory_adjustments`               ON `inventory_adjustments`.`inventory_adjustments_id`                           = `inventory_counts`.`ref_adjustment_id`                             LEFT JOIN `inventory_assembly_build`            ON `inventory_assembly_build`.`inventory_assembly_build_id`                     = `inventory_counts`.`ref_assembly_build_id`                             LEFT JOIN `inventory_products`                  ON `inventory_products`.`barcode`                                               = `inventory_counts`.`barcode`                 ",                                'order' => "inventory_counts_id ASC",  //order inventory_counts_id ASC so same-date records will be wiped out by the newest one            ));            $this->EchoQuery();                                    if ($records) {                                // ----- LOOP THROUGH ALL RECORDS AND DETERMINE WHAT THE ACTUAL LAST ENTRY DATE WAS -----                // ----- convert to date array -----                $date_arr = array();                foreach ($records AS $id => $record) {                                        $date = '1900-02-01';                    $date = ($record['ADJ_DATE'] != null && $record['ADJ_DATE'] != '' && $record['ADJ_DATE'] != ' ')        ? $record['ADJ_DATE']   : $date;                    $date = ($record['ASSY_DATE'] != null && $record['ASSY_DATE'] != '' && $record['ASSY_DATE'] != ' ')     ? $record['ASSY_DATE']  : $date;                    $date = ($record['IN_DATE'] != null && $record['IN_DATE'] != '' && $record['IN_DATE'] != ' ')           ? $record['IN_DATE']    : $date;                                        $date_arr[$date] = $id;                }                                                ksort($date_arr);                       // ----- ksort array to get oldest date first -----                $record_last_date = end($date_arr);     // ----- get the ID from the last value in array (newest date) -----                $record = $records[$record_last_date];  // ----- store the last record for price calculation -----                                                // ----- handle adjustment pricing                $adjustment_shipping_price_total    = (isset($record['ADJ_PRICE_SHIPPING_TOTAL'])) ? $record['ADJ_PRICE_SHIPPING_TOTAL'] : 0;                $in_shipping_price_total            = (isset($record['IN_PRICE_SHIPPING_TOTAL'])) ? $record['IN_PRICE_SHIPPING_TOTAL'] : 0;                                                // ----- GET THE LAST COST -----                $cost_each_default      = (isset($record['DEFAULT_PRICE_EACH'])) ? $record['DEFAULT_PRICE_EACH'] : 0;                $cost_total             = ($record['IN_PRICE_TOTAL'] + $in_shipping_price_total + $record['ADJ_PRICE_TOTAL'] + $adjustment_shipping_price_total + $record['ASSY_PRICE_TOTAL']);                $cost_total             = ($cost_total == 0) ? $cost_each_default : $cost_total;                            } else {                                // ----- this item may have never been received into inventory (i.e. just added)                $record = $this->SQL->GetRecord(array(                    'table' => 'inventory_products',                    'keys'  => '*',                    'where' => "`barcode`='{$BARCODE}' AND active=1",                ));                $this->EchoQuery();                                $cost_each = $record['part_cost'];            }                                                $return = $cost_each;        } else {            $return = 0;        }                return $return;    }        public function GetInventoryQuantityAvailable($BARCODE)    {        # FUNCTION :: Returns the quantity available MINUS the holds (that inventory isn't avaiable)                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_counts',            'keys'  => "SUM(qty_in - qty_out) AS INVENTORY_AVAILABLE,                         (SELECT (SUM(`qty_hold`) - SUM(`qty_release`)) AS INV_CNT_HOLD     FROM `inventory_holds`      WHERE `inventory_holds`.`barcode`='{$BARCODE}' AND `inventory_holds`.active=1) AS INV_CNT_HOLD            ",            'where' => "`barcode`='{$BARCODE}' AND active=1",                    ));        $this->EchoQuery();                $return = ($record) ? ($record['INVENTORY_AVAILABLE'] -  $record['INV_CNT_HOLD']) : 0;        return $return;    }        public function GetInventoryQuantityAvailableAll()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_products',            'keys'  => '                (SELECT SUM(qty_in - qty_out) AS INVENTORY_AVAILABLE FROM inventory_counts WHERE inventory_counts.barcode = inventory_products.barcode AND inventory_counts.active=1) AS INVENTORY_AVAILABLE,                 inventory_products.barcode',            'where' => "inventory_products.active=1",        ));        $this->EchoQuery();                $return = ($records) ? $records : 0;        return $return;    }        public function GetInventoryItemDetailsFromBarcode($BARCODE)    {        # FUNCTION :: Return generic info about inventory item from barcode                $return = 'ERROR :: NO BARCODE PROVIDED';                if ($BARCODE) {            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => 'description, barcode, manufacturer_code, retailer_code',                'where' => "`barcode`='{$BARCODE}'",            ));            $this->EchoQuery();                        $return = ($record) ? "{$record['barcode']}<br />{$record['retailer_code']}<br />{$record['description']}" : "ERROR :: INVENTORY ITEM NOT FOUND";                    }                return $return;    }            public function GetInventoryRecordFromBarcode($BARCODE)    {        # FUNCTION :: Return generic info about inventory item from barcode                $return = 'ERROR :: NO BARCODE PROVIDED';                if ($BARCODE) {            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => 'description, barcode, manufacturer_code, retailer_code',                'where' => "`barcode`='{$BARCODE}'",            ));            $this->EchoQuery();        }                return $record;    }        public function GetInventoryIDFromBarcode($BARCODE)    {        # FUNCTION :: Return generic info about inventory item from barcode                $return = 'ERROR :: NO BARCODE PROVIDED';                if ($BARCODE) {            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => 'inventory_products_id',                'where' => "`barcode`='{$BARCODE}'",            ));            $this->EchoQuery();                        $return = ($record) ? $record['inventory_products_id'] : "ERROR :: INVENTORY ITEM NOT FOUND";        }                return $return;    }        public function GetInventoryItemRetailerCodeFromBarcode($BARCODE)    {        # FUNCTION :: Return retailer_code inventory item from barcode                $return = 'ERROR :: NO BARCODE PROVIDED';                if ($BARCODE) {            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => 'retailer_code',                'where' => "`barcode`='{$BARCODE}'",            ));            $this->EchoQuery();                        $return = ($record) ? $record['retailer_code'] : "ERROR :: INVENTORY ITEM NOT FOUND";                    }                return $return;    }        public function GetInventoryItemDescriptionFromBarcode($BARCODE)    {        # FUNCTION :: Return retailer_code inventory item from barcode                $return = 'ERROR :: NO BARCODE PROVIDED';                if ($BARCODE) {            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => 'description',                'where' => "`barcode`='{$BARCODE}'",            ));            $this->EchoQuery();                        $return = ($record) ? $record['description'] : "ERROR :: INVENTORY ITEM NOT FOUND";                    }                return $return;    }        public function StatusInventoryItemExist($BARCODE)    {        // FUNCTION :: check if a purchase order exists                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_products',            'keys'  => 'inventory_products_id',            'where' => "`barcode`='{$BARCODE}' AND active=1",                    ));        $this->EchoQuery();                $exist = ($record) ? true : false;        return $exist;    }        public function StatusPurchaseOrderExist($PO_NUMBER=0, $inventory_purchase_orders_id=0)    {        // FUNCTION :: check if a purchase order exists                if ($PO_NUMBER) {            $record = $this->SQL->GetRecord(array(                'table' => ' inventory_purchase_orders',                'keys'  => 'inventory_purchase_orders_id',                'where' => "`po_number`='{$PO_NUMBER}' AND active=1",                            ));            $this->EchoQuery();        }                if ($inventory_purchase_orders_id) {            $record = $this->SQL->GetRecord(array(                'table' => ' inventory_purchase_orders',                'keys'  => 'inventory_purchase_orders_id',                'where' => "`inventory_purchase_orders_id`='{$inventory_purchase_orders_id}' AND active=1",                            ));            $this->EchoQuery();        }                        $exist = ($record) ? true : false;        return $exist;    }    	public function StatusSalesOrderExist($SO_NUMBER=0, $inventory_sales_orders_id=0)    {        // FUNCTION :: check if a purchase order exists                if ($SO_NUMBER) {            $record = $this->SQL->GetRecord(array(                'table' => ' inventory_sales_orders',                'keys'  => 'inventory_sales_orders_id',                'where' => "`so_number`='{$SO_NUMBER}' AND active=1",                            ));            $this->EchoQuery();        }                if ($inventory_sales_orders_id) {            $record = $this->SQL->GetRecord(array(                'table' => ' inventory_sales_orders',                'keys'  => 'inventory_sales_orders_id',                'where' => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}' AND active=1",                            ));            $this->EchoQuery();        }                        $exist = (isset($record)) ? true : false;        return $exist;    }        public function StatusVendorRMAExist($RMA_NUMBER)    {        // FUNCTION :: check if a sales order exists                $record = $this->SQL->GetRecord(array(            'table' => ' inventory_vendor_rmas',            'keys'  => 'inventory_vendor_rmas_id',            'where' => "`rma_number`='{$RMA_NUMBER}' AND active=1",                    ));        $this->EchoQuery();                $exist = ($record) ? true : false;        return $exist;    }        public function StatusPurchaseOrder($PO_NUMBER, $inventory_purchase_orders_id=0)    {        // FUNCTION :: determine if there are any outstanding items for this PO                // ----- if we don't have a PO number - get it from the inventory_purchase_orders_id        if ($PO_NUMBER == 0 && $inventory_purchase_orders_id != 0) {                        $record = $this->SQL->GetRecord(array(                'table' => 'inventory_purchase_orders',                'keys'  => 'inventory_purchase_orders_id',                'where' => "`inventory_purchase_orders_id`='{$inventory_purchase_orders_id}'",            ));            $this->EchoQuery();                        if ($record) {                $inventory_purchase_orders_id = $record['inventory_purchase_orders_id'];                //$this->EchoVar('PO_NUMBER', $PO_NUMBER);            }        }                $status = 'ERROR';        if ($inventory_purchase_orders_id) {            $records = $this->SQL->GetArrayAll(array(                'table' => 'inventory_purchase_order_lines',                'keys'  => 'inventory_purchase_order_lines.quantity,                           (SELECT SUM(`quantity`) FROM `inventory_purchase_order_received` WHERE `inventory_purchase_order_received`.`inventory_purchase_order_lines_id` = `inventory_purchase_order_lines`.`inventory_purchase_order_lines_id` AND `inventory_purchase_order_received`.active=1) AS QTY_PREV_RCVD',                'where' => "`inventory_purchase_order_lines`.`inventory_purchase_orders_id`='{$inventory_purchase_orders_id}' AND inventory_purchase_order_lines.active=1",                'joins' => "LEFT OUTER JOIN `inventory_purchase_order_received` ON `inventory_purchase_order_received`.`inventory_purchase_order_lines_id` = `inventory_purchase_order_lines`.`inventory_purchase_order_lines_id`",            ));            $this->EchoQuery(false);                        if ($records) {                $po_closed      = true;                $po_partial     = false;                                foreach ($records as $record) {                    $po_closed      = (($record['quantity'] - $record['QTY_PREV_RCVD']) > 0) ? false : $po_closed;                    $po_partial     = ($record['QTY_PREV_RCVD'] != 0) ? true : $po_partial;                }                $status     = ($po_partial)     ? 'partial'     : 'open';           // determine if PO is partial or open                $status     = ($po_closed)      ? 'closed'      : $status;          // determine if PO is closed            } else {                $status     = 'open';            }        }                return $status;    }        public function StatusPurchaseOrderLine($inventory_purchase_order_lines_id)    {        // FUNCTION :: determine if this PO line has been fully received or not                $qty_ordered    = 0;        $qty_received   = 0;                // ----- get the quantity ordered -----        $record = $this->SQL->GetRecord(array(            'table' => 'inventory_purchase_order_lines',            'keys'  => 'quantity',            'where' => "`inventory_purchase_order_lines_id`='{$inventory_purchase_order_lines_id}' AND active=1",                    ));        $this->EchoQuery();        if ($record) {            $qty_ordered = $record['quantity'];        }                        // ----- get the quantity received -----        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_purchase_order_received',            'keys'  => 'SUM(`quantity`) AS QTY_PREV_RCVD',            'where' => "`inventory_purchase_order_lines_id`='{$inventory_purchase_order_lines_id}' AND active=1 GROUP BY `quantity`",                    ));        $this->EchoQuery();                $qty_received = 0;        foreach ($records AS $record) {            $qty_received += $record['QTY_PREV_RCVD'];        }                        if (false) {            // debug info            echo "<br />qty_received ---> $qty_received";            echo "<br />qty_ordered ---> $qty_ordered";        }                $status = '';        $status = ($qty_received == 0) ? 'open' : $status;        $status = ($qty_ordered > $qty_received && $qty_received != 0) ? 'partial' : $status;                return $status;    }        public function GetSalesOrderNumberFromID($inventory_sales_orders_id)    {        # FUNCTION :: Get Sales Order Number From a passed in database ID                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_sales_orders',            'keys'  => 'so_number',            'where' => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}'",        ));        $this->EchoQuery();                $so_number = ($record) ? $record['so_number'] : 0;        return $so_number;    }        public function GetVendorRMANumberFromID($inventory_vendor_rmas_id)    {        # FUNCTION :: Get Sales Order Number From a passed in database ID                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_vendor_rmas',            'keys'  => 'rma_number',            'where' => "`inventory_vendor_rmas_id`='{$inventory_vendor_rmas_id}'",        ));        $this->EchoQuery();                $so_number = ($record) ? $record['rma_number'] : 0;        return $so_number;    }        public function GetPurchaseOrderNumberFromID($inventory_purchase_orders_id)    {        # FUNCTION :: Get Sales Order Number From a passed in database ID                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_purchase_orders',            'keys'  => 'po_number',            'where' => "`inventory_purchase_orders_id`='{$inventory_purchase_orders_id}'",        ));        $this->EchoQuery();                $po_number = ($record) ? $record['po_number'] : 0;        return $po_number;    }        public function StatusSalesOrder($SO_NUMBER, $inventory_sales_orders_id=0)    {        // FUNCTION :: determine if there are any outstanding items for this SO                // ----- if we don't have a SO number - get it from the inventory_sales_orders_id        if ($SO_NUMBER == 0 && $inventory_sales_orders_id != 0) {            $SO_NUMBER = $this->GetSalesOrderNumberFromID($inventory_sales_orders_id);        }                $status = 'ERROR';        if ($SO_NUMBER) {            $records = $this->SQL->GetArrayAll(array(                'table' => 'inventory_sales_order_lines',                'keys'  => 'inventory_sales_order_lines.quantity,                           (SELECT SUM(`quantity`) FROM `inventory_sales_order_sent` WHERE `inventory_sales_order_sent`.`inventory_sales_order_lines_id` = `inventory_sales_order_lines`.`inventory_sales_order_lines_id` AND `inventory_sales_order_sent`.active=1) AS QTY_PREV_RCVD',                'where' => "`inventory_sales_order_lines`.`so_number`='{$SO_NUMBER}' AND inventory_sales_order_lines.active=1",                'joins' => "LEFT OUTER JOIN `inventory_sales_order_sent` ON `inventory_sales_order_sent`.`inventory_sales_order_lines_id` = `inventory_sales_order_lines`.`inventory_sales_order_lines_id`",            ));            $this->EchoQuery();            $so_closed = true;            $so_partial = false;            foreach ($records as $record) {                $so_closed      = (($record['quantity'] - $record['QTY_PREV_RCVD']) > 0) ? false : $so_closed;                $so_partial     = ($record['QTY_PREV_RCVD'] != 0) ? true : $so_partial;            }            $status = ($so_partial) ? 'partial' : 'open';       // determine if SO is partial or open            $status = ($so_closed) ? 'closed' : $status;        // determine if SO is closed        }                return $status;    }            public function StatusVendorRMA($RMA_NUMBER, $inventory_vendor_rmas_id=0)    {        // FUNCTION :: determine if there are any outstanding items for this SO                // ----- if we don't have a SO number - get it from the inventory_vendor_rmas_id        if ($RMA_NUMBER == 0 && $inventory_vendor_rmas_id != 0) {            $RMA_NUMBER = $this->GetVendorRMANumberFromID($inventory_vendor_rmas_id);        }                $status = 'ERROR';        if ($RMA_NUMBER) {            $records = $this->SQL->GetArrayAll(array(                'table' => 'inventory_vendor_rma_lines',                'keys'  => 'inventory_vendor_rma_lines.quantity,                           (SELECT SUM(`quantity`) FROM inventory_vendor_rma_sent WHERE inventory_vendor_rma_sent.inventory_vendor_rma_lines_id = inventory_vendor_rma_lines.inventory_vendor_rma_lines_id AND inventory_vendor_rma_sent.active=1) AS QTY_PREV_RCVD',                'where' => "`inventory_vendor_rma_lines`.`rma_number`='{$RMA_NUMBER}' AND inventory_vendor_rma_lines.active=1",                'joins' => "LEFT OUTER JOIN `inventory_vendor_rma_sent` ON `inventory_vendor_rma_sent`.`inventory_vendor_rma_lines_id` = `inventory_vendor_rma_lines`.`inventory_vendor_rma_lines_id`",            ));            $this->EchoQuery();            $so_closed = true;            $so_partial = false;            foreach ($records as $record) {                $so_closed      = (($record['quantity'] - $record['QTY_PREV_RCVD']) > 0) ? false : $so_closed;                $so_partial     = ($record['QTY_PREV_RCVD'] != 0) ? true : $so_partial;            }            $status = ($so_partial) ? 'partial' : 'open';       // determine if SO is partial or open            $status = ($so_closed) ? 'closed' : $status;        // determine if SO is closed        }                return $status;    }            public function StatusSalesOrderLine($inventory_sales_order_lines_id)    {        // FUNCTION :: determine if this PO line has been fully received or not                $qty_ordered    = 0;        $qty_sent   = 0;                // ----- get the quantity ordered -----        $record = $this->SQL->GetRecord(array(            'table' => 'inventory_sales_order_lines',            'keys'  => 'quantity',            'where' => "`inventory_sales_order_lines_id`='{$inventory_sales_order_lines_id}' AND active=1",                    ));        $this->EchoQuery();        if ($record) {            $qty_ordered = $record['quantity'];        }                        // ----- get the quantity received -----        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_sales_order_sent',            'keys'  => 'SUM(`quantity`) AS QTY_PREV_SENT',            'where' => "`inventory_sales_order_lines_id`='{$inventory_sales_order_lines_id}' AND active=1 GROUP BY `quantity`",                    ));        $this->EchoQuery();                $qty_sent = 0;        foreach ($records AS $record) {            $qty_sent += $record['QTY_PREV_SENT'];        }                        if (false) {            // debug info            echo "<br />qty_sent ---> $qty_sent";            echo "<br />qty_ordered ---> $qty_ordered";        }                $status = 'ERROR';                                                  // initial ERROR status - everything fails this is what gets returned        $status = ($qty_sent == 0) ? 'open' : 'partial';                    // open or partial check        $status = ($qty_sent == $qty_ordered) ? 'closed' : $status;         // clsoed check        $status = ($qty_sent > $qty_ordered) ? 'ERROR' : $status;           // final error check                        return $status;    }        public function StatusVendorRMALine($inventory_vendor_rma_lines_id)    {        // FUNCTION :: determine if this RMA line has been fully received or not                $qty_ordered    = 0;        $qty_sent   = 0;                // ----- get the quantity ordered -----        $record = $this->SQL->GetRecord(array(            'table' => 'inventory_vendor_rma_lines',            'keys'  => 'quantity',            'where' => "`inventory_vendor_rma_lines_id`='{$inventory_vendor_rma_lines_id}' AND active=1",                    ));        $this->EchoQuery();        if ($record) {            $qty_ordered = $record['quantity'];        }                        // ----- get the quantity received -----        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_vendor_rma_sent',            'keys'  => 'SUM(`quantity`) AS QTY_PREV_SENT',            'where' => "`inventory_vendor_rma_lines_id`='{$inventory_vendor_rma_lines_id}' AND active=1 GROUP BY `quantity`",                    ));        $this->EchoQuery();                $qty_sent = 0;        foreach ($records AS $record) {            $qty_sent += $record['QTY_PREV_SENT'];        }                        if (false) {            // debug info            echo "<br />qty_sent ---> $qty_sent";            echo "<br />qty_ordered ---> $qty_ordered";        }                $status = 'ERROR';                                                  // initial ERROR status - everything fails this is what gets returned        $status = ($qty_sent == 0) ? 'open' : 'partial';                    // open or partial check        $status = ($qty_sent == $qty_ordered) ? 'closed' : $status;         // clsoed check        $status = ($qty_sent > $qty_ordered) ? 'ERROR' : $status;           // final error check                        return $status;    }            public function ConvertArrayToTable($ARR)    {        $output = '';                if (is_array($ARR)) {                        $first = true;            $output .= "<table border='1' id='_jsonTable'>";                        foreach ($ARR as $id => $record) {                                $row_first      = ($first) ? "<tr>" : '';                $row            = "<tr>";                foreach ($record as $k => $v) {                    $row_first     .= ($first) ? "<th>{$k}</th>" : '';                    $row           .= "<td>{$v}</td>";                }                $row_first      .= ($first) ? "</tr>" : '';                $row            .= "</tr>";                                $output .= $row_first . $row;                $first = false;            }                        $output .= "</table>";        }                return $output;    }        }  // -------------- END CLASS ----------------