<?phpclass Inventory_Help_HelpInstructionsModule extends Inventory_InventoryBase{    public $Show_Query                  = false;        // (false) true = show database queries                    public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-08-28',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Tie a class/module to a specific instruction set',            'Update Log'    => array(                '2013-08-28_1.0'    => "Module created",                '2013-09-02_1.1'    => "Tell system where help should be tableview / add / edit record",            ),        );                                        // ========== CONFIGURE THE DATABASE FIELDS ==========        $this->Table                = 'help_instructions_module';        $this->Add_Submit_Name      = 'HELP_INSTRUCTIONS_SUBMIT_ADD';        $this->Edit_Submit_Name     = 'HELP_INSTRUCTIONS_SUBMIT_EDIT';        $this->Index_Name           = 'help_instructions_module_id';        $this->Flash_Field          = 'help_instructions_module_id';        $this->Default_Where        = '';                                           // additional search conditions        $this->Default_Sort         = '';                                           // field for default table sort        $this->Unique_Fields        = '';        $this->Group_By             = '';        $this->Default_Fields       = 'class_name, page_title, help_instructions_id, section_list, section_add, section_edit, section_view';                $this->Field_Titles     = array(            "{$this->Table}.help_instructions_module_id"                => 'Help Instructions Module Id',            "{$this->Table}.page_title"                                 => 'Page Title',            "{$this->Table}.class_name"                                 => 'Class Name',            "{$this->Table}.help_instructions_id"                       => 'Help Instructions Id',                                    "{$this->Table}.section_add"                                => 'Section Add',            "{$this->Table}.section_edit"                               => 'Section Edit',            "{$this->Table}.section_view"                               => 'Section View',            "{$this->Table}.section_list"                               => 'Section List',                        "{$this->Table}.active"                                     => 'Active',            "{$this->Table}.updated"                                    => 'Updated',            "{$this->Table}.created"                                    => 'Created',        );                $this->Join_Array       = array();                                        // ========== CONFIGURE OTHER INFORMATION ==========        //$this->Edit_Links_Count     = 5;        $this->Default_Values       = array();      // default values for the FormArray        $this->Use_Selection_Tab    = true;         // (TRUE) false = hide the search tab on the table        $this->Default_List_Size    = 1000;         // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window            } // -------------- END __construct --------------    public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $action = Get('action');        switch ($action) {                        case 'add':                // ----- Adding a new record                $this->AddRecord();            break;                        //case 'edit':            //    // ----- Edit an existing record            //    $this->EditRecord($this->Inventory_Production_Board_Id);            //break;                        case 'list':            default:                // ----- display list of all assemblies that bave been built                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                        $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                        // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                        switch ($action) {                        default:                $result = '';                $return = ($result) ? 1 : 0;            break;                    }                echo $return;    }            public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE OF ALL RECORDS ============                parent::ProcessTableCell($field, $value, $td_options, $id);                switch ($field) {                        case 'section_add':            case 'section_edit':            case 'section_view':            case 'section_list':                $value = ($value == 1) ? "YES" : "";            break;            default:            break;        }    }                    public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                // ----- required javascript functions        //$this->JavascriptToggleFunctionality();                                             // toggling show/hide a div area                                // ---------- GET LIST OF INSTRUCTIONS ----------        $records = $this->SQL->GetArray(array(            'table' => "help_instructions",            'keys'  => "help_instructions_id, title",            'where' => "active=1",        ));                $instructions_list = "";        foreach($records as $record) {            $instructions_list .= "{$record['help_instructions_id']}=({$record['help_instructions_id']}) {$record['title']}|";        }        $instructions_list = substr($instructions_list, 0, -1);     // trim trailing slash                                // ---------- GET AND PROCESS CLASSES ----------        $class_folder       = "Inventory";        $class_folder_name  = "Inventory_";        $class_extension    = ".php";        $directory          = CLASS_DIR . $class_folder . '/';                                                              // directory to search        $classes_all        = GetDirectory($directory, '.php', 'autoload,archive' . DIRECTORY_SEPARATOR );                  // get all classes        $classes_used       = $this->SQL->GetFieldValues($this->Table, 'class_name', "class_name != '' AND active=1");      // get already used classes        foreach ($classes_all as $k => $v) { $classes_all[$k] = $class_folder_name . $v; }                                  // add needed folder name to class name        foreach ($classes_used as $k => $v) { $classes_used[$k] = $v . $class_extension; }                                  // add needed extension class name                $remove_used_classes = false;                                                                                       // turned off so help can be applied to multiple areas        if ($remove_used_classes) {            $classes_remaining  = array_diff($classes_all, $classes_used);                                                  // remove used classes from all classes        } else {            $classes_remaining  = $classes_all;        }                foreach ($classes_remaining as $key => $value) {            $classes[$key] = str_replace(array('class.', '.php', DIRECTORY_SEPARATOR), array('', '', '_'), $value);        }        $class_list = implode('|', $classes);                                //if ($this->Action == 'ADD') {        //    $base_array = array(        //        "form|$this->Action_Link|post|db_edit_form",        //        "select|Class Name|class_name|Y||{$class_list}",        //        "select|Help Instructions|help_instructions_id|Y||{$instructions_list}",        //        "text|Page Title|page_title|N|60|255",        //    );        //} else {            $base_array = array(                "form|$this->Action_Link|post|db_edit_form",                //"hidden|class_name",                "select|Class Name|class_name|Y||{$class_list}",                //"info|Class Name|{$_POST['FORM_class_name']}",                "select|Help Instructions|help_instructions_id|Y||{$instructions_list}",                "text|Page Title|page_title|N|60|255",                                "checkbox|List All Records|section_list||1|0",                "checkbox|Add Record|section_add||1|0",                "checkbox|Edit Record|section_edit||1|0",                "checkbox|View Record|section_view||1|0",                            );        //}                if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }                public function PostProcessFormValues($FormArray)     {        $FormArray = $this->FormArray_CleanUp($FormArray);                return $FormArray;    }        public function FormArray_CleanUp($FormArray)    {        $field_kickout_string   = 'temp_';                // ----- remove any temp fields from the array so they don't get processed        foreach ($FormArray as $field => $value) {            echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                return $FormArray;    }                    }  // -------------- END CLASS --------------