<?phpclass Inventory_Valuation_Purchaseorder extends Inventory_InventoryBase{    public $Show_Query                  = false;        public $Inventory_Counts_ID         = 0;    public $Date                        = 0;    public $Quantity                    = 0;    public $Barcode                     = 0;            // ----- OUTPUT VARIABLES -----    public $COGS                        = 0;    public $COGS_Array                  = array();            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-13',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-02-24',            'Filename'      => $this->Classname,            'Version'       => '2.0',            'Description'   => 'Calculate the COGS for an inventory record with a purchase order.',            'Update Log'    => array(                '2013-01-11_1.0'    => "Module Created",                '2013-02-24_2.0'    => "Significant resturcturing of all inventory valuation methodology.",            ),        );            } // -------------- END __construct --------------        /*        DESCRIPTION :: We are at a RAW inventory item WITH a purchase order record.        */        public function Execute()    {        if (!$this->Inventory_Counts_ID)   {   echo "<br />ERROR :: {$this->Classname} :: Execute() :: Missing Inventory_Counts_ID";    }                        // ----- GET AND PROCESS THE RECORD        $record         = $this->GetInventoryCounts($this->Inventory_Counts_ID);                // get the inventory_counts record        $this->Barcode  = $record['barcode'];                                                   // set the barcode        $this->Date     = $record['date'];                                                      // set the date                        if (!$this->Date)       {   echo "<br />ERROR :: {$this->Classname} :: Execute() :: Missing Date";        }        if (!$this->Barcode)    {   echo "<br />ERROR :: {$this->Classname} :: Execute() :: Missing Barcode";     }        if (!$this->Quantity)   {   echo "<br />ERROR :: {$this->Classname} :: Execute() :: Missing Quantity";    }                        // ----- CALCULATE THE COGS        $cogs           = $this->CalculateCogs($record);        $cogs_total     = $COGS * $this->Quantity;                        // ----- get the SKU        $sku = $this->GetInventoryRecordFromBarcode($this->Barcode);        $sku = $sku['retailer_code'];                        // ----- STORE THE COGS INFORMATION        $this->COGS  = $cogs;        $this->COGS_Array   = array(                    'barcode'           => $this->Barcode,                    'sku'               => $sku,                    'quantity'          => $this->Quantity,                    'cogs'              => $cogs,                    'class'             => 'Inventory_COGSPurchaseorder',                    'database_record'   => $record,                );    }                public function GetInventoryCounts($inventory_counts_id)    {        $record = $this->SQL->GetRecord(array(            'table' => 'inventory_counts',            'keys'  => '    inventory_counts.*,                             `inventory_purchase_order_received`.`price_total`                               AS IN_PRICE_TOTAL,                            `inventory_purchase_order_received`.`price_each`                                AS IN_PRICE_EACH,                            `inventory_purchase_order_received`.`price_shipping`                            AS IN_PRICE_SHIPPING,                            `inventory_purchase_order_received`.`date`                                      AS IN_DATE,                            `inventory_purchase_order_received`.`inventory_purchase_order_received_id`      AS IN_REF_ID,                            `inventory_purchase_order_received`.`po_number`                                 AS IN_REF_NUMBER,                            `inventory_purchase_order_received`.`active`                                    AS IN_ACTIVE,                            `inventory_purchase_order_received`.`notes`                                     AS IN_NOTES                    ',            'where' => "inventory_counts.inventory_counts_id='{$inventory_counts_id}' AND inventory_counts.active=1",            'joins' => "LEFT JOIN `inventory_purchase_order_received` ON `inventory_purchase_order_received`.`inventory_purchase_order_received_id` = `inventory_counts`.`ref_purchase_orders_received_id`",        ));        $this->EchoQuery();                return $record;    }        public function CalculateCogs($record)    {        # FUNCTION :: DETERMINE THE ACTUAL COGS                $price_each     = (isset($record['IN_PRICE_EACH']) && $record['IN_PRICE_EACH'] > 0) ? $record['IN_PRICE_EACH'] : ($record['IN_PRICE_TOTAL'] / $record['qty_in']);        $shipping_each  = ($record['IN_PRICE_SHIPPING'] / $record['qty_in']);                $cogs_each      = $price_each + $shipping_each;                if (false) {            $this->EchoVar('Function', 'CalculateCogs()');            $this->EchoVar('price_each', $price_each);            $this->EchoVar('shipping_each', $shipping_each);            $this->EchoVar('cogs_each', $cogs_each);        }                return $cogs_each;    }            }  // -------------- END CLASS --------------