<?phpclass Inventory_Valuation_ValueAdjustment extends Inventory_InventoryBase{    public $Show_Query                  = false;            // ----- INPUT VARIABLES -----    public $Inventory_Adjustments_ID    = 0;                    // specific database record were trying to get value for    public $Value_Method                = 'total_average';      // method of value calculation ==> running_average || nearest_item || total_average || fifo            // ----- OTHER VARIABLES -----    public $Running_Average_Days        = 30;                   // how many days to go back for 'running_average' method    public $Use_Adjustment              = true;                 // allow raw adjsutments to count for value calculations    public $Use_Purchaseorder           = true;                 // allow purchase orders to count for value calculations    public $Value_Method_Details_Array  = array();              // will hold details of records used in the calculation            // ----- OUTPUT VARIABLES -----    public $Value_Total                 = 0;    public $Value_Each                  = 0;    public $Value_Array                 = array();    public $Value_Method_Used           = '';            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-13',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-03-15',            'Filename'      => $this->Classname,            'Version'       => '2.1',            'Description'   => 'look at a specific adjustment record and determine its value.',            'Update Log'    => array(                '2013-01-11_1.0'    => "Module Created",                '2013-02-21_1.1'    => "Modified CalculateCogs_TotalAverage() to handle new database fields",                '2013-02-24_2.0'    => "Significant restructuring of all inventory valuation methodology.",                '2013-03-15_2.1'    => "Added Value_Method_Used",            ),        );            } // -------------- END __construct --------------        public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                [DESCRIPTION:]        Given a specific adjustment record (in database) determine the value of it. It will determine the best way to figure out the        adjusment value - including determining if its an assembly record. This class will DEFINATELY have to call out to other value classes.                An adjustment has no record of what parts came in through raw inventory.        The best we can do is determine raw parts cost + labor on the day of the adjustment        If this is a multi-tiered adjustment (actually an assembly item) this class isn't used - instead        we use the COGSAssembly() class which may instantitate another verison of this.                [INPUT:]        PUT INPUTS HERE                        [NOTES]:        Value = money value of an inventory item prior to it being sold        COGS = money value of inventory item at time of sale. COGS can be a summation of all values making up an inventory item.        ";                $output = $this->PseudocodeFormat($output);        return $output;    }        public function Execute()    {        if (!$this->Inventory_Adjustments_ID)   {            $error = "Missing Inventory_Adjustments_ID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- GET AND PROCESS THE RECORD        $record         = $this->GetInventoryAdjustment($this->Inventory_Adjustments_ID);        $barcode        = $record['barcode'];        $quantity       = ($record['quantity_in'] + $record['quantity_out']);                if (!$barcode)    {            $error = "Missing Barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);        }                if (!$quantity)   {            $error = "Missing Quantity";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);        }                        $is_assembly = $this->CheckIfSubAssembly($barcode);                                                         // check if this is an assembly                if ($is_assembly) {                        // ----- This is an assembly so use the assembly valuation function (special case)                                    $build_record = unserialize($record['build_record_array']);            //$this->EchoVar('build_record', $build_record);                        $Obj_ValueAssembly                      = new Inventory_Valuation_ValueAssembly();                      // Instantiate value object            $Obj_ValueAssembly->Value_Method        = $this->Value_Method;                                          // set method to be used in calculation            $Obj_ValueAssembly->Assembly_Record     = $build_record;                                                // set assmebly record to be used in calculation            $Obj_ValueAssembly->CalculateValueEach_TotalAverage_AdjustmentAssembly($barcode);                       // calculate the value                                    $value_each                             = $Obj_ValueAssembly->Value_Each;                               // value of a single item            $value_total                            = ($value_each * $quantity);                                    // value of all items in this adjustment            $this->Value_Method                     = $Obj_ValueAssembly->Value_Method;                             // method actually used to calculate value            $this->Value_Method_Details_Array       = $Obj_ValueAssembly->Value_Method_Details_Array;               // details of how value was calculated            $sku                                    = $this->GetInventoryItemRetailerCodeFromBarcode($barcode);     // get the SKU for item                    } else {                        // ----- we are at a RAW inventory item - calculate its value            $Obj_ValueBarcode                       = new Inventory_Valuation_ValueBarcode();                       // Instantiate value object            $Obj_ValueBarcode->Barcode              = $barcode;            $Obj_ValueBarcode->Value_Method         = $this->Value_Method;            $Obj_ValueBarcode->Execute();                        $value_each                             = $Obj_ValueBarcode->Value_Each;                                // value of a single item            $value_total                            = ($value_each * $quantity);                                    // value of all items in this adjustment            $this->Value_Method                     = $Obj_ValueBarcode->Value_Method;                              // method actually used to calculate value            $this->Value_Method_Details_Array       = $Obj_ValueBarcode->Value_Method_Details_Array;                // details of how value was calculated            $sku                                    = $this->GetInventoryItemRetailerCodeFromBarcode($barcode);     // get the SKU for item                    }                        // ----- STORE THE VALUE INFORMATION        $this->Value_Method_Used    = $this->Value_Method;                              // method actually used to calculate value        $this->Value_Total          = $value_total;        $this->Value_Each           = $value_each;        $this->Value_Array          = array(            'inventory_adjustments_id'  => $this->Inventory_Adjustments_ID,     // record id            'barcode'                   => $barcode,                            // barcode of product            'sku'                       => $sku,                                // sku of product            'quantity'                  => $quantity,                           // quantity of items used to calculate value            'value_each'                => $value_each,                         // value of a single item in this database record            'value_total'               => $value_total,                        // total value of this database record            'class'                     => $this->Classname,                    // this class - for how calculated            'method'                    => $this->Value_Method,                 // method used to get value            'method_details'            => $this->Value_Method_Details_Array,   // details of how method calculated value            //'database_record'         => $record,                             // full datbase record used to calculate value        );    }        public function GetInventoryAdjustment($inventory_adjustments_id)    {        # FUNCTION :: Get the adjustment record from the database                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_adjustments',            'keys'  => '*',            'where' => "inventory_adjustments_id='{$inventory_adjustments_id}' AND active=1",        ));        $this->EchoQuery();                        return $record;    }        public function CheckIfSubAssembly($barcode)    {        // Check if this item is a sub-assembly                $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_assemblies',            'keys'  => 'inventory_assemblies_id',            'where' => "barcode='{$barcode}' AND active=1"        ));        $this->EchoQuery();                $is_subassembly = ($records) ? 1 : 0;        return $is_subassembly;    }        }  // -------------- END CLASS --------------