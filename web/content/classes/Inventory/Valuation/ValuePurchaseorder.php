<?phpclass Inventory_Valuation_ValuePurchaseorder extends Inventory_InventoryBase{    public $Show_Query                  = false;            // ----- INPUT VARIABLES -----    public $Inventory_Purchase_Order_Received_ID         = 0;       // specific database record were trying to get value for            // ----- OUTPUT VARIABLES -----    public $Value_Total                 = 0;    public $Value_Each                  = 0;    public $Value_Array                 = array();            // ----- OTHER VARIABLES -----    public $Value_Method                        = 'purchase_order_value';      // method of value calculation ==> purchase_order_value                public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-13',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-02-24',            'Filename'      => $this->Classname,            'Version'       => '2.0',            'Description'   => 'look at a specific purchase_order record and determine its value.',            'Update Log'    => array(                '2013-01-11_1.0'    => "Module Created",                '2013-02-24_2.0'    => "Significant restructuring of all inventory valuation methodology.",            ),        );            } // -------------- END __construct --------------        public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                [DESCRIPTION:]        Given a specific purchas order record (in database) determine the value of it. This is the most simple class of        all values because the values are stored directly in the database.                [INPUT:]        this->Inventory_Purchase_Order_Received_ID = the specific database record we want                [NOTES]:        Value = money value of an inventory item prior to it being sold        COGS = money value of inventory item at time of sale. COGS can be a summation of all values making up an inventory item.        ";                $output = $this->PseudocodeFormat($output);        return $output;    }        public function Execute()    {        if (!$this->Inventory_Purchase_Order_Received_ID)   {            $error = "Missing Inventory_Purchase_Order_Received_ID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- GET AND PROCESS THE RECORD -----        $record         = $this->GetInventoryPurchaseOrderReceived($this->Inventory_Purchase_Order_Received_ID);        $barcode        = $record['barcode'];        $quantity       = $record['quantity'];                        if (!$barcode)    {            $error = "Missing barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);        }                if (!$quantity)    {            $error = "Missing quantity";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);        }                        // ----- CALCULATE THE VALUE -----        $value_total    = $this->CalculateValueTotal($record);                                  // value of entire database record                                  $value_each     = ($value_total / $quantity);                                           // value of a single item        $sku            = $this->GetInventoryItemRetailerCodeFromBarcode($barcode);             // get the SKU for item                        // ----- STORE THE VALUE INFORMATION -----        $this->Value_Total  = $value_total;        $this->Value_Each   = $value_each;        $this->Value_Array  = array(            'inventory_purchase_order_received_id'  => $this->Inventory_Purchase_Order_Received_ID,     // record id            'barcode'                               => $barcode,                                        // barcode of product            'sku'                                   => $sku,                                            // sku of product            'quantity'                              => $quantity,                                       // quantity of items used to calculate value            'value_each'                            => $value_each,                                     // value of a single item in this database record            'value_total'                           => $value_total,                                    // total value of this database record            'class'                                 => $this->Classname,                                // this class - for how calculated            'method'                                => $this->Value_Method,                             // method used to get value            'method_details'                        => array('N/A'),                                    // details of how method calculated value            //'database_record'                     => $record,                                         // full datbase record used to calculate value        );    }        public function GetInventoryPurchaseOrderReceived($inventory_purchase_order_received_id)    {        # FUNCTION :: Get the PO record from the database                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_purchase_order_received',            'keys'  => '*',            'where' => "inventory_purchase_order_received_id='{$inventory_purchase_order_received_id}' AND active=1",        ));        $this->EchoQuery();                return $record;    }        public function CalculateValueTotal($record)    {        # FUNCTION :: DETERMINE THE ACTUAL VALUE                //$quantity           = (isset($record['quantity']))              ? $record['quantity']               : 0;        $price_total        = (isset($record['price_total']))           ? $record['price_total']            : 0;        $shipping_total     = (isset($record['price_shipping_total']))  ? $record['price_shipping_total']   : 0;        $value_total        = $price_total + $shipping_total;                if (false) {            $this->EchoVar('Function', 'CalculateCogs()');            $this->EchoVar('quantity', $quantity);            $this->EchoVar('price_total', $price_total);            $this->EchoVar('shipping_total', $shipping_total);            $this->EchoVar('value_total', $value_total);        }                return $value_total;    }            }  // -------------- END CLASS --------------