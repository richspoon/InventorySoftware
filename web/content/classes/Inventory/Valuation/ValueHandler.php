<?phpclass Inventory_Valuation_ValueHandler extends Inventory_InventoryBase{    public $Show_Query                  = false;            // ----- INPUT VARIABLES -----    public $Inventory_Counts_ID         = 0;                    // specific inventory_counts_id database record to get value for    public $Barcode                     = 0;                    // specific barcode to get value for    public $Quantity                    = 1;                    // quantity to get value for        // ----- INPUT & OUTPUT VARIABLES -----	public $Build_Record                = array();              // specific build record to get value for    public $Value_Method                = 'total_average';      // method to use to get value    	// ----- OUTPUT VARIABLES -----    public $Value_Total                 = 0;    public $Value_Each                  = 0;    public $Value_Array                 = array();    public $Is_Assembly                 = false;        		// will hold if this is an assembly type record    public $Value_Method_Used           = '';      				// method actually used to get value    		        // ----- OTHER VARIABLES -----        public $Date                        = 0;    public $Record_Type                 = '';           // salesorder || adjustment || assembly    public $Record                      = array();      // will hold the inventory_counts record once pulle dfrom database        public $Inventory_All               = array();      // both INBOUND and OUTBOUND    public $Inventory_In                = array();      // only INBOUND    public $Inventory_Out               = array();      // only OUTBOUND    public $Inventory_In_Out_Matched    = array();      // matching up INBOUND with OUTBOUND    public $Inventory_In_Out_Date       = array();    public $Inventory_Available         = array();      // inventory AVAILABLE for record                    public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-13',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-03-08',            'Filename'      => $this->Classname,            'Version'       => '2.1',            'Description'   => 'Main handler for dertermining value of a given database record',            'Update Log'    => array(                '2013-01-11_1.0'    => "Module Created",                '2013-02-21_1.1'    => "Modified GetInventoryCountsRecord() to handle new database fields",                '2013-02-24_2.0'    => "Significant restructuring of all inventory valuation methodology.",				'2013-03-08_2.1'    => "Modified GetValue_From_Barcode() and modified some variables for additional hlepful output.",            ),        );                            } // -------------- END __construct --------------        public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                [Description:]        This class handles all request to value inventory. Never directly call the subclasses to value (i.e. Puchaseorder, Assembly, or Adjustment).         Requires the input of an inventory_counts_id. Then the class will determine how this inventory_counts record got into        the system and call the appropriate valuation class.                [Input:]        Inventory_Counts_ID --> we're telling this function exactly which inventory_counts record we want to value                        Types of Requests (given a barcode):        What is the total value of all inventory currently in stock        What is the value of the next inventory item to go out        What is the value of a previously sent OUTBOUND invntory item                        [NOTES]:        Value = money value of an inventory item prior to it being sold        COGS = money value of inventory item at time of sale. COGS can be a summation of all values making up an inventory item.        ";                $output = $this->PseudocodeFormat($output);        return $output;    }        public function Execute()    {        if ($this->Inventory_Counts_ID) {                         // ----- trying to find value based on a passed in inventory_counts_id (database record)            $this->GetValue_From_InventoryCountsID();                    } elseif ($this->Barcode) {                        // ----- trying to find value based on just a barcode (don't know if its raw item or assembly yet)            $this->GetValue_From_Barcode();                    }    }            public function GetValue_From_InventoryCountsID()    {        // ----- use the inventory_counts_id to get a full record        // ----- this is used to then determine how the COGS is calculated (ASSY or ADJ)        if (!$this->Inventory_Counts_ID) {             $error = "Missing Inventory_Counts_ID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                                // ----- GET INVENTORY_COUNTS RECORD FROM DATABASE        $this->Record = $this->GetInventoryCountsRecord($this->Inventory_Counts_ID);                        if (!$this->Record) {             $error = "Record not found for Inventory_Counts_ID: {$this->Inventory_Counts_ID}.";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- DETERMINE HOW RECORD SHOULD BE HANDLED        if ($this->Record['qty_out'] > 0) {            // ----- THIS IS AN OUTBOUND RECORD - what we need to process is its INBOUND partner            $this->EchoVar('NOTICE', 'THIS IS AN OUTBOUND RECORD - what we need to process is its INBOUND partner', 'red');            $this->COGSMethodHandler();                    } else {            // ----- inbound inventory record - so determine its value            $this->ValueMethodHandler();        }    }                        public function GetValue_From_Barcode()    {        if (!$this->Barcode) {             $error = "Missing Barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                if (false) {            $this->EchoVar('GetValue_From_Barcode()', '');            $this->EchoVar('Barcode', $this->Barcode);            $this->EchoVar('', '');        }                                // ----- determine if this is an assembly or raw barcode        $this->Is_Assembly = $this->CheckIfAssembly($this->Barcode);                if ($this->Is_Assembly) {                        if (!$this->Build_Record) {                // ----- Get the default build record for this barcoded assembly                $Obj_BuildRecord                            = new Inventory_AssemblyBuildRecord();                      // instantiate build record class                $Obj_BuildRecord->Barcode                   = $this->Barcode;                                           // set barcode we want build record for                $this->Build_Record                         = $Obj_BuildRecord->CreateBuildRecord_FromBarcode();        // get the build record			}						$build_record = $this->Build_Record;                        if (false) {                echo "<div style='background-color:#ccc;'>";                $this->EchoVar('ValueHandler :: build_record', $build_record);                echo "</div>";            }                        if (isset($build_record['ERROR'])) {                                // ----- Failed to find a build record - must treat this assembly like a barcode                $Obj_ValueBarcode                           = new Inventory_Valuation_ValueBarcode();                   // instantiate value class                $Obj_ValueBarcode->Barcode                  = $this->Barcode;                                           // set barcode we want value for                $Obj_ValueBarcode->Quantity                 = $this->Quantity;                                          // set quantity want value for                $Obj_ValueBarcode->Value_Method             = $this->Value_Method;                                      // set method to use to get value                $Obj_ValueBarcode->Execute();                                                                          // execute the value calculation                                // ----- Store the value information                $this->Value_Each                           = $Obj_ValueBarcode->Value_Each;                $this->Value_Total                          = ($this->Value_Each * $this->Quantity);                $this->Value_Array                          = $Obj_ValueBarcode->Value_Array;				$this->Value_Method_Used					= $Obj_ValueBarcode->Value_Method_Used;				                unset($Obj_BuildRecord);                                                                                // memory clean-up                unset($Obj_ValueBarcode);                                                                               // memory clean-up                            } else {                                if (false) {                    echo "<div style='border:1px solid red; padding:5px;'>";                    echo "</br>FINDING VALUE OF AN ASEEMBLY";                    $this->EchoVar('Barcode', $this->Barcode);                    $this->EchoVar('Quantity', $this->Quantity);                    $this->EchoVar('build_record', $build_record);                    echo "</div>";                }                                // ----- Calculate the value for this build record                $Obj_ValueAssembly                          = new Inventory_Valuation_ValueAssembly();                  // instantiate value class                $Obj_ValueAssembly->Barcode                 = $this->Barcode;                                           // set barcode we want value for                $Obj_ValueAssembly->Assembly_Record         = $build_record;                                            // set build record we want value for                $Obj_ValueAssembly->Quantity                = $this->Quantity;                                          // set build record we want value for                $Obj_ValueAssembly->CalculateValueEach_TotalAverage_AdjustmentAssembly();                               // calculate the value of the assembly                            // ----- Store the value information                $this->Value_Each                           = $Obj_ValueAssembly->Value_Each;                $this->Value_Total                          = ($this->Value_Each * $this->Quantity);                $this->Value_Array                          = $Obj_ValueAssembly->Value_Array;                $this->Value_Method_Used   					= $Obj_ValueAssembly->Value_Method_Used;				                unset($Obj_BuildRecord);                                                                                // memory clean-up                unset($Obj_ValueAssembly);                                                                              // memory clean-up                            }                                                                                } else {                        if (false) {                $this->EchoVar('', '');                $this->EchoVar('Classname', $this->Classname);                $this->EchoVar('Barcode', $this->Barcode);                $this->EchoVar('Quantity', $this->Quantity);            }                                    // ----- Instantiate class and call it to process            $Obj_ValueBarcode                           = new Inventory_Valuation_ValueBarcode();                   // instantiate value class            $Obj_ValueBarcode->Barcode                  = $this->Barcode;                                           // set barcode we want value for            $Obj_ValueBarcode->Quantity                 = $this->Quantity;                                          // set quantity want value for            $Obj_ValueBarcode->Value_Method             = $this->Value_Method;                                      // set method to use to get value            $Obj_ValueBarcode->Execute();                                                                           // execute the value calculation                        // ----- Store the value information            $this->Value_Each                           = $Obj_ValueBarcode->Value_Each;            $this->Value_Total                          = ($this->Value_Each * $this->Quantity);            $this->Value_Array                          = $Obj_ValueBarcode->Value_Array;            $this->Value_Method_Used					= $Obj_ValueBarcode->Value_Method_Used;                        unset($Obj_ValueBarcode);                                                                               // memory clean-up                    }    }            public function ValueMethodHandler()    {        # FUNCTION :: Determine which sub-class to use to determine value of this inventory_counts record                $record = $this->Record;        $this->Quantity = $record['qty_in'];                // ----- PROCESS THE RECORD - DETERMINE ITS TYPE - How was this inventory brought into the system        $type       = '';        $type       = ($record['ref_purchase_orders_received_id'] != 0)   ? 'purchaseorder'   : $type;        $type       = ($record['ref_adjustment_id'] != 0)                 ? 'adjustment'      : $type;        $type       = ($record['ref_sales_order_sent_id'] != 0)           ? 'salesorder'      : $type;        $type       = ($record['ref_assembly_build_id'] != 0)             ? 'assembly'        : $type;                        // ----- CALL THE CORRECT VALUE CALCULATING CLASS        switch($type) {            case 'assembly':                                if (false) {                    $this->EchoVar('<br />Record Type', 'assembly');                    $this->EchoVar('Barocde', $record['barcode']);                    $this->EchoVar('Build ID', $record['ref_assembly_build_id']);                    $this->EchoVar('Quantity', $this->Quantity);                }                                                // ----- Instantiate class and call it to process                $Obj_Value_Assembly                                     = new Inventory_Valuation_ValueAssembly();                $Obj_Value_Assembly->Barcode                            = $record['barcode'];                $Obj_Value_Assembly->Inventory_Assembly_Build_ID        = $record['ref_assembly_build_id'];                $Obj_Value_Assembly->Quantity                           = $this->Quantity;                $Obj_Value_Assembly->GetBuildRecord_InventoryAssemblyBuildId();                                                // ----- Store the value information                $this->Value_Each       = $Obj_Value_Assembly->Value_Each;                $this->Value_Total      = ($this->Value_Each * $this->Quantity);                $this->Value_Array      = $Obj_Value_Assembly->Value_Array;                            break;                        case 'purchaseorder':                                if (false) {                    $this->EchoVar('<br />Record Type', 'purchaseorder');                    $this->EchoVar('Barocde', $record['barcode']);                    $this->EchoVar('Counts ID', $record['inventory_counts_id']);                    $this->EchoVar('Quantity', $this->Quantity);                }                                                // ----- Instantiate class and call it to process                $Obj_Value_PurchaseOrder                                            = new Inventory_Valuation_ValuePurchaseorder();                $Obj_Value_PurchaseOrder->Inventory_Purchase_Order_Received_ID      = $record['ref_purchase_orders_received_id'];                $Obj_Value_PurchaseOrder->Value_Method                              = 'purchase_order_value';                $Obj_Value_PurchaseOrder->Execute();                                                // ----- Store the value information                $this->Value_Each       = $Obj_Value_PurchaseOrder->Value_Each;                $this->Value_Total      = ($this->Value_Each * $this->Quantity);                $this->Value_Array      = $Obj_Value_PurchaseOrder->Value_Array;                            break;                        case 'adjustment':                                // ----- Inventory record shows it was put into system as an adjustment                                if (false) {                    $this->EchoVar('<br />Record Type', 'adjustment');                    $this->EchoVar('Barocde', $record['barcode']);                    $this->EchoVar('Adjustment ID', $record['ref_adjustment_id']);                    $this->EchoVar('Quantity', $this->Quantity);                }                                                // ----- Instantiate class and call it to process                $Obj_Value_Adjustment                                   = new Inventory_Valuation_ValueAdjustment();                $Obj_Value_Adjustment->Inventory_Adjustments_ID         = $record['ref_adjustment_id'];                $Obj_Value_Adjustment->Value_Method                     = 'total_average';                $Obj_Value_Adjustment->Execute();                                                // ----- Store the value information                $this->Value_Each       = $Obj_Value_Adjustment->Value_Each;                $this->Value_Total      = ($this->Value_Each * $this->Quantity);                $this->Value_Array      = $Obj_Value_Adjustment->Value_Array;                            break;                        case 'default':                // ----- store the Value information                $this->Value_Each       = 0;                $this->Value_Total      = 0;                $this->Value_Array      = array('NOTE'=>'NO INFORMATION FOUND FOR BARCODE');            break;        }    }            public function COGSMethodHandler($record)    {                $record = $this->Record;        $this->Quantity = $record['qty_in'];                        // ----- PROCESS THE RECORD - DETERMINE ITS TYPE - How was this inventory brought into the system        $type       = '';        $type       = ($record['ref_purchase_orders_received_id'] != 0)   ? 'purchaseorder'   : $type;        $type       = ($record['ref_adjustment_id'] != 0)                 ? 'adjustment'      : $type;        $type       = ($record['ref_sales_order_sent_id'] != 0)           ? 'salesorder'      : $type;        $type       = ($record['ref_assembly_build_id'] != 0)             ? 'assembly'        : $type;                                        $Obj_Movement               = new Inventory_GetRecordUsedOnDate();        $Obj_Movement->Barcode      = $record['barcode'];        $Obj_Movement->Date         = $record['date'];        $Obj_Movement->Quantity     = $this->Quantity;        $Obj_Movement->Record_Type  = 'assembly';                // ----- Create the matched array of inbound and outbound        $Obj_Movement->Execute();                #echo "<br />INVENTORY IN / OUT<br />" .             $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_All);        #echo "<br />INVENTORY IN<br />" .                   $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_In);        #echo "<br />INVENTORY OUT<br />" .                  $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_Out);        #echo "<br />INVENTORY IN - OUT COMBINED<br />" .    $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_In_Out_Matched);        #echo "<br />DATE ARRAY<br />" .                     $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_In_Out_Date);        #echo "<br />INVENTORY AVAILABLE<br />" .            $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_Available);                        // ----- Search the array looking for an inbound partner        $count_records_usable = 0;        $records_usable = array();                foreach ($Obj_Movement->Inventory_In_Out_Matched as $rec_z) {            if ($type == 'assembly') {                if (($rec_z['source_type_out'] == $type) && ($rec_z['source_id_out'] == $record['ref_assembly_build_id']) && ($count_records_usable < $this->Quantity)) {                    $records_usable[] = $rec_z;                    $count_records_usable++;                }            }        }                        ////$record = $records_usable[0];                        //$this->EchoVar('records_usable', $records_usable);        foreach ($records_usable as $rec_u) {            // Instantiate new handler to process this record            //$this->EchoVar('', 'ABOUT TO REINSTANTIATE');                        $Obj_Handler = new Inventory_COGSHandler();            $Obj_Handler->Inventory_Counts_ID   = $rec_u['inventory_counts_id_in'];            $Obj_Handler->Quantity              = 1;        // we're looping individual records so qty should be 1            $Obj_Handler->Execute();                        // ----- store the COGS information            $this->COGS             += $Obj_Handler->COGS;            $this->COGS_Array[]      = $Obj_Handler->COGS_Array;            //$this->COGS_Array = array('test'=>'test',);            //$this->COGS_Array = 'test';        }    }                        public function GetInventoryCountsRecord($inventory_counts_id)    {        # FUNCTION :: Get an inventory_counts record                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_counts',            'keys'  => "*",            'where' => "inventory_counts_id='{$inventory_counts_id}' AND active=1",        ));        $this->EchoQuery();                return $record;    }        public function CheckIfAssembly($barcode)    {        // Check if this item is a sub-assembly                $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_assemblies',            'keys'  => 'inventory_assemblies_id',            'where' => "barcode='{$barcode}' AND active=1"        ));        $this->EchoQuery();                $is_subassembly = ($records) ? 1 : 0;        return $is_subassembly;    }        }  // -------------- END CLASS --------------