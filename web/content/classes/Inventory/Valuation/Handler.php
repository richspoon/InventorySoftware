<?phpclass Inventory_Valuation_Handler extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Barcode                     = 0;    public $Date                        = 0;    public $Quantity                    = 0;    public $Record_Type                 = '';   // salesorder || adjustment || assembly        public $Inventory_Counts_ID         = array();        public $Force_Exit                  = false;        // ----- OUTPUT VARIABLES -----    public $COGS                        = 0;                // will hold the total value of the $COGS_Array    public $COGS_Array                  = array();          // will hold the details of any value being calculated                        public $Inventory_All               = array();      // both INBOUND and OUTBOUND    public $Inventory_In                = array();      // only INBOUND    public $Inventory_Out               = array();      // only OUTBOUND    public $Inventory_In_Out_Matched    = array();      // matching up INBOUND with OUTBOUND    public $Inventory_In_Out_Date       = array();    public $Inventory_Available         = array();      // inventory AVAILABLE for record        public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-13',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-02-24',            'Filename'      => $this->Classname,            'Version'       => '2.0',            'Description'   => 'Determine what type of record this is were trying to calculate COGS for.',            'Update Log'    => array(                '2013-01-11_1.0'    => "Module Created",                '2013-02-21_1.1'    => "Modified GetInventoryCountsRecord() to handle new database fields",                '2013-02-24_2.0'    => "Significant restructuring of all inventory valuation methodology.",            ),        );                            } // -------------- END __construct --------------            public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                [Description:]        This class handles all request to value inventory. Never directly call the subclasses to value (i.e. Puchaseorder, Assembly, or Adjustment).                 [Input:]        Inventory_Counts_ID --> we're telling this function exactly which inventory_counts record we want to value                        Types of Requests (given a barcode):        What is the total value of all inventory currently in stock        What is the value of the next inventory item to go out        What is the value of a previously sent OUTBOUND invntory item        ";                $output = $this->PseudocodeFormat($output);        return $output;    }            public function Execute()    {        $runswitch = true;                        // ----- use the inventory_counts_id to get a full record        // ----- this is used to then determine how the COGS is calculated (ASSY or ADJ)        if (!$this->Inventory_Counts_ID) {             $error = "Missing Inventory_Counts_ID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        //$this->EchoVar('', '');        //$this->EchoVar('Initializing Class', 'COGSHandler()');        //$this->EchoVar('Inventory_Counts_ID', $this->Inventory_Counts_ID);                        // ----- GET FULL RECORD FROM DATABASE        $record = $this->GetInventoryCountsRecord($this->Inventory_Counts_ID);        //$this->EchoVar('COGSHandler() :: record', $record);                                // ----- PROCESS THE RECORD - DETERMINE ITS TYPE - How was this inventory brought into the system        $type       = '';        $type       = ($record['ref_purchase_orders_received_id'] != 0)   ? 'purchaseorder'   : $type;        $type       = ($record['ref_adjustment_id'] != 0)                 ? 'adjustment'      : $type;        $type       = ($record['ref_sales_order_sent_id'] != 0)           ? 'salesorder'      : $type;        $type       = ($record['ref_assembly_build_id'] != 0)             ? 'assembly'        : $type;                        // -- THIS IS AN OUTBOUND RECORD - what we need to process is its INBOUND partner        if ($record['qty_out'] > 0) {            $this->EchoVar('NOTICE', 'THIS IS AN OUTBOUND RECORD - what we need to process is its INBOUND partner', 'red');                                    $Obj_Movement               = new Inventory_GetRecordUsedOnDate();            $Obj_Movement->Barcode      = $record['barcode'];            $Obj_Movement->Date         = $record['date'];            $Obj_Movement->Quantity     = $this->Quantity;            $Obj_Movement->Record_Type  = 'assembly';                        // ----- Create the matched array of inbound and outbound            $Obj_Movement->Execute();                        #echo "<br />INVENTORY IN / OUT<br />" .             $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_All);            #echo "<br />INVENTORY IN<br />" .                   $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_In);            #echo "<br />INVENTORY OUT<br />" .                  $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_Out);            #echo "<br />INVENTORY IN - OUT COMBINED<br />" .    $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_In_Out_Matched);            #echo "<br />DATE ARRAY<br />" .                     $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_In_Out_Date);            #echo "<br />INVENTORY AVAILABLE<br />" .            $Obj_Movement->ConvertArrayToTable($Obj_Movement->Inventory_Available);                                    // ----- Search the array looking for an inbound partner            $count_records_usable = 0;            $records_usable = array();                        foreach ($Obj_Movement->Inventory_In_Out_Matched as $rec_z) {                if ($type == 'assembly') {                    if (($rec_z['source_type_out'] == $type) && ($rec_z['source_id_out'] == $record['ref_assembly_build_id']) && ($count_records_usable < $this->Quantity)) {                        $records_usable[] = $rec_z;                        $count_records_usable++;                    }                }            }                                    ////$record = $records_usable[0];                                    //$this->EchoVar('records_usable', $records_usable);            foreach ($records_usable as $rec_u) {                // Instantiate new handler to process this record                //$this->EchoVar('', 'ABOUT TO REINSTANTIATE');                                $Obj_Handler = new Inventory_COGSHandler();                $Obj_Handler->Inventory_Counts_ID   = $rec_u['inventory_counts_id_in'];                $Obj_Handler->Quantity              = 1;        // we're looping individual records so qty should be 1                $Obj_Handler->Execute();                                // ----- store the COGS information                $this->COGS             += $Obj_Handler->COGS;                $this->COGS_Array[]      = $Obj_Handler->COGS_Array;                //$this->COGS_Array = array('test'=>'test',);                //$this->COGS_Array = 'test';            }                                    // ----- because we re-instantiated this class - don't continue running below once done here            $runswitch = false;        }                        if ($runswitch) {        // ----- CALL THE CORRECT COGS CALCULATING CLASS        switch($type) {            case 'assembly':                                if (false) {                    $this->EchoVar('<br />Record Type', 'assembly');                    $this->EchoVar('Barocde', $record['barcode']);                    $this->EchoVar('Build ID', $record['ref_assembly_build_id']);                    $this->EchoVar('Quantity', $this->Quantity);                }                                                $Obj_Assy = new Inventory_COGSAssembly();                $Obj_Assy->Barcode                          = $record['barcode'];                $Obj_Assy->Inventory_Assembly_Build_ID      = $record['ref_assembly_build_id'];                $Obj_Assy->Quantity                         = $this->Quantity;                $Obj_Assy->GetBuildRecord_InventoryAssemblyBuildId();                                                // ----- store the COGS information                $this->COGS         += $Obj_Assy->COGS;                $this->COGS_Array    = $Obj_Assy->COGS_Array;                            break;                        case 'purchaseorder':                                if (false) {                    $this->EchoVar('<br />Record Type', 'purchaseorder');                    //$this->EchoVar('Barocde', $record['barcode']);                    $this->EchoVar('Counts ID', $record['inventory_counts_id']);                    $this->EchoVar('Quantity', $this->Quantity);                }                                                // ----- Instantiate class and call it to process                $Obj_Purchase = new Inventory_COGSPurchaseorder();                $Obj_Purchase->Inventory_Counts_ID  = $record['inventory_counts_id'];                $Obj_Purchase->Quantity             = $this->Quantity;                $Obj_Purchase->Execute();                                                // ----- store the COGS information                $this->COGS         += $Obj_Purchase->COGS;                $this->COGS_Array    = $Obj_Purchase->COGS_Array;                                            break;                        case 'adjustment':                                // ----- Inventory record shows it was put into system as an adjustment                                if (false) {                    $this->EchoVar('<br />Record Type', 'adjustment');                    //$this->EchoVar('Barocde', $record['barcode']);                    $this->EchoVar('Adjustment ID', $record['ref_adjustment_id']);                    $this->EchoVar('Quantity', $this->Quantity);                }                                                // ----- Instantiate class and call it to process                $Obj_Adj = new Inventory_COGSAdjustment();                $Obj_Adj->Inventory_Adjustments_ID  = $record['ref_adjustment_id'];                $Obj_Adj->Quantity                  = $this->Quantity;                $Obj_Adj->Execute();                                #$this->EchoVar('Obj_Adj->COGS', $Obj_Adj->COGS);                #$this->EchoVar('Obj_Adj->COGS_Array', $Obj_Adj->COGS_Array);                                // ----- store the COGS information                $this->COGS  += $Obj_Adj->COGS;                $this->COGS_Array    = $Obj_Adj->COGS_Array;                            break;                        case 'salesorder':            break;                        case 'default':                // ----- store the COGS information                $this->COGS  += 0;                $this->COGS_Array    = array('NOTE'=>'NO INFORMATION FOUND FOR BARCODE');            break;        }        } // end runswitch         else {            //$this->EchoVar('NOTICE', 'Bypassing runswitch', 'red');        }                                        /*        if ($this->Barcode) {            $is_assembly    = $this->CheckIfAssembly($barcode);        }                $is_raw         = $this->CheckIfRaw($barcode);        $is_adjustment  = $this->CheckIfAdjustment($barcode);        */            }                    public function GetInventoryCountsRecord($inventory_counts_id)    {        # FUNCTION :: Get a full inventory_counts record                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_counts',            'keys'  => "    inventory_counts.*,                             `inventory_purchase_order_received`.`price_total`                               AS IN_PRICE_TOTAL,                            `inventory_purchase_order_received`.`price_shipping_total`                      AS IN_PRICE_SHIPPING_TOTAL,                            `inventory_purchase_order_received`.`date`                                      AS IN_DATE,                            `inventory_purchase_order_received`.`inventory_purchase_order_received_id`      AS IN_REF_ID,                            `inventory_purchase_order_received`.`po_number`                                 AS IN_REF_NUMBER,                            `inventory_purchase_order_received`.`active`                                    AS IN_ACTIVE,                            `inventory_purchase_order_received`.`notes`                                     AS IN_NOTES,                                                        `inventory_adjustments`.`price_total`                                           AS ADJ_PRICE_TOTAL,                            `inventory_adjustments`.`price_shipping_total`                                  AS ADJ_PRICE_SHIPPING_TOTAL,                                                        `inventory_adjustments`.`date`                                                  AS ADJ_DATE,                            `inventory_adjustments`.`inventory_adjustments_id`                              AS ADJ_REF_ID,                            `inventory_adjustments`.`active`                                                AS ADJ_ACTIVE,                            `inventory_adjustments`.`notes`                                                 AS ADJ_NOTES,                                                        `inventory_assembly_build`.`price_total`                                        AS ASSY_PRICE_TOTAL,                            `inventory_assembly_build`.`date`                                               AS ASSY_DATE,                            `inventory_assembly_build`.`inventory_assembly_build_id`                        AS ASSY_REF_ID,                            `inventory_assembly_build`.`active`                                             AS ASSY_ACTIVE,                            `inventory_assembly_build`.`notes`                                              AS ASSY_NOTES                                        ",            'where' => "`inventory_counts`.`inventory_counts_id`='{$inventory_counts_id}' AND `inventory_counts`.`active`=1",            'joins' => "                        LEFT JOIN `inventory_purchase_order_received`   ON `inventory_purchase_order_received`.`inventory_purchase_order_received_id`   = `inventory_counts`.`ref_purchase_orders_received_id`                         LEFT JOIN `inventory_adjustments`               ON `inventory_adjustments`.`inventory_adjustments_id`                           = `inventory_counts`.`ref_adjustment_id`                         LEFT JOIN `inventory_assembly_build`            ON `inventory_assembly_build`.`inventory_assembly_build_id`                     = `inventory_counts`.`ref_assembly_build_id`             ",        ));        $this->EchoQuery();                return $record;    }                            public function CheckIfAssembly($barcode)    {        // Check if this item is a sub-assembly                $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_assemblies',            'keys'  => 'inventory_assemblies_id',            'where' => "barcode='{$barcode}' AND active=1"        ));        $this->EchoQuery();                $is_subassembly = ($records) ? 1 : 0;        return $is_subassembly;    }        public function _CheckIfRaw($barcode)    {        }        public function _CheckIfAdjustment($barcode)    {        }    }  // -------------- END CLASS --------------