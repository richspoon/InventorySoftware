<?phpclass Inventory_Valuation_ValueBarcode extends Inventory_InventoryBase{    public $Show_Query                  = false;            // ----- INPUT VARIABLES -----    public $Barcode                             = 0;                    // barcode you want value for    public $Date                                = '';                   // if running FIFO method - this is the date of _____ ???    public $Value_Method                        = 'total_average';      // method of value calculation ==> running_average || nearest_item || total_average || fifo    public $Quantity                            = 1;        // ----- OTHER VARIABLES -----    public $Running_Average_Days        = 30;                   // how many days to go back for 'running_average' method    public $Use_Adjustment              = true;                 // allow raw adjsutments to count for value calculations    public $Use_Purchaseorder           = true;                 // allow purchase orders to count for value calculations    public $Value_Method_Details_Array  = array();              // will hold details of records used in the calculation    public $Used_Method                 = '';                   // will store the method used to calculate value            // ----- OUTPUT VARIABLES -----    public $Value_Total                 = 0;    public $Value_Each                  = 0;    public $Value_Array                 = array();    public $Value_Method_Used           = '';            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-02-27',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.1',            'Description'   => 'look at a specific barcode and determine its value.',            'Update Log'    => array(                '2013-02-27_1.0'    => "Module Created",                '2013-03-15_1.1'    => "Added Value_Method_Used",            ),        );            } // -------------- END __construct --------------        public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                [DESCRIPTION:]        Calculate the value for a barcode                [INPUT:]        this->Value_Method:        total_average = Takes all inventory items ever purchased (or inbound) and averages cost        fifo = Functionality not implemented                [NOTES]:        Value = money value of an inventory item prior to it being sold        COGS = money value of inventory item at time of sale. COGS can be a summation of all values making up an inventory item.        ";                $output = $this->PseudocodeFormat($output);        return $output;    }        public function Execute()    {                if (!$this->Barcode)    {            $error = "Missing Barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                                // ----- CALCULATE THE VALUE        $value_each     = $this->CalculateValueEach();                                   // value of entire database record                                  $value_total    = ($value_each * $this->Quantity);                                      // value of a single item        $sku            = $this->GetInventoryItemRetailerCodeFromBarcode($this->Barcode);       // get the SKU for item                        // ----- STORE THE VALUE INFORMATION        $this->Value_Method_Used    = $this->Value_Method;                              // method actually used to calculate value        $this->Value_Each           = $value_each;        $this->Value_Total          = $value_total;        $this->Value_Array          = array(            'id'                        => 0,                                   // record id            'barcode'                   => $this->Barcode,                      // barcode of product            'sku'                       => $sku,                                // sku of product            'quantity'                  => $this->Quantity,                     // quantity of items used to calculate value            'value_each'                => $value_each,                         // value of a single item in this database record            'value_total'               => $value_total,                        // total value of this database record            'class'                     => $this->Classname,                    // this class - for how calculated            'method'                    => $this->Value_Method,                 // method used to get value            'method_details'            => $this->Value_Method_Details_Array,   // details of how method calculated value            //'database_record'         => $record,                             // full datbase record used to calculate value        );    }        public function CalculateValueEach()    {        # FUNCTION :: Determine which method of valuation to use                switch ($this->Value_Method) {            case 'total_average':                //$this->EchoVar('total_average');                $value = $this->CalculateValueEach_TotalAverage($this->Barcode);            break;                        case 'fifo':                //$this->EchoVar('fifo');                $value = $this->CalculateValueEach_FIFO($this->Barcode, $this->Date);            break;                        case 'running_average':                //$this->EchoVar('running_average');                $value = $this->CalculateValueEach_RunningAverage($this->Barcode);            break;                        case 'nearest_item':                //$this->EchoVar('nearest_item');                $value = $this->CalculateValueEach_NearestItem($this->Barcode);            break;                        default:                $error = "No Method provided";                $this->AddError($this->Classname, __FUNCTION__, $error);                $this->EchoError($this->Classname, __FUNCTION__, $error, true);                $value = 0;            break;        }                        // ----- FAILED TO GET ANY COST FOR ITEM        if (!$value) {            $this->Value_Method     = 'default_value';                                              // set status of what method actually used            $value                  = $this->CalculateValueEach_DefaultCost($this->Barcode);        // get default value        }                return $value;    }        public function CalculateValueEach_DefaultCost($barcode=0)    {        # FUNCTION :: Calculate the price for a new barcode item based on the logic of this function        #     NOTE :: Usually this is used when making an adjustment - to calculate value of each adjustment item. This should be last resort.        #        #   METHOD :: DefaultCost - Use the default cost stored for this barcode.                        $barcode                    = ($barcode != 0) ? $barcode : $this->Barcode;      // get barcode        $value_each                 = 0;                                                // initialize return variable        $this->Used_Default_Value   = 1;                                                // set status that we had to use default value                        if (!$barcode) {            $error = "No barcode provided";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- get default value from database        $record = $this->SQL->GetRecord(array(            'table' => 'inventory_products',            'keys'  => '*',            'where' => "barcode='{$barcode}' AND active=1",        ));        $this->EchoQuery();                if ($record) {            // ----- store the values -----            $value_each = $record['part_cost'];            $this->Value_Method_Details_Array[] = array(                'default_cost'              => $value_each,                'price_reference_source'    => $record['price_reference_source'],                'price_reference_number'    => $record['price_reference_number'],                'price_reference_date'      => $record['price_reference_date'],                'price_reference_url'       => $record['price_reference_url'],                'price_reference_price'     => $record['price_reference_price'],                'price_reference_quantity'  => $record['price_reference_quantity'],                'price_reference_notes'     => $record['price_reference_notes'],            );        }                        return $value_each;    }        public function CalculateValueEach_TotalAverage($barcode=0)    {        # FUNCTION :: DETERMINE THE ACTUAL VALUE - Using a total average of all INBOUND inventory                $barcode                = ($barcode != 0) ? $barcode : $this->Barcode;          // get barcode                if (!$barcode) {            $error = "No barcode provided";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $records                = $this->GetInventoryMovements($barcode);               // get all inventory_counts records for this barcode        $use_adjustment         = $this->Use_Adjustment;                                // allow raw adjsutments to count for COGS calculations        $use_purchaseorder      = $this->Use_Purchaseorder;                             // allow purchase orders to count for COGS calculations        $total_loop_value       = 0;        $total_loop_quantity    = 0;        $value_each             = 0;                foreach ($records as $record) {                        if ($record['qty_in'] > 0) {                // ----- initialize variables                $price_total            = 0;                $price_shipping_total   = 0;                                // ----- pull information from the database record                if (($record['ref_purchase_orders_received_id'] != 0) && $use_purchaseorder) {                    $price_total            = $record['IN_PRICE_TOTAL'];                    $price_shipping_total   = $record['IN_PRICE_SHIPPING_TOTAL'];                }                                // ----- pull information from the database record                if (($record['ref_adjustment_id'] != 0) && $use_adjustment) {                    $price_total            = $record['ADJ_PRICE_TOTAL'];                    $price_shipping_total   = $record['ADJ_PRICE_SHIPPING_TOTAL'];                }                                // ----- calculate the actual value                $quantity               = $record['qty_in'];                $value_total            = $price_total + $price_shipping_total;                $value_each             = ($value_total / $quantity);                                // ----- store the VALUE information                $total_loop_value       += $value_total;                $total_loop_quantity    += $quantity;                                $this->Value_Method_Details_Array[] = array(                    'inventory_counts_id'               => $record['inventory_counts_id'],                    'ref_purchase_orders_received_id'   => $record['ref_purchase_orders_received_id'],                    'ref_adjustment_id'                 => $record['ref_adjustment_id'],                    'quantity'                          => $quantity,                    'value_each'                        => $value_each,                    'value_total'                       => $value_total,                    'date'                              => $record['date'],                );            }        }                        // ----- calculate the total average        if ($total_loop_value && $total_loop_quantity) {            $value_each = ($total_loop_value / $total_loop_quantity);        }                return $value_each;    }            // ---------- FUNCTIONS NOT IMPLEMENTED ----------    public function CalculateValueEach_RunningAverage($barcode=0)    {        # FUNCTION :: DETERMINE THE ACTUAL COGS - Using a time-based average                $barcode                = ($barcode != 0) ? $barcode : $this->Barcode;          // get barcode                if (!$barcode) {            $error = "No barcode provided";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $error = "Function not implemented";        $this->AddError($this->Classname, __FUNCTION__, $error);        $this->EchoError($this->Classname, __FUNCTION__, $error, true);        exit();    }        public function CalculateValueEach_NearestItem($barcode=0)    {        # FUNCTION :: DETERMINE THE ACTUAL COGS - By finding the closest item by date (in past)                $barcode                = ($barcode != 0) ? $barcode : $this->Barcode;          // get barcode                if (!$barcode) {            $error = "No barcode provided";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $error = "Function not implemented";        $this->AddError($this->Classname, __FUNCTION__, $error);        $this->EchoError($this->Classname, __FUNCTION__, $error, true);        exit();    }        public function CalculateValueEach_FIFO($barcode=0, $date='')    {        $barcode                = ($barcode != 0) ? $barcode : $this->Barcode;          // get barcode                if (!$barcode) {            $error = "No barcode provided";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $error = "Function not implemented";        $this->AddError($this->Classname, __FUNCTION__, $error);        $this->EchoError($this->Classname, __FUNCTION__, $error, true);        exit();    }        }  // -------------- END CLASS --------------