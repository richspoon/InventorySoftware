<?phpclass Inventory_Valuation_QuantitySummaryReport extends Inventory_InventoryBase{    public $Show_Query                  = false;		// (false) TRUE = show database queries in this class            // ----- INPUT VARIABLES -----    public $Barcode                     = 0;            // barcode we're creating report for    public $Sub_Report                  = false;        // (FALSE) true = hide certain details in report         // ----- OUTPUT VARIABLES -----    public $Sumary_Table                = "";           // will hold the final summary table    public $Report                      = "";           // will hold the final report (also returned by functions)        // ----- OTHER VARIABLES -----    public $Show_Method_Details         = false;    public $Show_Assembly_Details       = false;        public $Location_Records            = array();    public $Count_Records               = array();    public $Report_Table_Counts         = "";    public $Report_Table_Locations      = "";            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->SQL->Calling_Classname = $this->Classname;        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-10-02',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Create a summary table of how quantity was calculated',            'Update Log'    => array(                '2013-10-02_1.0'    => "Module Created",            ),        );                // ----- initialize GET variables        $this->Show_Method_Details      = (Get('methoddetails') == 'true') ? true : false;        $this->Show_Assembly_Details    = (Get('assemblydetails') == 'true') ? true : false;                    } // -------------- END __construct --------------            public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                        [DESCRIPTION:]        Create a summary report table of how quantity was caluclated. This report can be output on any page to show the user        how the quantity was calculated.                ";                $output = $this->PseudocodeFormat($output);        return $output;    }            public function Execute()    {                if (!$this->Barcode)   {            $error = "Missing barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                                $this->GetCounts();        $this->GetLocations();        $this->FormatDataForReport();        $report = $this->CreateReport_Barcode();                $this->Report = $report;                return $this->Report;    }        public function ArrayToTable($ARR)    {        $row_1 = "";        $row_2 = "";                foreach ($ARR as $key => $val) {                        if (is_array($val)) {                $val = $this->ArrayToTable($val);            }                        $row_1 .= "<th>{$key}</th>";            $row_2 .= "<td>{$val}</td>";        }                $output = "            <table class='vr_assy_table' width='100%'>            <tr>{$row_1}</tr>            <tr>{$row_2}</tr>            </table>            ";                return $output;    }                   public function GetLocations()    {        // ========== GET ALL THE LOCATIONS ==========        $location_records = $this->SQL->GetArrayAll(array(            'table' => "inventory_locations",            'keys'  => "inventory_locations_id, location_name",            'where' => "active=1",        ));        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);        $locations = array();        foreach ($location_records as $record) {            $locations[$record['inventory_locations_id']] = $record['location_name'];        }                $this->Location_Records = $locations;    }        public function GetCounts()    {        // ========== GET ALL THE INVENTORY COUNTS ==========        $records = $this->SQL->GetArrayAll(array(            'table' => "inventory_counts",            'keys'  => "                inventory_counts.inventory_counts_id,                inventory_counts.barcode,                inventory_counts.qty_in,                inventory_counts.qty_out,                inventory_counts.date,                inventory_counts.inventory_locations_id,                inventory_counts.ref_purchase_orders_received_id,                inventory_counts.ref_adjustment_id,                inventory_counts.ref_sales_order_sent_id,                inventory_counts.ref_assembly_build_id,                inventory_counts.ref_inventory_movements_id,                inventory_counts.notes,                inventory_movements.source_inventory_locations_id,                inventory_movements.target_inventory_locations_id,                inventory_locations.location_name,                inventory_purchase_order_received.inventory_purchase_orders_id,                inventory_purchase_orders.inventory_purchase_orders_id,                inventory_purchase_orders.po_number,                inventory_adjustments.notes,                inventory_adjustments.ref_class,                inventory_sales_order_sent.inventory_sales_orders_id,                inventory_sales_orders.universal_id,                inventory_assembly_build.assembly_person,                inventory_assembly_build.notes            ",            'where' => "inventory_counts.barcode={$this->Barcode} AND inventory_counts.active=1",            'joins'  => "                LEFT JOIN inventory_locations               ON inventory_locations.inventory_locations_id                               = inventory_counts.inventory_locations_id                LEFT JOIN inventory_purchase_order_received ON inventory_purchase_order_received.inventory_purchase_order_received_id   = inventory_counts.ref_purchase_orders_received_id                LEFT JOIN inventory_purchase_orders         ON inventory_purchase_orders.inventory_purchase_orders_id                   = inventory_purchase_order_received.inventory_purchase_orders_id                LEFT JOIN inventory_adjustments             ON inventory_adjustments.inventory_adjustments_id                           = inventory_counts.ref_adjustment_id                LEFT JOIN inventory_sales_order_sent        ON inventory_sales_order_sent.inventory_sales_order_sent_id                 = inventory_counts.ref_sales_order_sent_id                LEFT JOIN inventory_sales_orders            ON inventory_sales_orders.inventory_sales_orders_id                         = inventory_sales_order_sent.inventory_sales_orders_id                LEFT JOIN inventory_assembly_build          ON inventory_assembly_build.inventory_assembly_build_id                     = inventory_counts.ref_assembly_build_id                LEFT JOIN inventory_movements               ON inventory_movements.inventory_movements_id                               = inventory_counts.ref_inventory_movements_id            ",            'order' => "inventory_counts.date ASC",        ));        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                $this->Count_Records = $records;    }        public function FormatDataForReport()     {        $records    = $this->Count_Records;        $locations  = $this->Location_Records;                if ($records) {                        $table                  = array();            $sum_qty_in             = array();            $sum_qty_out            = array();            $sum_total_allloc       = 0;            $sum_total_in_allloc    = 0;            $sum_total_out_allloc   = 0;                                    foreach ($records as $record) {                //$this->EchoVar('record', $record);                                $loc_source = ($record['source_inventory_locations_id']) ? $locations[$record['source_inventory_locations_id']]: "N/A";                $loc_target = ($record['target_inventory_locations_id']) ? $locations[$record['target_inventory_locations_id']]: "N/A";                                $type = "<span color='red'>UNKNOWN</span>";                $type = ($record['ref_purchase_orders_received_id'] != 0)       ? "Purchase Order" : $type;                $type = ($record['ref_adjustment_id'] != 0)                     ? "Adjustment (Physical Count)" : $type;                $type = ($record['ref_sales_order_sent_id'] != 0)               ? "Sales Order" : $type;                $type = ($record['ref_assembly_build_id'] != 0)                 ? "Assembly Build" : $type;                $type = ($record['ref_inventory_movements_id'] != 0)            ? "Inventory Movement" : $type;                                $details = "";                $details = ($record['ref_purchase_orders_received_id'] != 0)    ? "PO#: {$record['po_number']}" : $details;                $details = ($record['ref_adjustment_id'] != 0)                  ? "ID: {$record['ref_adjustment_id']}</br>Notes: {$record['notes']}" : $details;                $details = ($record['ref_sales_order_sent_id'] != 0)            ? "UID: {$record['universal_id']}" : $details;                $details = ($record['ref_assembly_build_id'] != 0)              ? "Person: {$record['assembly_person']}</br>Notes: {$record['notes']}" : $details;                $details = ($record['ref_inventory_movements_id'] != 0)         ? "ID: {$record['ref_inventory_movements_id']}</br>From: {$loc_source}</br>To: {$loc_target}" : $details;                                // ----- calculate totals                $iloid                                  = $record['inventory_locations_id'];                                    // current locations id                $existing_in                            = (isset($sum_qty_in[$iloid])) ? $sum_qty_in[$iloid] : 0;               // existing IN at given location                $existing_out                           = (isset($sum_qty_out[$iloid])) ? $sum_qty_out[$iloid] : 0;             // existing OUT at given location                $sum_qty_in[$iloid]                     = $existing_in + $record['qty_in'];                                     // new calculated IN at given location                $sum_qty_out[$iloid]                    = $existing_out + $record['qty_out'];                                   // new calculated OUT at given location                $sum_total_in_allloc                    = $sum_total_in_allloc + $record['qty_in'];                             // total IN at all locations                $sum_total_out_allloc                   = $sum_total_out_allloc + $record['qty_out'];                           // total OUT at all locations                $sum_total_allloc                       = $sum_total_allloc + $record['qty_in'] - $record['qty_out'];           // total sum at all locations                                                $table[] = array(                    'date'      => $record['date'],                    'qty_in'    => $record['qty_in'],                    'qty_out'   => $record['qty_out'],                    'location'  => $record['location_name'],                    //'notes'     => $record['notes'],                    'type'      => $type,                    'details'   => $details,                );            }                                                $table_total_location = array();            $table_total_location[] = array(                'Location'  => 'ALL',                'In'        => $sum_total_in_allloc,                'Out'       => $sum_total_out_allloc,                'Current'   => $sum_total_allloc,            );            foreach ($locations AS $id => $name) {                $in     = (isset($sum_qty_in[$id])) ? $sum_qty_in[$id] : 0;                $out    = (isset($sum_qty_out[$id])) ? $sum_qty_out[$id] : 0;                $total  = $in - $out;                                if ($in>0 || $out>0) {                    $table_total_location[] = array(                        'Location'  => $name,                        'In'        => $in,                        'Out'       => $out,                        'Current'   => $total,                    );                }            }                        $this->Report_Table_Counts      = $this->ConvertArrayToTable($table);            $this->Report_Table_Locations   = $this->ConvertArrayToTable($table_total_location);                    } else {            $this->Report_Table_Counts      = "<h1>NO RECORDS FOUND</h1>";            $this->Report_Table_Locations   = "<h1>NO RECORDS FOUND</h1>";        }    }                public function CreateReport_Barcode()    {        # FUNCTION :: Create a quantity summary report                $report = "            <div class='pageheader' style='_min-width:600px;'>QUANTITY SUMMARY REPORT - Barcode: {$this->Barcode}</div>            <br />            <div class='jsonTable'>            {$this->Report_Table_Locations}            </br>            {$this->Report_Table_Counts}            </div>            ";                return $report;    }        }  // -------------- END CLASS --------------