<?phpclass Inventory_InventoryMovement extends Inventory_InventoryBase{    public $Show_Query                      = false;    public $Locked                          = false;    public $Inventory_Movements_ID          = 0;        private $Date_Format                    = "";    public $Inventory_Locations_ID_Source   = 0;          public $Inventory_Locations_ID_Target   = 0;    public $Default_Locations_ID            = 0;        // ----- AUTOTABLE VARIABLES -----    private $Table_Header_Row               = "Barcode|APDM SKU|SOURCE QTY|TARGET QTY|QTY TO MOVE|DEL";    private $Table_Holder_DIV               = "autotable_holder";               // defines hidden textarea that will hold the text array    private $Table_Display_DIV              = "autotable_table_display";        // defines the div that wraps the created table    private $Table_Delimiter                = '|';            // ----- FILE UPLOAD VARIABLES -----    private $Window_Width               = 820;                          // needs to be larger than Pipeline_Table_Width    private $Files_Width                = 800;                          // files area - width     private $Files_Font_Size            = 13;                           // files area - font size    private $Files_Font_Size_2          = 10;                           // files area - font size (file details)    private $Files_Area_Wrapper_Id      = "file_add_record_wrapper";    // files area - wrapper id    public $Existing_Files_Count        = 0;                            // will hold count of files uploaded    public $Files_Upload_Type           = 'inventorymovement';          // type of file being uploaded        // ----- FORM ARRAY VARIABLES    private $Show_Basic_Details         = true;                         // (true) TRUE = turn on form array section    private $Show_Order_Table           = true;                         // (true) TRUE = turn on form array section    private $Show_Files                 = true;                         // (true) TRUE = turn on form array section            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-07-17',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-07-26',            'Filename'      => $this->Classname,            'Version'       => '1.0.2',            'Description'   => 'Move inventory from one location to another',            'Update Log'    => Array(                '2013-07-17_1.0.0'  => "Module Created",                '2013-07-19_1.0.1'  => "Continued development",                '2013-07-26_1.0.2'  => "Continued development",            ),        );                // ===== GET VALUES PASSED INTO CLASS CONSTRUCT =====        $this->SetParameters(func_get_args());        $this->Inventory_Locations_ID_Source    = $this->GetParameter(0);        $this->Inventory_Locations_ID_Target    = $this->GetParameter(1);        $this->Inventory_Movements_ID           = $this->GetParameter(2);                        $this->Default_Locations_ID             = $this->GetSetting('inventory_default_location_id');        $this->Default_Locations_ID             = (!$this->Default_Locations_ID) ? 1 : $this->Default_Locations_ID;        $this->Inventory_Locations_ID_Source    = (!$this->Inventory_Locations_ID_Source) ? $this->Default_Locations_ID : $this->Inventory_Locations_ID_Source;        $this->Inventory_Locations_ID_Target    = (!$this->Inventory_Locations_ID_Target) ? $this->Default_Locations_ID : $this->Inventory_Locations_ID_Target;                        $this->Date_Format      = $this->GetSetting('inventory_movement_date_format');     // get setting from inventory_settings table                                                $this->Table            = 'inventory_movements';        $this->Index_Name       = 'inventory_movements_id';                $this->Default_Where    = '';               // additional search conditions        $this->Default_Sort     = '';               // field for default table sort                $this->Add_Submit_Name  = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field      = $this->Index_Name;                $this->Field_Titles = array(            "{$this->Table}.inventory_movements_id"                 => 'Inventory Movements Id',                        //"{$this->Table}.source_inventory_locations_id"          => 'Source Location',            //"{$this->Table}.target_inventory_locations_id"          => 'Target Location',            "FROM_LOC.location_name AS FROM_LOC_NAME"               => 'Source Location',            "TO_LOC.location_name AS TO_LOC_NAME"                   => 'Target Location',                        "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.lines_array"                            => 'Inventory Transferred',                        "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                $this->Join_Array = Array(            "FROM_LOC_NAME"     => "LEFT JOIN `inventory_locations` AS FROM_LOC  ON `FROM_LOC`.`inventory_locations_id` = `{$this->Table}`.`source_inventory_locations_id`",            "TO_LOC_NAME"       => "LEFT JOIN `inventory_locations` AS TO_LOC    ON `TO_LOC`.`inventory_locations_id` = `{$this->Table}`.`target_inventory_locations_id`",        );                $this->Default_Fields   = 'FROM_LOC_NAME, TO_LOC_NAME, date, notes, lines_array';        $this->Unique_Fields    = '';                $this->Default_Values   = array(            'date'      => date('Y-m-d'),        );                $this->Close_On_Success = true;                                //$this->Edit_Links_Count = '4';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $this->JavascriptConfirmDeleteAndOpenWindow();      // Javascript needed for deleting records from table with confirmation                $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                #$this->Default_Values['barcode'] = $this->Barcode;                $this->AddRecord();            break;                                    case 'change_location':                $this->ChangeLocation();            break;                        case 'set_location':                                // ----- take passed parameters for location from GET and move into a class construct method                                $Inventory_Locations_ID_Source = Get('sid');                $Inventory_Locations_ID_Target = Get('tid');                    $url    = "http://webmanager.whhub.com/office/class_execute.php";                $eq     = EncryptQuery("class={$this->Classname};v1={$Inventory_Locations_ID_Source};v2={$Inventory_Locations_ID_Target}");                                header("Location: {$url};eq={$eq};action=add");            break;                        case 'delete':                // ----- special delete case because a lot of different records need to be modified                $this->DeleteInventoryMovement();            break;                        case 'list':            default:                // ----- display list of all assemblies that can be built                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                $inventory_locations_id_source = Get('sid');                $inventory_locations_id_target = Get('tid');                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => ' inventory_products',                    'keys'  => 'description, retailer_code, barcode, manufacturer_code, status_retired',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%' OR manufacturer_code LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                                        $retired        = ($record['status_retired'] == 1) ? "[Retired] -" : "";                    $qty_source     = $this->InventoryItemQuantityAvailableLocation($record['barcode'], '', $inventory_locations_id_source);                    $qty_target     = $this->InventoryItemQuantityAvailableLocation($record['barcode'], '', $inventory_locations_id_target);                                        $arr[] = array(                        'label'             => "{$record['barcode']} - {$retired} {$record['retailer_code']} - ({$record['manufacturer_code']})",                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                        'qty_source'        => $qty_source,                        'qty_target'        => $qty_target,                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                        case 'load_files':                $this->Inventory_Movements_ID           = Get('imid');                $return                                 = $this->LoadFilesArea(true);            break;        }                echo $return;    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                        // ----- editing record so get source and target destinations from record        if ($this->Action == 'EDIT') {                        $this->Inventory_Locations_ID_Source    = Post('FORM_source_inventory_locations_id');           // store source location            $this->Inventory_Locations_ID_Target    = Post('FORM_target_inventory_locations_id');           // store target location                        if ($this->Inventory_Locations_ID_Source == $this->Inventory_Locations_ID_Target) {                echo "ERROR :: Editing record but source and target locations are the same.";                exit();            }        }                                // ----- if source and destination are same - change location        if ($this->Inventory_Locations_ID_Source == $this->Inventory_Locations_ID_Target) {            $url    = "http://webmanager.whhub.com/office/class_execute.php";            $eq     = EncryptQuery("class={$this->Classname};v1={$Inventory_Locations_ID_Source};v2={$Inventory_Locations_ID_Target}");            header("Location: {$url};eq={$eq};action=change_location");        }                                // ----- if editing record - need to get the records from database and put on the page        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {            $this->Inventory_Movements_ID           = $this->Edit_Id;            $this->Locked                           = true;            $this->GetExistingRecords($this->Inventory_Movements_ID);        }                                // ----- Javascript Functionality -----        $this->JavascriptDisplaySessionMessage();   // Display alert messages        $this->JavascriptAutocomplete();            // Javascript for autocomplete functionality        $this->JavascriptCreateTable();             // Javascript for creating table from array of data        $this->JavascriptToggleFunctionality();     // Javascript for toggling div areas                $this->JavascriptDatepickerFunctionality(array('FORM_date'));        $this->JavascriptDisableFunctionality(array('FORM_temp_1','FORM_temp_2','FORM_temp_qty_source','FORM_temp_qty_target'));      // don't allow user to change values on these fields        $this->JavascriptInputNoBorder(array('FORM_temp_1','FORM_temp_2','FORM_temp_qty_source','FORM_temp_qty_target'));             // don't show form border on these fields                        $btn_add        = MakeButton('positive', 'ADD', '', '', 'btn_add', "addDataToTable('Form_temp_0')", 'button', 'btn_add');        $btn_clear      = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');                                                // ----- SET THE LOCATION -----        $_POST['FORM_source_inventory_locations_id']    = 0;            // initialize variable        $_POST['FORM_target_inventory_locations_id']    = 0;            // initialize variable        $location_name_line                             = "";           // initialize variable                if ($this->Inventory_Locations_ID_Source != 0 && $this->Inventory_Locations_ID_Target != 0) {                        $record_source = $this->SQL->GetRecord(array(                'table' => 'inventory_locations',                'keys'  => '*',                'where' => "inventory_locations_id={$this->Inventory_Locations_ID_Source} AND active=1",            ));            //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        $record_target = $this->SQL->GetRecord(array(                'table' => 'inventory_locations',                'keys'  => '*',                'where' => "inventory_locations_id={$this->Inventory_Locations_ID_Target} AND active=1",            ));            //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                    $inventory_location_name_source                 = (isset($record_source)) ? $record_source['location_name'] : 'n/a';            $inventory_location_name_target                 = (isset($record_target)) ? $record_target['location_name'] : 'n/a';                        $_POST['FORM_source_inventory_locations_id']   = $this->Inventory_Locations_ID_Source;            $_POST['FORM_target_inventory_locations_id']   = $this->Inventory_Locations_ID_Target;                        $eq                                     = EncryptQuery("class={$this->Classname};v1={$this->Inventory_Locations_ID_Source};v2={$this->Inventory_Locations_ID_Target}");            $url                                    = "http://webmanager.whhub.com/office/class_execute.php;eq={$eq};action=change_location";            $inventory_location_change_link         = ($this->Action == 'ADD') ? " [<a href='{$url}'>change locations</a>]" : "";            $location_name_line                     = "info|Location|{$inventory_location_name_source} -->> {$inventory_location_name_target} {$inventory_location_change_link}";                    }                                                $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        'hidden|inventory_movements_id',            'hidden|temp_locked',                        'code|<div style="display:none;">',            "textarea|Temp 3|{$this->Table_Holder_DIV}|N|60|4",            'code|</div>',        );                        if ($this->Show_Basic_Details) {                        if ($this->Locked) {                                $date       = Post('FORM_date');                $notes      = Post('FORM_notes');                                $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">INVENTORY MOVEMENT INFORMATION</div>',                    "{$location_name_line}",                    'hidden|source_inventory_locations_id',                    'hidden|target_inventory_locations_id',                    "info|Date|{$date}",                    "info|Notes|{$notes}",                'code|</div>',                'code|<br /><br />',                );                            } else {                                $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">INVENTORY MOVEMENT INFORMATION</div>',                    "{$location_name_line}",                    'hidden|source_inventory_locations_id',                    'hidden|target_inventory_locations_id',                    'text|Date|date|N|20|255',                    'textarea|Notes|notes|N|60|2',                'code|</div>',                'code|<br /><br />',                );            }                        $base_array = array_merge ($base_array, $temp_array);        }                        if ($this->Locked) {            $temp_array = array(            "code|<div class='shadow form_section_wrapper_error'>",                "code|INVENTORY MOVEMENT IS LOCKED BECAUSE INVENTORY HAS ALREADY BEEN AFFECTED.",            "code|</div>",            'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        if ($this->Show_Order_Table) {                        $style_display = ($this->Locked) ? "display:none;" : "";            // hide content if editing record                        $temp_array = array(            "code|<div class='shadow form_section_wrapper' style='{$style_display}'>",                                "text|Search|temp_0|N|60|100",                "text|Barcode|temp_1|N|60|100",                "text|APDM SKU|temp_2|N|60|100",                "text|Source QTY|temp_qty_source|N|60|100",                "text|Target QTY|temp_qty_target|N|60|100",                "text|QTY TO Move|temp_5|N|10|100",                                "hidden|temp_6",                "hidden|temp_7",                "info||$btn_add      &nbsp;&nbsp;&nbsp;    $btn_clear     ",                            "code|</div>",            "code|<div style='{$style_display}'><br /><br /></div>",            );            $base_array = array_merge ($base_array, $temp_array);                        $temp_array = array(                "code|<div id='{$this->Table_Display_DIV}'></div>",                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);        }                        if ($this->Show_Files) {            // ----- GET FILES FOR SALES ORDER (ONLY IF EDITING)            if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                $this->Inventory_Movements_ID           = Post('FORM_inventory_movements_id');                $files_area_upload                      = ($this->Show_Files) ? $this->LoadFilesUploadArea() : '';          // get files for sales order                $files_area                             = ($this->Show_Files) ? $this->LoadFilesArea() : '';                // get files for sales order            } else {                // don't load notes area if we're submitting an add/edit record                $files_area_upload  = "";                $files_area         = "<div style='color:red;'>UNABLE TO ADD FILES. CAN ONLY ADD FILES WHEN EDITING AN EXISTING RECORD</div>";            }                        // ----- ADD SCRIPTS            $this->AddScript_FileUpload();                        // ----- ADD FORM ARRAY            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">FILES ('.$this->Existing_Files_Count.') <a class="toggle" href="#" id="menu_group_files"><span class="updown">&nbsp;</span></a></div>',                'code|<div class="menu_group" style="display:none;" id="div_menu_group_files">',                                        "code|{$files_area_upload}",                                        "code|<div style='padding:10px;' id='{$this->Files_Area_Wrapper_Id}'>",                    "code|{$files_area}",                    "code|</div>",                                    'code|</div>',            'code|</div>',            "code|<div style='width:{$this->Window_Width}px; border:0px solid blue;'>&nbsp;</div>",            );            $base_array = array_merge ($base_array, $temp_array);                            }                        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            //$base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        # FUNCTION :: Manage what is done with the form values once submitted                        # ===== START :: PSEUDCODE =====         /*            # add the master record            # add the inventory_counts record            # if everything passes - COMMIT                        only allow deleting an entire record - and only if no inventory count records for ALL barcodes exist after date                        // only allow deleting an inventory movement if there are no other ones after the current one            // store the ID of the movement in the final movement array                    */        # ===== END :: PSEUDCODE =====                $table_holder                   = "{$this->Table_Holder_DIV}";        $passed                         = true;                                         // holds check-passed status        $adding                         = ($this->Action == 'ADD') ? true : false;      // hold edit status        $locked                         = (isset($FormArray['temp_locked']) && ($FormArray['temp_locked'] == 1)) ? true : false;        $inventory_movements_id         = $FormArray['inventory_movements_id'];                if (false) {            $this->EchoVar('FormArray', $FormArray);            $this->EchoVar('Action', $this->Action);            $this->EchoVar('adding', $adding);            $this->EchoVar('locked', $locked);            $this->EchoVar('inventory_movements_id', $inventory_movements_id);            //exit();        }                        // ----- don't move inventory if source and destination are the same        if ($FormArray['source_inventory_locations_id'] == $FormArray['target_inventory_locations_id']) {            $this->Error .= "<br />SOURCE AND TARGET DESTINATIONS ARE THE SAME";            $passed = false;        }                                $lines_array                = $this->FormArray_ConvertTableToLinesArray($FormArray);    // convert the table to a lines array        $FormArray['lines_array']   = serialize($lines_array);                                  // store line_array in form array        $FormArray                  = $this->FormArray_CleanUp($FormArray);                     // clean up the excess form array                                                                if (false) {            $this->Error .= "<br />PURPOSFUL HALTING ERROR";            $passed = false;            exit();        }                        // ----- verify if any good lines made it to processing - we don't want to allow a 0-line PO        if (!$lines_array) {            $this->Error .= "</br>THIS PURCHASE ORDER HAS NO VALID LINES TO PROCESS";            $passed = false;        }                        // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed) {            			            # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                                    # ----- Create the inventory_movements entry            $db_record = array();            foreach ($FormArray AS $key => $value) {                $db_record[$key] = $value;            }                        if ($adding) {                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_movements',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                $inventory_movements_id         = $this->SQL->Last_Insert_Id;                $passed                         = (!$result) ? false : $passed;                            } else {                $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_movements',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_movements_id`='{$inventory_movements_id}' AND `active`=1",                ));                //$this->SQL->EchoQuery($this->Classname, __FUNCTION__ . '_z');                $passed = (!$result) ? false : $passed;                            }                                                # ----- Create the inventory_counts entry            foreach ($lines_array as $line) {                                $db_record = array(                    'barcode'                       => $line['barcode'],                    'qty_in'                        => $line['qty_in'],                    'qty_out'                       => $line['qty_out'],                    'date'                          => $FormArray['date'],                    'inventory_locations_id'        => $line['inventory_locations_id'],                    'ref_inventory_movements_id'    => $inventory_movements_id,                    'notes'                         => 'Inventory_InventoryMovement',                );                                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_counts',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                $passed     = (!$result) ? false : $passed;                            }                                    //$this->SQL->Rollback();            //$passed = false;            //exit();                                                # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();            // save the database transactions to database                                                // ----- trigger a sucess message                if ($adding) {                                        echo "                    <h2>RECORD ADDED SUCCESSFULLY</h2>                    <h2>Please close window and refresh table.</h2>                    ";                                        //$this->SuccessfulAddRecord();           // run successful message                    exit();                                 // stop processing in this class                                    } else {                                        $flash      = $this->Idx;                    $id         = $this->Idx;                    $id_field   = $this->Index_Name;                    $this->SuccessfulEditRecord($flash, $id, $id_field);                }                                /*                // ----- Do A force redirect to bypass BaseClass further procesing this                $link = $this->getPageURL();                $_SESSION['alert_message'] = ($adding) ? "RECORD ADDED SUCESSFULLY" : "RECORD UPDATED SUCESSFULLY";                header("Location: {$link}");                */            } else {                $this->SQL->Rollback();                 // remove all the database transactions from the database            }                } else {            // ----- return form array to process any legitimate errors            return $FormArray;        }                    }                            private function FormArray_CleanUp($FormArray)    {        $field_kickout_string           = 'temp_';                // ----- remove any temp fields from the array so they don't get processed        // ----- NOTE :: WASTED STEP IF WE BLOW OUT ARRAY AT END OF FUNCTION        foreach ($FormArray as $field => $value) {            //echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                unset($FormArray["{$this->Table_Holder_DIV}"]);           // remove the table holder            return $FormArray;    }        private function FormArray_ConvertTableToLinesArray($FormArray)    {                $lines_array = array();                                      // initialize variable                        // ----- get the main table holder value to process        $table = $FormArray[$this->Table_Holder_DIV];        if ($table) {            $lines          = explode("\n", $table);            $header_row     = true;                        foreach ($lines as $key => $line) {                if ($line) {                    if ($header_row == false) {                                                $parts          = explode($this->Table_Delimiter, $line);                        $barcode        = trim($parts[0]);                        $sku            = trim($parts[1]);                        $quantity       = trim($parts[4]);                                                // ----- check that inventory still exists                        $row = $this->SQL->GetRecord(array(                            'table' => 'inventory_products',                            'keys'  => 'barcode',                            'where' => "barcode = '{$barcode}' AND active=1",                        ));                                                if (empty($row)) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        } else {                                                        // check if we have enough qty in the source location                            // if NO - throw an error                            // if YES - create a subtract and and add record                                                        $source_ilid    = $FormArray['source_inventory_locations_id'];                            $target_ilid    = $FormArray['target_inventory_locations_id'];                            $qty_source     = $this->InventoryItemQuantityAvailableLocation($barcode, '', $source_ilid);                                                        if ($qty_source < $quantity) {                                $this->Error .= "<br />ERROR :: Not enough inventory in source location to transfer. Barcode: {$barcode}";                                $passed = false;                            } else {                                                                // ----- create the SUBTRACT record                                $lines_array[] = array(                                    'barcode'                       => $barcode,                                    'qty_in'                        => 0,                                    'qty_out'                       => $quantity,                                    'inventory_locations_id'        => $source_ilid,                                );                                                                // ----- create the ADD record                                $lines_array[] = array(                                    'barcode'                       => $barcode,                                    'qty_in'                        => $quantity,                                    'qty_out'                       => 0,                                    'inventory_locations_id'        => $target_ilid,                                );                                                            }                        }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                return $lines_array;    }        public function GetLockedStatus($ID)    {        // ----- determine if purchase order should be locked        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_purchase_order_received",            'keys'      => "*",            'where'     => "`inventory_purchase_orders_id`='{$ID}' AND active=1",        ));        $this->EchoQuery();                $locked = ($records) ? true : false;                return $locked;    }        public function GetExistingRecords($ID)    {        // ----- get all records from the database        $record = $this->SQL->GetRecord(array(            'table'     => "inventory_movements",            'keys'      => "lines_array",            'where'     => "inventory_movements_id='{$ID}' AND active=1",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                // ----- format records for output        if ($record) {                        $count  = 1;            $table  = $this->Table_Header_Row . "\n";            $lines  = unserialize($record['lines_array']);                        $table  = "Barcode{$this->Table_Delimiter}SKU{$this->Table_Delimiter}QTY" . "\n";            $rows = "";            foreach ($lines as $id => $line) {                if ($line['qty_out'] > 0) {                    // only show the outbound movements from source - not the inbound at target                    $sku    = $this->GetInventoryItemRetailerCodeFromBarcode($line['barcode']);                    $rows .= "<tr><td>{$line['barcode']}</td><td>{$line['qty_out']}</td><td>{$sku}</td></tr>";                    $table .= "{$line['barcode']}{$this->Table_Delimiter}{$sku}{$this->Table_Delimiter}{$line['qty_out']}\n";                }            }        }                        // ----- put formatted records into POST array and add javascript to add extra needed line break        $_POST["FORM_{$this->Table_Holder_DIV}"] = $table;        AddScriptOnReady('$("#FORM_'.$this->Table_Holder_DIV.'").val($("#FORM_'.$this->Table_Holder_DIV.'").val() + "\n");');    }                            public function DeleteInventoryMovement()    {        /* ===== P-CODE =================                Check if inventory_counts have been made using the locations and inventory        If YES - Don't allow deleting - user has to move inventory back        If NO - Allow record to be deleted                ============================== */                $passed = true; // initialize variable                                if (!$this->Inventory_Movements_ID) {            $error = "Missing Inventory_Movements_ID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                                       $record_master = $this->SQL->GetRecord(array(            'table' => $this->Table,            'keys'  => '*',            'where' => "{$this->Index_Name}={$this->Inventory_Movements_ID}",        ));                if (!$record_master) {            $error = "Unable to load inventory movement record";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- get variables from the master record        $master_inventory_movements_id      = $record_master['inventory_movements_id'];        $master_date                        = $record_master['date'];        $master_lines                       = unserialize($record_master['lines_array']);                        // ----- create a list of the barcodes to check against        $barcodes   = array();        foreach ($master_lines AS $record) {            array_push($barcodes, $record['barcode']);        }        $barcodes_where = implode(',', $barcodes);                        // ----- get any inventory_counts records involving these barcodes (that aren't this record AND are after this record)        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_counts',            'keys'  => '*',            'where' => "barcode IN ({$barcodes_where}) AND active=1 AND date >= '{$master_date}' AND ref_inventory_movements_id != {$master_inventory_movements_id}",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);        $passed = ($records) ? false : $passed;         // fail if any records found                        //if ($records) {        //    $this->EchoVar('records', $records);        //}                        if (!$passed) {            $error = "You CANNOT delete this movement. </br></br> Inventory movements have been made using these barcode items AFTER the date of this movement. </br></br> You need to perform a NEW inventory movement to reverse this one instead.";            //$this->AddError($this->Classname, __FUNCTION__, $error);            //$this->EchoError($this->Classname, __FUNCTION__, $error, true);                        $output = "                <div class='shadow form_section_wrapper_error'>                <div class='form_section_header_white'>CANNOT DELETE INVENTORY MOVEMENT</div>                <div style='min-width:300px;'>&nbsp;</div>                <div style='font-size:14px;'>{$error}</div>";                    } else {                                    $passed = true;            $this->SQL->StartTransaction();                                    // ----- disable the  inventory_movements records            $db_record = array('active' => 0,);            $result = $this->SQL->UpdateRecord(array(                'table'         => 'inventory_movements',                'key_values'    => $this->SQL->KeyValues($db_record),                'where'         => "`inventory_movements_id`='{$master_inventory_movements_id}' AND `active`=1",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);            $passed = (!$result) ? false : $passed;                                    // ----- disable the inventory_counts records            $db_record = array('active' => 0,);            $result = $this->SQL->UpdateRecord(array(                'table'         => 'inventory_counts',                'key_values'    => $this->SQL->KeyValues($db_record),                'where'         => "`ref_inventory_movements_id`='{$master_inventory_movements_id}' AND `active`=1",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);            $passed = (!$result) ? false : $passed;                                    if ($passed) {                $this->SQL->TransactionCommit();                    // execute database commands                                $output = "                <div class='shadow form_section_wrapper'>                <div class='form_section_header'>DELETE INVENTORY MOVEMENT</div>                <div style='min-width:300px;'>&nbsp;</div>                <div style='font-size:14px; color:blue;'>Inventory movement has been deleted. Please close window and refresh table.</div>";            } else {                $this->SQL->Rollback();                             // cancel database commands                                $output = "                <div class='shadow form_section_wrapper_error'>                <div class='form_section_header_red'>CANNOT DELETE INVENTORY MOVEMENT</div>                <div style='min-width:300px;'>&nbsp;</div>                <div style='font-size:14px;'>Unknown error while trying to delete records.</div>";            }        }                echo $output;    }        public function ChangeLocation()    {        # FUNCTION :: Show form for changing the inventory location                $output = '';       // initialize variable                                // ----- GET ALL LOCATIONS        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_locations',            'keys'  => '*',            'where' => 'active=1',        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                               // ----- create the status select drop-down        $select_options_source      = '';        $select_options_target      = '';        foreach ($records as $record) {            $selected_source            = ($record['inventory_locations_id'] == $this->Inventory_Locations_ID_Source) ? ' selected' : '';            $select_options_source     .= "<option value='{$record['inventory_locations_id']}' {$selected_source}>{$record['location_name']}</option>";                        $selected_target            = ($record['inventory_locations_id'] == $this->Inventory_Locations_ID_Target) ? ' selected' : '';            $select_options_target     .= "<option value='{$record['inventory_locations_id']}' {$selected_target}>{$record['location_name']}</option>";        }        $status_select_source   = "<select id='location_select_source'>{$select_options_source}</select>";        $status_select_target   = "<select id='location_select_target'>{$select_options_target}</select>";        $btn_submit             = MakeButton('positive', 'SUBMIT', '', '', 'btn_clear', "locationChangeSubmit()", 'button', 'btn_clear');        $spacer                 = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";                        $output .= "<div class='shadow form_section_wrapper'>";        $output .= '<div class="form_section_header">CHANGE LOCATION</div>';        $output .= "<div style='min-width:300px;'>&nbsp;</div>";        $output .= "            <table border='0'>            <tr><td>From:</td><td>{$status_select_source}</td></tr>            <tr><td>To:</td><td>{$status_select_target}</td></tr>            <tr><td></td><td>{$btn_submit}</td></tr>            </table>";        $output .= "</br>";        $output .= "</div>";        $output .= "</div>";                //$output .= "X ===> @@DIALOGID@@";                // ----- add script for updating location        $url    = "http://webmanager.whhub.com/office/class_execute.php";        $eq     = EncryptQuery("class={$this->Classname}");                AddScript("            function locationChangeSubmit()            {                var valueSource     = $('#location_select_source :selected').val();                var valueTarget     = $('#location_select_target :selected').val();                window.location     = '{$url};eq={$eq};action=set_location;sid=' + valueSource + ';tid=' + valueTarget;            }        ");                        echo $output;    }                            public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/class_execute';                				$eq_delete              = EncryptQuery("class={$this->Classname};v3={$id};PARENT_DIALOGID={$this->Dialogid_Id}");                $link_delete            = $CLASS_EXECUTE_LINK . '?eq=' . $eq_delete . '&action=delete';                $script_delete          = "ConfirmDeleteAndOpenWindow('{$link_delete}'); return false;";                                				// ----- determine which options to show to user                $this->Flags['edit']    = 'true';                $this->Flags['delete']  = 'true';                                $col_edit       = ($this->Flags['edit'] == 'false')   ? ''    : "<a href=`#` class=`row_edit`       title=`Edit`            onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_delete     = ($this->Flags['delete'] == 'false') ? ''    : "<a href=`#` class=`row_delete`     title=`Delete`          onclick=`{$script_delete}`></a>";                                                // ----- output the options                $this->Edit_Links_Count = '2';                $this->Edit_Links = qqn("                    <td align=`center`>{$col_edit}</td>                    <td align=`center`>{$col_delete}</td>                    ");            break;                        case 'lines_array':                $records = unserialize($value);                $value = ""; //$records;                                if ($records) {                                        $rows = "";                    foreach ($records AS $record) {                        if ($record['qty_out'] > 0) {                            // only show the outbound movements from source - not the inbound at target                            $sku    = $this->GetInventoryItemRetailerCodeFromBarcode($record['barcode']);                            $rows .= "<tr><td>{$record['barcode']}</td><td>{$record['qty_out']}</td><td>{$sku}</td></tr>";                        }                    }                                        if ($rows) {                        $style = "background-color:#ccc; font-weight:bold;";                        $value = "                            <table border='0' cellspacing='0' cellpadding='0'>                            <tr><td style='{$style}'>BARCODE</td><td style='{$style}'>QTY</td><td style='{$style}'>SKU</td></tr>                            {$rows}                            </table>                            ";                    }                }            break;                    }    }                        private function JavascriptAutocomplete()    {        $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_0').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=autocomplete_inventory_lookup;sid={$this->Inventory_Locations_ID_Source};tid={$this->Inventory_Locations_ID_Target}',                minChars        : 0,        // how many characters tot ype before starting function call                selectFirst     : true,     // allows tab to select the top option in returned values                autoFocus       : true,                                // where do we stick the returned results                select: function(event, ui) {                    $("#FORM_temp_0").val(ui.item.label);                    $("#FORM_temp_1").val(ui.item.barcode);                 // store Barcode                    $("#FORM_temp_2").val(ui.item.sku);                     // store APDM SKU                    $("#FORM_temp_qty_source").val(ui.item.qty_source);                    $("#FORM_temp_qty_target").val(ui.item.qty_target);                         return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        private function JavascriptCreateTable()    {        $this->ScriptJSONTableGeneric();                                // Add in the generic code held in the BaseClass        $this->ScriptCalculatePrice();                                  // Javascript for autocompleting price textboxes                $script = <<<SCRIPT                    // ===== USER DEFINED VARIABLES =====            var targetTextID        = "FORM_{$this->Table_Holder_DIV}";     // defines hidden textarea that will hold the text array            var targetTableDivID    = "{$this->Table_Display_DIV}";            // defines the div that wraps the created table            var requiredFieldArray  = ["FORM_temp_1","FORM_temp_5"];            var headerText          = "{$this->Table_Header_Row}";                        var fieldQty            = "FORM_temp_5";                    // In form - field holding quantity -- defined here for function ScriptCalculatePrice()            var priceEach           = "FORM_temp_6";                    // In form - field for price each -- defined here for function ScriptCalculatePrice()            var priceTotal          = "FORM_temp_7";                    // In form - field for price total -- defined here for function ScriptCalculatePrice()                                    function formTableRow() {                var delimiter       = "{$this->Table_Delimiter}";                var barcode         = $("#FORM_temp_1").val();                var sku             = $("#FORM_temp_2").val();                var qty             = $("#FORM_temp_5").val();                                var qty_source      = $("#FORM_temp_qty_source").val();                var qty_target      = $("#FORM_temp_qty_target").val();                                                // ----- create the string that will be added to table.                // ----- no starting or ending delimiter                // ----- action buttons will be added by other function                var output = barcode + delimiter + sku + delimiter + qty_source + delimiter + qty_target + delimiter + qty;                return output;            }                        function clearDataTextboxes() {                // -- clear the textboxes used to search on table data                $("#FORM_temp_0").val('');                $("#FORM_temp_1").val('');                $("#FORM_temp_2").val('');                $("#FORM_temp_5").val('');                $("#FORM_temp_6").val('');                $("#FORM_temp_7").val('');                                $("#FORM_temp_qty_source").val('');                $("#FORM_temp_qty_target").val('');                                            }SCRIPT;        AddScript($script);                $script = <<<SCRIPT            // -- call table creation function on load            // -- rebuilds table after coming back from form errors            var targetText          = $("#" + targetTextID);      // defines hidden textarea that will hold the text array            var targetTableDiv      = $("#" + targetTableDivID);    // defines the div that wraps the created table            createTableFromTextbox(targetText, targetTableDiv);SCRIPT;        AddScriptOnReady($script);    }                                // ==================== START :: UPLOAD FILES ====================        private function LoadFilesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the previously uploaded files area                $bypass_adding_script = false;                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                if (!$this->Inventory_Movements_ID) {            $error = "Missing Inventory_Movements_ID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output                                 = "";                                                                           // initialize variable                $Obj_Files                              = new Inventory_Uploadify_UploadedFiles();                                      // instantiate class        $Obj_Files->UID                         = $this->Inventory_Movements_ID;                                                // set barcode to get files for        $Obj_Files->Upload_Type                 = $this->Files_Upload_Type;                                                     // set file type        $Obj_Files->Table_Width                 = $this->Files_Width;                                                           // set variable        $Obj_Files->Files_Font_Size             = $this->Files_Font_Size;                                                       // set variable        $Obj_Files->Files_Font_Size_2           = $this->Files_Font_Size_2;                                                     // set variable                $output                                .= "</br>";        $output                                .= $Obj_Files->ViewAllRecordsFromFolderWithDatabaseCrosscheck(true);             // get the existing records        $Obj_Files->AddScript();        $this->Existing_Files_Count             = $Obj_Files->Existing_Files_Count;                                             // get count of existing files                return $output;                                                                                                         // return the output    }        private function LoadFilesUploadArea()    {        // FUNCTION :: Load the 'upload a new file' area                if (!$this->Inventory_Movements_ID) {            $error = "Missing Inventory_Movements_ID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output = '';        $Obj_Files_Upload                       = new Inventory_Uploadify_UploadFile($this->Files_Upload_Type, $this->Inventory_Movements_ID);            // instantiate class        $Obj_Files_Upload->AddStyle();                                                                                      // add needed styles or stylesheet        $Obj_Files_Upload->AddScript();                                                                                     // add needed scripts        $output                                .= $Obj_Files_Upload->AddRecordText();                                       // display ability to add a new file                return $output;    }        public function AddScript_FileUpload()    {        # FUNCTION :: Script needed for File Uploading                $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)        AddScript("            function LoadFilesArea() {                // ----- FUNTION :: Load the files for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_files;imid={$this->Edit_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Files_Area_Wrapper_Id}').html(data);                });            }        ");    }        // ==================== END :: UPLOAD FILES ====================                                        public function SuccessfulAddRecord()    {        $table = $this->GetTableTitle();        $close = $this->Close_On_Success? "top.parent.appformClose('appform' + dialogNumber);" : '';        $dialog_id         = $this->GetEqValue('dialog');        $idx               = $this->GetEqValue('idx');        $return_function   = $this->GetEqValue('return_function');        $return_parameters = $this->GetEqValue('return_parameters');                /*        echo "<br />dialog_id   ----> " . $dialog_id;        echo "<br />idx   ----> " . $idx;        echo "<br />return_function   ----> " . $return_function;        echo "<br />return_parameters   ----> " . $return_parameters;        exit();        */                if ($return_parameters) {            $return_parameters = ',' . $return_parameters;        }        $return = '';        if ($dialog_id) {            if ($return_function) {                $return = "                if (parent.document.getElementById('appformIframe$dialog_id')) {                    parent.document.getElementById('appformIframe$dialog_id').contentWindow.$return_function($this->Last_Update_Id$return_parameters);                }";            } elseif($idx) {                $eq = Get('eq');                $return = "                if (parent.document.getElementById('appformIframe$dialog_id')) {                    parent.document.getElementById('appformIframe$dialog_id').contentWindow.tableSearch('SHOW','$eq','$idx');                }";            }        }        echo "<script type='text/javascript'>                    top.parent.setTopFlash('Record [$this->Last_Update_Id] Added to $table');            $return            $close            </script>";        return '';    }}  // -------------- END CLASS --------------