<?php// ========================================================================================// FILE: Inventory_InventoryHold.php// Used to scan barcode products into the database// ========================================================================================class Inventory_InventoryHold extends Inventory_InventoryBase{    public $Page_Location                  = "/office/command_central/inventory_hold";    public $Page_Location_Get              = '';    public $Page_Link_Add_Inventory        = '';    public $Page_Link_Success              = '';    public $Show_Query                     = false;    public $Global_Form_Start              = '';    public $Global_Form_End                = '';        public $Barcode                        = '';    public $Add_Record_Link                = '';        public function  __construct()    {        parent::__construct();                        $this->SetParameters(func_get_args());        $this->Barcode          = $this->GetParameter(0);        $this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));                        $this->Add_Submit_Name  = 'INVENTORY_PRODUCTS_HOLD_SUBMIT_ADD';        $this->Table            = 'inventory_holds';        $this->Index_Name       = 'inventory_holds_id';                $this->Default_Values   = array(            'speedscan'         => Get('speedscan'),            'multiple_entry'    => Get('multiple_entry'),        );                                        $this->Field_Titles     = array(                    'inventory_holds_id'    => 'Inventory Products Id',                    'barcode'               => 'Barcode',                    'qty_hold'              => 'QTY on Hold',                    'hold_reason'           => 'Hold Reason',                );                                $this->Default_Fields       = 'barcode,qty_hold,hold_reason';                $this->Default_Where        = ($this->Barcode) ? "`barcode`='{$this->Barcode}' AND active=1" : 'active=9';                $this->Edit_Links           = qqn("<td align=`center`><a href=`#` class=`row_delete` title=`Delete` onclick=`tableDeleteClick('@IDX@','@VALUE@','@EQ@'); return false; `></a></td>");                $this->Edit_Links_Count     = 1;                $this->Add_Link             = '';                $this->Show_Export          = false;                $this->Use_Selection_Tab    = false;                                    } // -------------- END __construct --------------    public function GetTableHeading($colcount)    {        $export = ($this->Show_Export)? $this->GetExportBlock() : '';        $RESULT = '            <tr class="TABLE_TITLE">                <td colspan="'. $colcount. '">                ' . $export . '                    Search Results : ' . $this->GetTableTitle() . '                                </td>            </tr>';        return $RESULT;    }            public function Execute()    {        $this->InventoryMenu('HOLDS');            AddScriptOnReady("            $('#FORM_barcode').focus();                        $('#btn_hold_hold').click(function() {                holdHold();            });                        $('#btn_hold_release').click(function() {                holdRelease();            });                        $('#btn_hold_reset').click(function() {                holdReset();            });                        function holdHold() {                $('#FORM_check_hold_hold').val('1');                $('#FORM_check_hold_release').val('0');                                $('#form_wrap').addClass('form_wrapper_hold_hold').removeClass('form_wrapper_hold_release').removeClass('hidden');                $('#btn_reset').addClass('display').removeClass('hidden');                $('#FORM_barcode').focus();            };                        function holdRelease() {                $('#FORM_check_hold_hold').val('0');                $('#FORM_check_hold_release').val('1');                                $('#form_wrap').removeClass('form_wrapper_hold_hold').addClass('form_wrapper_hold_release').removeClass('hidden');                $('#btn_reset').addClass('display').removeClass('hidden');                $('#FORM_barcode').focus();            };                        function holdReset() {                $('#FORM_multiple_entry').attr('checked', false);                                $('#FORM_check_hold_hold').val('0');                $('#FORM_check_hold_release').val('0');                                $('#FORM_hold_reason').val('');                $('#FORM_barcode').val('');                $('#FORM_quantity').val('');                                $('#form_wrap').removeClass('form_wrapper_hold_hold').removeClass('form_wrapper_hold_release').addClass('hidden');                $('#btn_reset').addClass('hidden').removeClass('display');                $('#FORM_barcode').focus();            };                        function holdPartialReset() {                $('#FORM_barcode').val('');                $('#FORM_quantity').val('');                                var valHold     = $('#FORM_check_hold_hold').val();                var valRelease  = $('#FORM_check_hold_release').val();                                if (valHold == 1) { holdHold(); }                if (valRelease == 1) { holdRelease(); }            }        ");                $method = Get('method');        if ($method == 'hold') AddScriptOnReady("holdHold();");        if ($method == 'release') AddScriptOnReady("holdReset();");                                AddStyle("            #btn_hold_hold {                width:200px; height:50px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:left;                background-color:#0F63A5; color:#fff;            }            #btn_hold_release {                width:200px; height:50px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:left;                background-color:#CC2A21; color:#fff;            }            #btn_hold_reset {                width:100px; height:20px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:right;                background-color:#2FB406; color:#fff;            }            #btn_hold_done {                width:100px; height:20px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:right;                background-color:#2FB406; color:#fff;            }            .hidden {                display:none;            }            .display {                display:visible;            }            .form_wrapper_hold_hold {                background-color:#0F63A5; color:#fff;                display:visible;            }            .form_wrapper_hold_release {                background-color:#CC2A21; color:#fff;                display:visible;            }        ");                                $action = Get('action');        switch ($action) {            case 'hold_table':                                $table_holds = $this->ListTableText();                                echo "<h1>REMOVING HOLDS ON PRODUCTS</h1><br />";                echo "<div style='font-size:14px; width:400px;'>Click the trashcan icon to remove holds - if they apply to this order. Click the [DONE] button when you are complete.</div>";                                $buttons = '';                                $link_location = ($this->Add_Record_Link != '') ? $this->Add_Record_Link : $this->Page_Location;                                $btn_reset = "                    <div id='btn_hold_done'><a href='{$link_location}'>DONE</a></div>                    <div class='clear'></div>                    ";                                echo "                    <div style='min-width:500px; min-height:500px;'>                    $buttons                    <div id='form_wrap' class='hi___dden'>                        <br />                        $table_holds                    </div>                    $btn_reset                    </div>                ";            break;                        case 'add':            default:                $this->AddRecord();            break;        }                                if (Session('RESET_FORM_HOLD')) {            switch(Session('RESET_FORM_SCAN')) {                case 'hold':                    AddScriptOnReady("holdHold();");                break;                                case 'release':                    AddScriptOnReady("holdRelease();");                break;            }            unset($_SESSION['RESET_FORM_SCAN']);        }    }            public function SetFormArrays()    {            $action_msg = "<div id='checkin_msg' style=''>msgh here</div>";        $buttons = "            <div id='btn_hold_hold'>ADD Hold</div>&nbsp;&nbsp;&nbsp;            <div id='btn_hold_release'>REMOVE Hold</div>            <div class='clear'></div>            ";        $btn_reset = "            <div id='btn_hold_reset'>RESET</div>            <div class='clear'></div>            ";                        $message = Session('scan_message');        AddFlash($message);        unset ($_SESSION['scan_message']);            $base_array = array(            "code|<div style='min-width:500px; min-height:500px;'>",            #"info||$message<br /><br />",            "code|$buttons",            "code|<div id='form_wrap' class='hidden'>",            'code|<br />',                    "form|$this->Action_Link|post|db_edit_form",                    'hidden|check_hold_hold',                'hidden|check_hold_release',                            'text|BARCODE|barcode|Y|40|255',                'textarea|Hold Reason|hold_reason|Y|10|1',                'text|QTY|quantity|N|10|10',                                                'checkbox|MULTIPLE ENTRY|multiple_entry||1|0',                'checkbox|SKIP INVENTORY|speedscan||1|0',                "submit|Add Record|$this->Add_Submit_Name",            'endform',                "code|</div>",            "code|$btn_reset",            "code|</div>",                    );                $this->Form_Data_Array_Add = $base_array;    }            public function PostProcessFormValues($FormArray)    {        #echo ArrayToStr($FormArray);        #exit();                        # DON'T CONTINUE IF THERE ARE EXISTING FORM ERRORS        # ==========================================================        if ($this->Error) {            return false;        }                        # HANDLE FORM INFORMATION        # ============================================================        $multiple_entry                     = ($FormArray['multiple_entry'] == 1 ) ? true : false;        $speedscan                          = ($FormArray['speedscan'] == 1 ) ? true : false;        $quantity                           = ($FormArray['quantity'] != '' ) ? $FormArray['quantity'] : 1;                $qty_hold_hold                      = ($FormArray['check_hold_hold'] == 1) ? $quantity : 0;        $qty_hold_release                   = ($FormArray['check_hold_release'] == 1) ? $quantity : 0;                $FormArray['barcode']               = $FormArray['barcode'];        $FormArray['qty_hold']              = $qty_hold_hold;        $FormArray['qty_release']           = $qty_hold_release;                                if ($qty_hold_hold > 0) {            $_SESSION['scan_message']           = "HOLD Item";            $method                             = "hold";        }        if ($qty_hold_release > 0) {            $_SESSION['scan_message']           = "RELEASE Item Hold";            $method                             = "release";        }                                # CREATE LINK FOR PAGE SUCCESSFULY ADDING        # ============================================================        $method_link                = ($multiple_entry) ? $method : '';        $this->Page_Location_Get    = ";multiple_entry={$multiple_entry};speedscan={$speedscan};method={$method_link}";        $this->Page_Link_Success    = "{$this->Page_Location}{$this->Page_Location_Get}";                        # CREATE LINK FOR ADDING INVENTORY TO SYSTEM        # ============================================================        $post_add_link                  = HexEncodeString("{$this->Page_Location}{$this->Page_Location_Get}");        $link                           = getClassExecuteLinkNoAjax(EncryptQuery("class=Inventory_InventoryProducts;v1={$FormArray['barcode']};v2={$post_add_link};v3={$FormArray['retailer_code']}"));        $link                          .= ";action=add";        $this->Page_Link_Add_Inventory  = $link;                                if (!$speedscan) {            # VERIFY IF WE HAVE THIS PRODUCT IN INVENTORY            # ============================================================            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => '*',                'where' => "`barcode`={$FormArray['barcode']} AND `active`=1",            ));            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                        if (!$record) {                echo "<br /><br />UNABLE TO LOCATE PRODUCT ININVENTORY. <br /><a href='#'>Would you like to add inventory details?</a>";                $_SESSION['scan_add_inventory'] = $FormArray['barcode'];            }        }                                # RELEASE ->         # ============================================================        if ($qty_hold_release > 0) {                        # CHECK TO SEE IF THERE ARE ANY HOLDS TO BE RELEASED            # ============================================================            $record = $this->SQL->GetCustomRecord("                SELECT (SUM(`qty_hold`) - SUM(`qty_release`)) AS TOTAL_ON_HOLD                 FROM {$this->Table}                WHERE `barcode`={$FormArray['barcode']} AND `active`=1            ");            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                        $check_value = (isset($record['TOTAL_ON_HOLD'])) ? $record['TOTAL_ON_HOLD'] : 0;                        #if ($qty_hold_release > $check_value) {            #                #}                        if ($check_value == 0) {                $this->Error = "There are no current products on hold. No need to release. Cancelling transaction.";                $_SESSION['RESET_FORM_HOLD'] = 'hold';            } else {                                # THERE ARE HOLDS TO BE CANCELLED                $Page_Location_Get    = ";action=hold_table;barcode={$FormArray['barcode']}";                $Page_Link_Success    = "{$this->Page_Location}{$Page_Location_Get}";                                $Page_Link_Success = getClassExecuteLinkNoAjax(EncryptQuery("class=Inventory_InventoryHold;v1={$FormArray['barcode']};v2={$post_add_link}"));                $Page_Link_Success .= ";action=hold_table";                                header("Location: {$Page_Link_Success}");                 $this->Error = "TEMP HOLDING ERROR";                            }        }                        #echo "<br />record ===> $record";        #echo "<br />qty_release ===> $qty_release";        #echo "<br />check_value ===> $check_value";        #exit();                        # RETURN THE FORM ARRAY FOR DATABASE ENTRY        # ============================================================        unset($FormArray['quantity']);        unset($FormArray['check_hold_hold']);        unset($FormArray['check_hold_release']);        unset($FormArray['speedscan']);        unset($FormArray['multiple_entry']);                return $FormArray;    }        public function GetAllHolds($barcode)    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_holds',            'keys'  => '*',            'where' => "`barcode`={$barcode} AND `active`=1",        ));        if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                foreach ($records as $record) {            echo "<br />";        }    }            }  // -------------- END CLASS --------------