<?php// ========================================================================================// NOTES :// Always store the shipping and unit prices in TOTAL - do division later. This is more accurate than// previously having divided up a total and then doing multiplication on it - because of remainders.// // ========================================================================================class Inventory_InventoryBaseSimple extends BaseClass{    public $Page_Location                  = "/office/inventory/inventory_hold";    public $Page_Location_Get              = '';    public $Page_Link_Add_Inventory        = '';    public $Page_Link_Success              = '';    public $Show_Query                     = false;    public $Global_Form_Start              = '';    public $Global_Form_End                = '';        public $Barcode                        = '';    public $Add_Record_Link                = '';        public $Error                           = "";    public $Message                         = "";            public $title_template    = "<span class=\"formtitle\" style='font-weight:bold;'>@</span>\n";       // -------- Template for the title    public $info_template     = "<br /><span class=\"forminfo\">@</span>\n\n";                          // -------- templete for the input field            public $Classname                       = "";           // call in class construct with "$this->Classname = get_class($this);"        public $Error_Arr                       = array();              // will hold errors generated by this class    public $Have_Error                      = 0;                    // will = 1 if there are any errors     public $Notice_Arr                      = array();              // will hold notices generated by this class    public $Have_Notice                     = 0;                    // will = 1 if there are any notices     public $Show_Error                      = false;        public $SUPERUSER = 0;    public $WHID = 0;    public $NAME = 0;        public $SQL_Main                        = null;             // will hold connection to primary database    public $Module_Offline                  = false;            // (false) TRUE = will show offline message to user            public function  __construct()    {        parent::__construct();                //$this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);                setlocale(LC_MONETARY, 'en_US');                        // set money locality        date_default_timezone_set('America/Los_Angeles');       // set to PST timezone                        global $ADMIN_SUPER_USER, $WHID;        $this->SUPERUSER    = $ADMIN_SUPER_USER;        $this->WHID         = $_SESSION['USER_LOGIN']['LOGIN_RECORD']['wh_id'];        $this->NAME         = trim($_SESSION['USER_LOGIN']['LOGIN_RECORD']['first_name'] . ' ' . $_SESSION['USER_LOGIN']['LOGIN_RECORD']['last_name']);                    } // -------------- END __construct --------------        public function SetSQLInventory()    {        # FUNCTION :: override the SQL connection with a connection to the inventory system                        $OBJ_INVENTORY_DB = Lib_Singleton::GetInstance('Inventory_DatabaseSelect');                             // initialize the inventory system object        $inventory_db_connection = $OBJ_INVENTORY_DB->Get_DbConnectionString();                                 // get DB connection string for invventory system                if ($inventory_db_connection) {            $this->SQL->db_Close();                                     // close existing DB connection            $this->SQL->ConnectMySql($inventory_db_connection);         // connect to inventory database        } else {            echo "                <div style='width:400px; font-size:14px; color:red;'>                ERROR :: {$this->Classname} :: SetSQLInventory() :: Unable to connect to inventory database.                </br></br></br>                REASON :: You may not have access to the inventory system - or you may not have selected an inventory system to connect to. Please try to connect to inventory system and try action again.                </div>";                $_GET['action'] = 'error';            return false;        }    }        public function SetSQLMain()    {        # FUNCTION :: override the SQL connection with a connection to the inventory system                global $DB_INFO;                        if ($DB_INFO) {            $this->SQL_Main = Lib_Singleton::GetInstanceOverrideName('Lib_Pdo', '', 'DBMAIN');            $this->SQL_Main->db_Close();                                     // close existing DB connection            $this->SQL_Main->ConnectMySql($DB_INFO);         // connect to inventory database        } else {            echo "                <div style='width:400px; font-size:14px; color:red;'>                ERROR :: {$this->Classname} :: SetSQLMain() :: Unable to connect to main database.                </div>";                $_GET['action'] = 'error';            return false;        }    }        function ModuleOfflineMessage()    {        // ----- output maintenance message to screen        if ($this->Module_Offline) {            echo "                <div style='border:5px dashed red; margin:20px; padding:10px; color:#000; background-color:pink; font-weight:bold; font-size:14px; text-align:center;'>                    MODULE CURRENTLY UNDERGOING MAINTENANCE - PLEASE DO NOT USE                </div>            ";        }    }    }  // -------------- END CLASS ----------------