<?phpclass Inventory_Report_ReorderPoint extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Category_Remaining_Title    = 'Other';        public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-07-23',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0.0',            'Description'   => 'Show current inventory and its given re-order point',            'Update Log'    => array(                '2013-07-23_1.0.0'  => "Module Created",            ),        );            } // -------------- END __construct --------------        public function Execute()    {        //$_GET['sales_order_list'] = "666, 1256";        //$this->EchoVar('_POST', $_POST);                AddStylesheet("/css/inventory.css??20121108-1");                echo "This report shows the current inventory level and re-order points.        </br>* Does not show 'retired' products        <br /><br />";                                $date   = date('Y-m-d');        $type   = ucwords(Post('type'));        $type   = ($type) ? $type : 'Full';                $this->OutputForm();                        $array      = $this->CreateInventoryReport($type);        $output     = $this->ConvertArrayToTable($array);                        echo "        <br /><br />         <div style='color:blue; font-weight:bold;'>            <div style='font-size:20px;'>Re-Order Point Report</div>            <div style='font-size:14px;'>Type: {$type}</div>            <div style='font-size:14px;'>Date: {$date}</div>        </div>        <br /><br />         <div id='_jsonTable'>        {$output}        </div>        ";    }        public function ExecuteAjax()    {        $QDATA = GetEncryptQuery('eq');        $action = Get('action');        $return = 0;                switch ($action) {            default:            break;        }                echo $return;    }        public function OutputForm()    {                        $onclick 	        = ''; //"submitSalesOrderNumbers('list')";        $id 		        = 'btn_barcode';        $name 		        = 'btn_barcode';        $btn_submit         = MakeButton('positive', 'Submit Request', '', '', $id, $onclick, 'submit', $name);                       // ----- output the form        // ---- repopulate the form                $link       = Server('SCRIPT_URI');        //$value      = Post('date');        $checked    = (Post('report')) ? "checked" : '';                $output = '        <form action="'.$link.'" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        <div class="shadow" style="border:1px dashed blue; padding:5px; background-color:#efefef;">            <br class="formtitlebreak">            <div class="formtitle">Report Type:</div>            <div class="forminfo">                <select id="type" name="type">                    <option value="full">Full Re-Order Point</option>                    <option value="critical">Critical Re-Order Point</option>                </select>            </div>                                    <div style="clear:both;"></div>            <br class="formtitlebreak">            <div class="formtitle"></div>            <div class="forminfo">                '.$btn_submit.' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            </div>                        <div style="clear:both;"></div>                    </div>        </form>';        echo $output;    }        public function CreateInventoryReport($TYPE)    {                $data   = array();                              // initialize variable        $date   = date('Y-m-d');                        // initialize variable        $count  = 0;                                    // initialize variable                                // ----- get all the products        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_products',            'keys'  => '*',            'where' => "active=1 AND status_retired=0",        ));        //$this->EchoQuery();                                                        if ($records) {                        // ----- loop through each barcode item            foreach ($records as $record) {                                $count++;                $temp_arr               = array();                $barcode                = $record['barcode'];                $quantity               = $this->InventoryItemQuantityAvailable($barcode, $date);                $quantity               = (!$quantity) ? 0 : $quantity;                $reorder_point          = ($record['reorder_point'] != 0) ? $record['reorder_point'] : 0;                $status                 = ($quantity <= $record['reorder_point'] && $record['status_retired'] == 0) ? "<span style='color:red; font-weight:bold;'>YES</span>" : "";                                $temp_arr = array(                    'ID'                    => $count,                    'barcode'               => $barcode,                    'retailer_code'         => $record['retailer_code'],                    'quantity'              => $quantity,                    'reorder_point'         => $reorder_point,                    'RE-ORDER'              => $status,                    'type_class'            => $record['type_class'],                    'vendor'                => $record['vendor'],                    'manufacturer_code'     => $record['manufacturer_code'],                    'leadtime_days'         => $record['leadtime_days'],                    'part_cost'             => money_format("%n", $record['part_cost']),                );                                                switch (strtolower($TYPE)) {                    case 'critical':                        if ($quantity <= $reorder_point) {                            $data[] = $temp_arr;                        }                    break;                                        default:                    case 'full':                        $data[] = $temp_arr;                    break;                }                                                            } // end foreach                    }                return $data;    }    }  // -------------- END CLASS --------------