<?phpclass Inventory_Report_ReorderPoint extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Category_Remaining_Title    = 'Other';        public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-07-23',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-11-18',            'Filename'      => $this->Classname,            'Version'       => '1.1',            'Description'   => 'Show current inventory and its given re-order point',            'Update Log'    => array(                '2013-07-23_1.0'  => "Module Created",                '2013-11-18_1.1'  => "Updated for pending inventory",            ),        );            } // -------------- END __construct --------------        public function Execute()    {        //$_GET['sales_order_list'] = "666, 1256";        //$this->EchoVar('_POST', $_POST);                AddStylesheet("/css/inventory.css??20121108-1");                echo "This report shows the current inventory level and re-order points.        </br>* Does not show 'retired' products        <br /><br />";                                $date   = date('Y-m-d');        $type   = ucwords(Post('type'));        $type   = ($type) ? $type : 'Full';                $this->OutputForm();                        $array      = $this->CreateInventoryReport($type);        $output     = $this->ConvertArrayToTable($array);                        echo "        <br /><br />         <div style='color:blue; font-weight:bold;'>            <div style='font-size:20px;'>Re-Order Point Report</div>            <div style='font-size:14px;'>Type: {$type}</div>            <div style='font-size:14px;'>Date: {$date}</div>        </div>        <br /><br />                 <div style='border:1px solid #999; padding:5px;'>        <b>Notes:</b>        <ul style='padding:2px;'>        <li><b>Potential Order</b>, <b>Confirmed Order</b>, and <b>In Processing</b> are items from the 'INVENTORY ITEM INPUT' section of orders with the specified 'order status'. Quantities shown account for inventory that has not been marked as 'SENT'.</li>        <li><b>Re-Order (ALL SENT)</b> is the re-order status based on all Potential_Order, Confirmed_Order, and In_Processing being SENT out immediately.</li>        </ul>        </div>                </br></br>        <div id='_jsonTable'>        {$output}        </div>        ";    }        public function ExecuteAjax()    {        $QDATA = GetEncryptQuery('eq');        $action = Get('action');        $return = 0;                switch ($action) {            default:            break;        }                echo $return;    }        public function OutputForm()    {                        $onclick 	        = ''; //"submitSalesOrderNumbers('list')";        $id 		        = 'btn_barcode';        $name 		        = 'btn_barcode';        $btn_submit         = MakeButton('positive', 'Submit Request', '', '', $id, $onclick, 'submit', $name);                       // ----- output the form        // ---- repopulate the form                $link       = Server('SCRIPT_URI');        //$value      = Post('date');        $checked    = (Post('report')) ? "checked" : '';                $output = '        <form action="'.$link.'" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        <div class="shadow" style="border:1px dashed blue; padding:5px; background-color:#efefef;">            <br class="formtitlebreak">            <div class="formtitle">Report Type:</div>            <div class="forminfo">                <select id="type" name="type">                    <option value="full">Full Re-Order Point</option>                    <option value="critical">Critical Re-Order Point</option>                </select>            </div>                                    <div style="clear:both;"></div>            <br class="formtitlebreak">            <div class="formtitle"></div>            <div class="forminfo">                '.$btn_submit.' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            </div>                        <div style="clear:both;"></div>                    </div>        </form>';        echo $output;    }        public function CreateInventoryReport($TYPE)    {                $data   = array();                              // initialize variable        $date   = date('Y-m-d');                        // initialize variable        $count  = 0;                                    // initialize variable                                // ----- get all the products        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_products',            'keys'  => '*',            'where' => "active=1 AND status_retired=0",        ));        //$this->EchoQuery();        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                        $status_categories  = $this->GetSetting('report_reorderpoint_sopipelinestatus');        // get setting from database        $status_parts       = explode("|", $status_categories);                                 // explode into parts        $search             = "";                                                               // initialize variable        $search_status      = "";                                                               // initialize variable        $barcode_count      = array();                                                          // initialize variable                if ($status_parts) {            foreach ($status_parts AS $part) {                $search .= "'{$part}',";                                                        // create search item            }            $search             = substr($search, 0, -1);                                       // trim off trailing comma            $search_status      = "AND pipeline_status IN ({$search})";                         // create text for SQL                        $records_sales_orders = $this->SQL->GetArrayAll(array(                'table' => 'inventory_sales_orders',                'keys'  => 'inventory_sales_orders_id, pipeline_status',                'where' => "active=1 {$search_status}",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);            //$this->EchoVar('records_sales_orders', $records_sales_orders);            //exit();                        if ($records_sales_orders) {                foreach ($records_sales_orders AS $record) {                                        $isoid  = $record['inventory_sales_orders_id'];                    $status = $record['pipeline_status'];                                        $records_lines = $this->SQL->GetArrayAll(array(                        'table' => 'inventory_sales_order_lines',                        'keys'  => 'inventory_sales_order_lines.barcode AS BARCODE, inventory_sales_order_lines.quantity AS QTY_ORDERED, inventory_sales_order_sent.quantity AS QTY_SENT, inventory_sales_order_sent.active AS SENT_ACTIVE',                        'where' => "inventory_sales_order_lines.active=1 AND inventory_sales_order_lines.inventory_sales_orders_id={$isoid} AND inventory_sales_order_lines.status_force_sent=0",                        'joins' => "LEFT JOIN inventory_sales_order_sent ON inventory_sales_order_sent.inventory_sales_order_lines_id = inventory_sales_order_lines.inventory_sales_order_lines_id ", //WHERE inventory_sales_order_sent.active=1                    ));                    $this->SQL->EchoQuery($this->Classname, 'AAAA --- ' . __FUNCTION__);                                        if ($records_lines) {                        #$this->EchoVar('', 'HAVE LINES');                        #$this->EchoVar('records_lines', $records_lines);                        foreach ($records_lines AS $rec) {                            $barcode    = $rec['BARCODE'];                            $ordered    = $rec['QTY_ORDERED'];                            $sent       = ($rec['QTY_SENT'] == '') ? 0 : $rec['QTY_SENT'];              // default to 0 if no value                            $active     = ($rec['SENT_ACTIVE'] == '') ? 1 : $rec['SENT_ACTIVE'];        // default to 1 (active) if no value                                                        if (($active != 0) && ($ordered > $sent)) {                                $existing_for_barcode               = (isset($barcode_count[$barcode][$status])) ? $barcode_count[$barcode][$status] : 0;                                $new                                = $existing_for_barcode + $ordered - $sent;                                $barcode_count[$barcode][$status]   = $new;                            }                        }                    }                                    }            }                    }                #$this->EchoVar('barcode_count', $barcode_count);        #exit();                                if ($records) {                        // ----- loop through each barcode item            foreach ($records as $record) {                                $count++;                $temp_arr               = array();                $barcode                = $record['barcode'];                $quantity_available     = $this->InventoryItemQuantityAvailable($barcode, $date);                $quantity_available     = (!$quantity_available) ? 0 : $quantity_available;                $reorder_point          = ($record['reorder_point'] != 0) ? $record['reorder_point'] : 0;                $status                 = ($quantity_available <= $record['reorder_point'] && $record['status_retired'] == 0) ? "<span style='color:red; font-weight:bold;'>YES</span>" : "";                                $temp_arr_1 = array(                    'ID'                    => $count,                    'Barcode'               => $barcode,                    'Retailer Code'         => $record['retailer_code'],                    'Quantity Available'    => $quantity_available,                    'Reorder Point'         => $reorder_point,                    'RE ORDER ?'              => $status,                );                                                $count_unsent   = 0;                    // initialize variable                $temp_arr_2     = array();              // initialize variable                foreach ($status_parts AS $part) {                   $count                   = (isset($barcode_count[$barcode][$part])) ? $barcode_count[$barcode][$part] : 0;                   $temp_arr_2[$part]       = ($count == 0) ? $count : "<span style='color:blue; font-weight:bold;'>{$count}</span>";                   $count_unsent            = $count_unsent + $count;                }                $quantity_available_sent            = $quantity_available - $count_unsent;      // what would qty be after sending all unsent items                $status                             = ($quantity_available_sent <= $record['reorder_point'] && $record['status_retired'] == 0) ? "<span style='color:red; font-weight:bold;'>YES</span>" : "";                $temp_arr_2['Re-Order (ALL SENT)']  = $status;                                                $temp_arr_3 = array(                        'Type Class'            => $record['type_class'],                    'Vendor'                => $record['vendor'],                    'Manufacturer Code'     => $record['manufacturer_code'],                    'Leadtime Days'         => $record['leadtime_days'],                    'Part Cost'             => money_format("%n", $record['part_cost']),                );                                $temp_arr = array_merge ($temp_arr_1, $temp_arr_2, $temp_arr_3);                    // merge all the arrays                                switch (strtolower($TYPE)) {                    case 'critical':                        if ($quantity_available <= $reorder_point) {                            $data[] = $temp_arr;                        }                    break;                                        default:                    case 'full':                        $data[] = $temp_arr;                    break;                }                                                            } // end foreach                    }                return $data;    }    }  // -------------- END CLASS --------------