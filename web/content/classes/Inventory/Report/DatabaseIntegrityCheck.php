<?phpclass Inventory_Report_DatabaseIntegrityCheck extends Inventory_InventoryBase{    public $Show_Query                  = false;            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-12-11',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-01-07',            'Filename'      => $this->Classname,            'Version'       => '1.1',            'Description'   => 'Runs checks on database to see if there are any known issues.',            'Update Log'    => array(                '2012-12-11_1.0'    => "Module Created",                '2013-01-07_1.1'    => "Added RunNoReferenceCheck() function",            ),        );            } // -------------- END __construct --------------        public function Execute()    {        //$_GET['sales_order_list'] = "666, 1256";        //$this->EchoVar('_POST', $_POST);                AddStylesheet("/css/inventory.css??20121108-1");                echo "This report run various integrity checks against the database and reports issues to fix (via other modules).        <br /><br />";                        // ----- output the main execute form        $this->OutputForm();                        // ----- determine if form submitted to actually run        $run = (isset($_POST['btn_runchecks'])) ? true : false;        if ($run) {            $arr = array();                                    $showquery      = Post('show_queries');         // output queries if requested            $showresults    = Post('show_results');         // output database results if requested                                // ----- No reference inventory_counts check -----            // ----- Description: Checks for inventory_counts records where there is no reference to the inventory movement            $result = $this->RunDateNotMatchCheck($showquery, $showresults);            $message = ($result == "FAILED") ? "Inventory movements have non-matching dates. Fix these records." : '';            $arr[] = array(                'check'     => "Inventory_counts not matching dates check",                'result'    => $result,                'message'   => $message,            );                                    // ----- No reference inventory_counts check -----            // ----- Description: Checks for inventory_counts records where there is no reference to the inventory movement            $result = $this->RunNoReferenceCheck($showquery, $showresults);            $message = ($result == "FAILED") ? "Inventory counts with no reference exist. Deactivate these records." : '';            $arr[] = array(                'check'     => "No reference inventory_counts check",                'result'    => $result,                'message'   => $message,            );                                    // ----- $0 inventory adjustments check -----            $result = $this->RunZeroInventoryAdjustmentCheck($showquery, $showresults);            $message = ($result == "FAILED") ? "Inventory adjustments of $0 exist. May be allowed for some items." : '';            $arr[] = array(                'check'     => "$0 Inventory Adjustments",                'result'    => $result,                'message'   => $message,            );                                    // ----- No date inventory check -----            $result = $this->RunNoDateInventoryCount($showquery, $showresults);            $message = ($result == "FAILED") ? "Run update to add dates." : '';            $arr[] = array(                'check'     => "No Date Inventory_Counts",                'result'    => $result,                'message'   => $message,            );                                    // ----- output the results            $output = $this->ConvertArrayToTable($arr);            echo "<br /><br /><div id='jsonTable'>{$output}</div>";        }            }            public function RunDateNotMatchCheck($SHOWQUERY=false, $SHOWRECORDS=false)    {        $output     = '';        $echo       = '';        $passed     = true;        $records_output = array();                $Obj                = new Inventory_FixInventoryDateMismatch();        $Obj->Show_Query    = $SHOWQUERY;                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR RunDateNotMatchCheck()</div>" : '';        $records    = $Obj->GetAllRecords();                                                foreach ($records as $id => $record) {            //$records[$id]['date_unix'] = strtotime($record['date']);                                    // ----- determine the date the inventory change was made with            $date               = '';            $date               = (isset($record['IN_DATE']))   ? $record['IN_DATE']        : $date;            $date               = (isset($record['ADJ_DATE']))  ? $record['ADJ_DATE']       : $date;            $date               = (isset($record['ASSY_DATE'])) ? $record['ASSY_DATE']      : $date;            $date               = (isset($record['OUT_DATE']))  ? $record['OUT_DATE']       : $date;            $date_parts         = explode(" ", $date);  // trim off the time            $date               = $date_parts[0];       // trim off the time            //$date               .= "<br />{$record['date']}";                        $date_linked_record     = $date;            $date_inventory_counts  = $record['date'];                        $passed = ($date_linked_record != $date_inventory_counts) ? false : $passed;                        // ----- store the failed record            if ($date_linked_record != $date_inventory_counts) {                $records_output[] = $record;                                echo "<br />";                $this->EchoVar('inventory_counts_id', $record['inventory_counts_id']);                $this->EchoVar('barcode', $record['barcode']);                $this->EchoVar('ref_purchase_orders_received_id', $record['ref_purchase_orders_received_id']);                $this->EchoVar('Record Date', $date_inventory_counts);                $this->EchoVar('Linked Date', $date_linked_record);                                            }        }                                echo       ($SHOWQUERY) ? "</div>" : '';                echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR RunDateNotMatchCheck()</div>" : '';        echo       ($SHOWRECORDS) ? ArrayToStr($records_output) : '';        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = (!$passed) ? "FAILED" : "PASSED";        return $output;    }        public function RunZeroInventoryAdjustmentCheck($SHOWQUERY=false, $SHOWRECORDS=false)    {        $output     = '';        $echo       = '';                $Obj                = new Inventory_FixZeroDollarInventoryAdjustment();        $Obj->Show_Query    = $SHOWQUERY;                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR RunZeroInventoryAdjustmentCheck()</div>" : '';        $records    = $Obj->GetAllRecords();        echo       ($SHOWQUERY) ? "</div>" : '';                echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR RunZeroInventoryAdjustmentCheck()</div>" : '';        echo       ($SHOWRECORDS) ? ArrayToStr($records) : '';        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = ($records) ? "FAILED" : "PASSED";        return $output;    }        public function RunNoDateInventoryCount($SHOWQUERY=false, $SHOWRECORDS=false)    {        $output     = '';        $echo       = '';                $Obj                = new Inventory_FixInventoryCountsNoDate();        $Obj->Show_Query    = $SHOWQUERY;                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR RunNoDateInventoryCount()</div>" : '';        $records    = $Obj->GetAllRecords();        echo       ($SHOWQUERY) ? "</div>" : '';                echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR RunNoDateInventoryCount()</div>" : '';        echo       ($SHOWRECORDS) ? ArrayToStr($records) : '';        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = ($records) ? "FAILED" : "PASSED";        return $output;    }        public function RunNoReferenceCheck($SHOWQUERY=false, $SHOWRECORDS=false)    {        $output     = '';        $echo       = '';                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR RunNoReferenceCheck()</div>" : '';        $records    = $this->SQL->GetArrayAll(array(            'table' => "inventory_counts",            'keys'  => "*",            'where' => "`ref_purchase_orders_received_id` =0 AND `ref_adjustment_id` =0 AND `ref_sales_order_sent_id` =0 AND `ref_assembly_build_id` =0 AND active=1",        ));                echo       ($SHOWQUERY) ? "</div>" : '';                echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR RunNoReferenceCheck()</div>" : '';        echo       ($SHOWRECORDS) ? ArrayToStr($records) : '';        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = ($records) ? "FAILED" : "PASSED";        return $output;                        /*        ===== FIX QUERY =====        UPDATE `inventory_counts`        SET `active`=0, `notes`="Deactivated record because it has no external reference for iventory movement. No way of knowing why inventory moved in or out of system."         WHERE `ref_purchase_orders_received_id` =0        AND `ref_adjustment_id` =0        AND `ref_sales_order_sent_id` =0        AND `ref_assembly_build_id` =0         AND `active`=1        */    }        public function ExecuteAjax()    {        $QDATA = GetEncryptQuery('eq');        $action = Get('action');        $return = 0;                switch ($action) {            default:            break;        }                echo $return;    }        public function OutputForm()    {        // ----- Javascript Functionality -----        $this->JavascriptDatepickerFunctionality(array('date'));                        $onclick 	        = ''; //"submitSalesOrderNumbers('list')";        $id 		        = 'btn_runchecks';        $name 		        = 'btn_runchecks';        $btn_submit         = MakeButton('positive', 'Run Checks', '', '', $id, $onclick, 'submit', $name);                       // ----- output the form        // ---- repopulate the form                $link   = Server('SCRIPT_URI');        $checked_show_queries = (Post('show_queries')) ? "checked" : '';        $checked_show_results = (Post('show_results')) ? "checked" : '';                        $output = '        <form action="'.$link.'" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        <div class="shadow" style="border:1px dashed blue; padding:5px; background-color:#efefef;">                                    <br class="formtitlebreak">            <div class="formtitle">Show Queries:</div>            <div class="forminfo">                <input id="show_queries" class="formitem" name="show_queries" value="1" type="checkbox" '.$checked_show_queries.'>            </div>                        <div style="clear:both;"></div>            <br class="formtitlebreak">            <div class="formtitle">Show Results:</div>            <div class="forminfo">                <input id="show_results" class="formitem" name="show_results" value="1" type="checkbox" '.$checked_show_results.'>            </div>                        <br class="formtitlebreak">            <div class="formtitle"></div>            <div class="forminfo">                '.$btn_submit.' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            </div>                        <div style="clear:both;"></div>                    </div>        </form>';        echo $output;    }    }  // -------------- END CLASS --------------