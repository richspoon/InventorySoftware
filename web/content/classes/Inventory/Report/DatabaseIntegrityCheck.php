<?phpclass Inventory_Report_DatabaseIntegrityCheck extends Inventory_InventoryBase{    public $Show_Query                  = false;            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-12-11',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-09-30',            'Filename'      => $this->Classname,            'Version'       => '1.2',            'Description'   => 'Runs checks on database to see if there are any known issues.',            'Update Log'    => array(                '2012-12-11_1.0'    => "Module Created",                '2013-01-07_1.1'    => "Added RunNoReferenceCheck() function",                '2013-09-30_1.2'    => "Added RunZeroDollarPOReceipt() function. Fixed name changes on some other classes.",            ),        );                $this->SQL->Db_Want_Query   = true;         // turn on wanting queries                    } // -------------- END __construct --------------        public function Execute()    {        //$_GET['sales_order_list'] = "666, 1256";        //$this->EchoVar('_POST', $_POST);                AddStylesheet("/css/inventory.css??20121108-1");                echo "This report run various integrity checks against the database and reports issues to fix (via other modules).        <br /><br />";                        // ----- output the main execute form        $this->OutputForm();                        // ----- determine if form submitted to actually run        $run = (isset($_POST['btn_runchecks'])) ? true : false;        if ($run) {            $arr = array();                                    $showquery      = Post('show_queries');         // output queries if requested            $showresults    = Post('show_results');         // output database results if requested                                // ----- No reference inventory_counts check -----            $result     = $this->RunDateNotMatchCheck($showquery, $showresults);            $message    = ($result == "FAILED") ? "Inventory movements have non-matching dates. Fix these records." : '';            $result     = ($result == "FAILED") ? "<span style='color:red; font-weight:bold;'>{$result}</span>" : $result;            $arr[]      = array(                'check'         => "Inventory_counts not matching dates check",                'description'   => "Checks for inventory_counts records where date doesn't match inventory movement that put this inventory into the system. (i.e. you received inventory on a PO on 2/4/13 - but system checks the PO and data says inventory was received on 2/6/13.)",                'result'        => $result,                'message'       => $message,            );                                    // ----- No reference inventory_counts check -----            $result     = $this->RunNoReferenceCheck($showquery, $showresults);            $message    = ($result == "FAILED") ? "Inventory counts with no reference exist. Deactivate these records." : '';            $result     = ($result == "FAILED") ? "<span style='color:red; font-weight:bold;'>{$result}</span>" : $result;            $arr[]      = array(                'check'         => "No reference inventory_counts check",                'description'   => "Checks for inventory_counts records where there is no reference to the inventory movement that put this inventory into the system. (i.e. you received inventory on a PO - but now system can't find the PO.)",                'result'        => $result,                'message'       => $message,            );                                    // ----- $0 inventory adjustments check -----            $result     = $this->RunZeroInventoryAdjustmentCheck($showquery, $showresults);            $message    = ($result == "FAILED") ? "Inventory adjustments of $0 exist. May be allowed for some items." : '';            $result     = ($result == "FAILED") ? "<span style='color:red; font-weight:bold;'>{$result}</span>" : $result;            $arr[]      = array(                'check'         => "$0 Inventory Adjustments",                'description'   => "An inventory adjustment with a value of $0 is found in the system and NOT approved by the user.",                'result'        => $result,                'message'       => $message,            );                                    // ----- No date inventory check -----            $result     = $this->RunNoDateInventoryCount($showquery, $showresults);            $message    = ($result == "FAILED") ? "Run update to add dates." : '';            $result     = ($result == "FAILED") ? "<span style='color:red; font-weight:bold;'>{$result}</span>" : $result;            $arr[]      = array(                'check'         => "No Date Inventory_Counts",                'description'   => "There is an inventory_count record without a date. Either a user deleted the date field when receiving/moving inventory or data has been corrupted.",                'result'        => $result,                'message'       => $message,            );                                    // ----- $0 PO received check -----            $result     = $this->RunZeroDollarPOReceipt($showquery, $showresults);            $message    = ($result == "FAILED") ? "Delete and re-receive inventory with an actual value." : '';            $result     = ($result == "FAILED") ? "<span style='color:red; font-weight:bold;'>{$result}</span>" : $result;            $arr[]      = array(                'check'         => "$0 PO Inventory received",                'description'   => "Inventory was received on a Purchase Order - but no value was entered for received inventory.",                'result'        => $result,                'message'       => $message,            );                                    // ----- Inventory no location check -----            $result     = $this->RunInventoryNoLocationCheck($showquery, $showresults);            $message    = ($result == "FAILED") ? "Delete and re-receive inventory with an actual location." : '';            $result     = ($result == "FAILED") ? "<span style='color:red; font-weight:bold;'>{$result}</span>" : $result;            $arr[]      = array(                'check'         => "Inventory with no location",                'description'   => "Inventory has been found in system without being allocated to a location.",                'result'        => $result,                'message'       => $message,            );                                                // ----- output the results            $output = $this->ConvertArrayToTable($arr);            echo "<br /><br /><div id='jsonTable'>{$output}</div>";        }            }                        public function RunDateNotMatchCheck($SHOWQUERY=false, $SHOWRECORDS=false)    {        $function_name              = __FUNCTION__;        $output                     = '';        $echo                       = '';        $passed                     = true;        $records_output             = array();                $Obj                = new Inventory_Fix_InventoryDateMismatch();        $Obj->Show_Query    = $SHOWQUERY;                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR {$function_name}()</div>" : '';        $records    = $Obj->GetAllRecords();                                                foreach ($records as $id => $record) {            //$records[$id]['date_unix'] = strtotime($record['date']);                                    // ----- determine the date the inventory change was made with            $date               = '';            $date               = (isset($record['IN_DATE']))   ? $record['IN_DATE']        : $date;            $date               = (isset($record['ADJ_DATE']))  ? $record['ADJ_DATE']       : $date;            $date               = (isset($record['ASSY_DATE'])) ? $record['ASSY_DATE']      : $date;            $date               = (isset($record['OUT_DATE']))  ? $record['OUT_DATE']       : $date;            $date               = (isset($record['MOV_DATE']))  ? $record['MOV_DATE']       : $date;            $date_parts         = explode(" ", $date);  // trim off the time            $date               = $date_parts[0];       // trim off the time            //$date               .= "<br />{$record['date']}";                        $date_linked_record     = $date;            $date_inventory_counts  = $record['date'];                        $passed = ($date_linked_record != $date_inventory_counts) ? false : $passed;                        // ----- store the failed record            if ($date_linked_record != $date_inventory_counts) {                $records_output[] = $record;                /*                echo "<br />";                $this->EchoVar('inventory_counts_id', $record['inventory_counts_id']);                $this->EchoVar('barcode', $record['barcode']);                $this->EchoVar('ref_purchase_orders_received_id', $record['ref_purchase_orders_received_id']);                $this->EchoVar('Record Date', $date_inventory_counts);                $this->EchoVar('Linked Date', $date_linked_record);                */                            }        }                                echo       ($SHOWQUERY) ? "</div>" : '';                echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR {$function_name}()</div>" : '';        //if ($SHOWRECORDS) { echo ($records) ? ArrayToStr($records_output) : 'NO RECORDS FOUND'; }        if ($SHOWRECORDS) {            echo $this->TableOutputArea($function_name);            $this->OutputDataManagement($records_output, $function_name);        }        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = (!$passed) ? "FAILED" : "PASSED";        return $output;    }        public function RunZeroInventoryAdjustmentCheck($SHOWQUERY=false, $SHOWRECORDS=false)    {        $function_name              = __FUNCTION__;        $output                     = '';        $echo                       = '';                $Obj                = new Inventory_Fix_ZeroDollarInventoryAdjustment();        $Obj->Show_Query    = $SHOWQUERY;                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR {$function_name}()</div>" : '';        $records    = $Obj->GetAllRecords();        echo       ($SHOWQUERY) ? "</div>" : '';                echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR {$function_name}()</div>" : '';        //if ($SHOWRECORDS) { echo ($records) ? ArrayToStr($records) : 'NO RECORDS FOUND'; }        if ($SHOWRECORDS) {            echo $this->TableOutputArea($function_name);            $this->OutputDataManagement($records, $function_name);        }        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = ($records) ? "FAILED" : "PASSED";        return $output;    }        public function RunNoDateInventoryCount($SHOWQUERY=false, $SHOWRECORDS=false)    {        $function_name              = __FUNCTION__;        $output                     = '';        $echo                       = '';                $Obj                = new Inventory_Fix_InventoryCountsNoDate();        $Obj->Show_Query    = $SHOWQUERY;                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR {$function_name}()</div>" : '';        $records    = $Obj->GetAllRecords();        echo       ($SHOWQUERY) ? "</div>" : '';                echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR {$function_name}()</div>" : '';        //if ($SHOWRECORDS) { echo ($records) ? ArrayToStr($records) : 'NO RECORDS FOUND'; }        if ($SHOWRECORDS) {            echo $this->TableOutputArea($function_name);            $this->OutputDataManagement($records, $function_name);        }        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = ($records) ? "FAILED" : "PASSED";        return $output;    }        public function RunNoReferenceCheck($SHOWQUERY=false, $SHOWRECORDS=false)    {        $function_name              = __FUNCTION__;        $output                     = '';        $echo                       = '';                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR {$function_name}()</div>" : '';        $records    = $this->SQL->GetArrayAll(array(            'table' => "inventory_counts",            'keys'  => "*",            'where' => "`ref_purchase_orders_received_id` =0 AND `ref_adjustment_id` =0 AND `ref_sales_order_sent_id` =0 AND `ref_assembly_build_id` =0 AND ref_inventory_movements_id=0 AND active=1",        ));                echo       ($SHOWQUERY) ? "</div>" : '';                echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR {$function_name}()</div>" : '';        //if ($SHOWRECORDS) { echo ($records) ? ArrayToStr($records) : 'NO RECORDS FOUND'; }        if ($SHOWRECORDS) {            echo $this->TableOutputArea($function_name);            $this->OutputDataManagement($records, $function_name);        }        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = ($records) ? "FAILED" : "PASSED";        return $output;                        /*        ===== FIX QUERY =====        UPDATE `inventory_counts`        SET `active`=0, `notes`="Deactivated record because it has no external reference for iventory movement. No way of knowing why inventory moved in or out of system."         WHERE `ref_purchase_orders_received_id` =0        AND `ref_adjustment_id` =0        AND `ref_sales_order_sent_id` =0        AND `ref_assembly_build_id` =0         AND `active`=1        */    }        public function RunZeroDollarPOReceipt($SHOWQUERY=false, $SHOWRECORDS=false)    {        # FUNCTION :: Checks for inventory received on a PO with no dollar value                $this->Show_Query           = $SHOWQUERY;        $function_name              = __FUNCTION__;        $output                     = '';        $echo                       = '';                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR {$function_name}()</div>" : '';        $records    = $this->SQL->GetArrayAll(array(            'table' => "inventory_purchase_order_received",            'keys'  => "inventory_purchase_orders.po_number, inventory_purchase_order_received.barcode, inventory_purchase_order_received.date, inventory_purchase_order_received.quantity, inventory_purchase_order_received.price_total, inventory_purchase_order_received.price_shipping_total",            'where' => "inventory_purchase_order_received.price_total=0 AND inventory_purchase_order_received.active=1",            'joins' => "LEFT JOIN inventory_purchase_orders ON inventory_purchase_orders.inventory_purchase_orders_id = inventory_purchase_order_received.inventory_purchase_orders_id",        ));                echo       ($SHOWQUERY) ? $this->SQL->Db_Last_Query : '';        echo       ($SHOWQUERY) ? "</div>" : '';        echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR {$function_name}()</div>" : '';        if ($SHOWRECORDS) {            echo $this->TableOutputArea($function_name);            $this->OutputDataManagement($records, $function_name);        }        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = ($records) ? "FAILED" : "PASSED";        return $output;            }        public function RunInventoryNoLocationCheck($SHOWQUERY=false, $SHOWRECORDS=false)    {        # FUNCTION :: Checks for inventory received on a PO with no dollar value                $this->Show_Query           = $SHOWQUERY;        $function_name              = __FUNCTION__;        $output                     = '';        $echo                       = '';                echo       ($SHOWQUERY || $SHOWRECORDS) ? "<br /><br />" : '';        echo       ($SHOWQUERY) ? "<div style='border:1px solid red; margin:10px; padding:10px;'>" : '';        echo       ($SHOWQUERY) ? "<div style='background-color:red; color:#fff; padding:5px;'>QUERY FOR {$function_name}()</div>" : '';        $records    = $this->SQL->GetArrayAll(array(            'table' => "inventory_counts",            'keys'  => "barcode, inventory_counts_id, qty_in, qty_out, date, inventory_locations_id, ref_purchase_orders_received_id, ref_adjustment_id, ref_sales_order_sent_id, ref_assembly_build_id, ref_inventory_movements_id, notes",            'where' => "inventory_locations_id=0 AND active=1",        ));                echo       ($SHOWQUERY) ? $this->SQL->Db_Last_Query : '';        echo       ($SHOWQUERY) ? "</div>" : '';        echo       ($SHOWRECORDS) ? "<div style='border:1px solid blue; margin:10px; padding:10px;'>" : '';        echo       ($SHOWRECORDS) ? "<div style='background-color:blue; color:#fff; padding:5px;'>RECORDS FOR {$function_name}()</div>" : '';        if ($SHOWRECORDS) {            echo $this->TableOutputArea($function_name);            $this->OutputDataManagement($records, $function_name);        }        echo       ($SHOWRECORDS) ? "</div>" : '';                $output     = ($records) ? "FAILED" : "PASSED";        return $output;            }                                private function TableOutputArea($FUNCTIONNAME)    {        $textarea_id    = "{$FUNCTIONNAME}_autotable_holder";        $table_id       = "{$FUNCTIONNAME}_autotable_table_display";                $output = "            <div style='display:none;'>            <textarea id='FORM_{$textarea_id}' name='FORM_{$textarea_id}' cols='60' rows='4'></textarea>            </div>            <div id='{$table_id}'></div>        ";                return $output;    }        private function OutputDataManagement($RECORDS, $FUNCTIONNAME)    {        $textarea_id    = "{$FUNCTIONNAME}_autotable_holder";        $table_id       = "{$FUNCTIONNAME}_autotable_table_display";        $content        = $this->ConvertRecordInfoToArray($RECORDS);                    // convert the record details to order lines table        $this->ScriptJSONTableGeneric();                                                // Add in the generic code held in the BaseClass        $this->MoveArrayIntoForm($content, $textarea_id, $table_id);    }        private function ConvertRecordInfoToArray($records)     {        $delimiter  = '|';        $newline    = "\\n";        $rows       = '';        $header     = '';        $loopcount  = 0;                if ($records) {            foreach ($records as $record) {                foreach ($record as $key => $val) {                    $rows .= "{$val}|";                                        if ($loopcount == 0) {                        $header .= "{$key}|";                    }                }                $rows = substr($rows, 0, -1);           // trim off trailing pipe                $rows .= $newline;                      // add line return                                if ($loopcount == 0) {                    $header = substr($header, 0, -1);           // trim off trailing pipe                    $header .= $newline;                        // add line return                }                                                $loopcount++;                           // increment loop so we don't get another header            }                        $output = $header . $rows;        } else {            $output = "NO RECORDS FOUND{$newline}NO RECORDS FOUND";        }                return $output;    }        public function MoveArrayIntoForm($CONTENT, $TEXID, $TABLEID)    {        # FUNCTION :: Get the delimited text and convert to a table using JavaScript                // ----- feed this array into javascript to put in holder area        $script = "            var targetTextID        = 'FORM_{$TEXID}';          // defines hidden textarea that will hold the text array            var targetTableDivID    = '{$TABLEID}';        // defines the div that wraps the created table                        var targetText          = $('#' + targetTextID);            // defines hidden textarea that will hold the text array            var targetTableDiv      = $('#' + targetTableDivID);        // defines the div that wraps the created table                        targetText.val(\"{$CONTENT}\");                             // put the array into textbox            createTableFromTextbox(targetText, targetTableDiv);         // call function to create table from array        ";        AddScriptOnReady($script);    }                        public function ExecuteAjax()    {        $QDATA = GetEncryptQuery('eq');        $action = Get('action');        $return = 0;                switch ($action) {            default:            break;        }                echo $return;    }        public function OutputForm()    {        // ----- Javascript Functionality -----        $this->JavascriptDatepickerFunctionality(array('date'));                        $onclick 	        = ''; //"submitSalesOrderNumbers('list')";        $id 		        = 'btn_runchecks';        $name 		        = 'btn_runchecks';        $btn_submit         = MakeButton('positive', 'Run Checks', '', '', $id, $onclick, 'submit', $name);                       // ----- output the form        // ---- repopulate the form                $link   = Server('SCRIPT_URI');        $checked_show_queries = (Post('show_queries')) ? "checked" : '';        $checked_show_results = (Post('show_results')) ? "checked" : '';                        $output = '        <form action="'.$link.'" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        <div class="shadow" style="border:1px dashed blue; padding:5px; background-color:#efefef;">                                    <br class="formtitlebreak">            <div class="formtitle">Show Queries:</div>            <div class="forminfo">                <input id="show_queries" class="formitem" name="show_queries" value="1" type="checkbox" '.$checked_show_queries.'>            </div>                        <div style="clear:both;"></div>            <br class="formtitlebreak">            <div class="formtitle">Show Results:</div>            <div class="forminfo">                <input id="show_results" class="formitem" name="show_results" value="1" type="checkbox" '.$checked_show_results.'>            </div>                        <br class="formtitlebreak">            <div class="formtitle"></div>            <div class="forminfo">                '.$btn_submit.' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            </div>                        <div style="clear:both;"></div>                    </div>        </form>';        echo $output;    }    }  // -------------- END CLASS --------------