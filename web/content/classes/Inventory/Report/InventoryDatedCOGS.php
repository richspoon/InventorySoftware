<?phpclass Inventory_Report_InventoryDatedCOGS extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Category_Remaining_Title    = 'Other';        public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-12-10',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-01-14',            'Filename'      => $this->Classname,            'Version'       => '1.1',            'Description'   => 'Get the value of all inventory in the system as of a given date',            'Update Log'    => array(                '2012-12-10_1.0'    => "Module Created",                '2013-01-14_1.1'    => "Added code for new valuation method",            ),        );            } // -------------- END __construct --------------        public function Execute()    {        //$_GET['sales_order_list'] = "666, 1256";        //$this->EchoVar('_POST', $_POST);                AddStylesheet("/css/inventory.css??20121108-1");                echo "This report returns a complete inventory value report as of the given date. With no date - it will assume today's date.        <br /><br />";                        $date = Post('date');        $date = (!$date) ? date('Y-m-d') : $date;                $this->OutputForm();                //$this->EchoVar('date', $date);                //$bc_array   = $this->GetBarcodes();        //$output     = $this->CreateTableFromArray($bc_array);                        $array = $this->CreateInventoryReport($date);        $output = $this->ConvertArrayToTable($array);        echo "        <br /><br />         <div style='color:blue; font-weight:bold;'>            <div style='font-size:20px;'>Inventory Report</div>            <div style='font-size:14px;'>As Of: {$date}</div>        </div>        <br /><br />         <div id='_jsonTable'>        {$output}        </div>        ";    }        public function ExecuteAjax()    {        $QDATA = GetEncryptQuery('eq');        $action = Get('action');        $return = 0;                switch ($action) {            default:            break;        }                echo $return;    }        public function OutputForm()    {        // ----- Javascript Functionality -----        $this->JavascriptDatepickerFunctionality(array('date'));                        $onclick 	        = ''; //"submitSalesOrderNumbers('list')";        $id 		        = 'btn_barcode';        $name 		        = 'btn_barcode';        $btn_submit         = MakeButton('positive', 'Submit Request', '', '', $id, $onclick, 'submit', $name);                       // ----- output the form        // ---- repopulate the form                $link   = Server('SCRIPT_URI');        $value  = Post('date');        $checked = (Post('report')) ? "checked" : '';                $output = '        <form action="'.$link.'" method="post" accept-charset="utf-8" id="db_edit_form" name="db_edit_form">        <div class="shadow" style="border:1px dashed blue; padding:5px; background-color:#efefef;">            <br class="formtitlebreak">            <div class="formtitle">Date:</div>            <div class="forminfo">                <input autocomplete="off" alt="Search" id="date" class="formitem" name="date" size="20" maxlength="255" value="'.$value.'" type="text">            </div>                        <div style="clear:both;"></div>            <br class="formtitlebreak">            <div class="formtitle">COGS Report:</div>            <div class="forminfo">                <input id="report" class="formitem" name="report" value="1" type="checkbox" '.$checked.'>            </div>                        <div style="clear:both;"></div>            <br class="formtitlebreak">            <div class="formtitle"></div>            <div class="forminfo">                '.$btn_submit.' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            </div>                        <div style="clear:both;"></div>                    </div>        </form>';        echo $output;    }        public function CreateInventoryReport($DATE)    {        $data = array();                $barcode_limit = " AND barcode=10053";    //666        $barcode_limit = '';                // ----- get all the products        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_products',            'keys'  => '*',            'where' => "active=1 {$barcode_limit}",        ));        $this->EchoQuery();                        if ($records) {                        // ----- create list of all previously entered report categories            $categories_arr         = $this->SQL->GetFieldValues('inventory_products', 'report_category', "report_category != ''");                        // ----- create category total array and initialize it            $category_totals_arr = array();            foreach ($categories_arr as $id => $cat) {                $category_totals_arr[$cat] = 0;            }            $category_totals_arr[$this->Category_Remaining_Title] = 0;                                    //$this->EchoVar('categories_arr', $categories_arr);            //$this->EchoVar('category_totals_arr', $category_totals_arr);                                                            $total_COGS_Advanced    = 0;            $total_COGS_Simple      = 0;            $total_cogs             = 0;            $total_simple           = 0;            $count                  = 0;                        // ----- loop through each barcode item            foreach ($records as $record) {                                                #$OBJ_CalcVal        = new Inventory_InventoryAssemblyCalculateValue();                #$Obj_Explode        = new Inventory_AssemblyExplode();                #$Obj_Adjustment     = new Inventory_COGSAdjustment();                                                                               $count++;                $barcode                = $record['barcode'];                $quantity               = $this->InventoryItemQuantityAvailable($barcode, $DATE);                $quantity               = (!$quantity) ? 0 : $quantity;                                $simple_cost = 0;                //$simple_cost            = $this->InventorySimpleCost($barcode, $DATE);                $simple_cost_formatted  = money_format("%n", $simple_cost);                $simple_price_each      = ($quantity > 0) ? money_format("%n", ($simple_cost/$quantity)) : '-';                                                                                // ----- Get the build record used for this assembly                $Obj_ValueHandler                           = new Inventory_Valuation_ValueHandler();               // instantitate value class                $Obj_ValueHandler->Barcode                  = $barcode;                                       // pass in the barcode we want value for                $Obj_ValueHandler->Execute();                                                                       // execute the function to get value                $value_each                                 = $Obj_ValueHandler->Value_Each;                $value_array                                = $Obj_ValueHandler->Value_Array;                       // store the value array for report processing                unset($Obj_ValueHandler);                                                                           // memory clean-up                                /*                // ----- Create a value report based on the calculated value of the build record                $Obj_ValueReport                            = new Inventory_Valuation_ValueSummaryReport();         // instatiate reporting class                $Obj_ValueReport->Barcode                   = $barcode;                                       // set barcode we want report for                $Obj_ValueReport->Value_Array               = $value_array;                                         // set value arraw we want report for                $Obj_ValueReport->Execute();                                                                        // execute the function to make a report                $report                                     = $Obj_ValueReport->Report;                             // store the created report                unset($Obj_ValueReport);                                                                            // memory clean-up                */                                                                                                /*                                $OBJ_CalcVal->Barcode   = $barcode;                $COGS_Advanced          = 10; //$OBJ_CalcVal->Execute();                                                $is_assembly            = $Obj_Explode->CheckIfAssembly($barcode);                if ($is_assembly) {                    $Obj_Explode->Barcode   = $barcode;                    $Obj_Explode->Execute();                                                            $rec_z_extra = array();                    $rec_z      = $Obj_Explode->BOM;                    $c_simp     = 0;                    foreach ($rec_z as $bc => $qt) {                        $barcode_avg = $Obj_Adjustment->CalculateCogs_TotalAverage($bc);                        $c_simp += ($barcode_avg * $qt);                                                $sku = $this->GetInventoryRecordFromBarcode($bc);                        $sku = $sku['retailer_code'];                                                $rec_z_extra[] = array(                            'barcode'       => $bc,                            'sku'           => $sku,                            'quantity'      => $qt,                            'barcode_avg'   => $barcode_avg,                            'line_total'    => ($barcode_avg * $qt),                        );                    }                    //$this->EchoVar('rec_z', $rec_z);                                                                                                                        if ($barcode == 999920088) {                        $this->EchoVar('', '');                        $this->EchoVar('barcode', $barcode);                        $this->EchoVar('rec_z', $rec_z);                        $this->EchoVar('rec_z_extra', $rec_z_extra);                    }                                                            $COGS_Simple = ($quantity * $c_simp);                } else {                    $COGS_Simple = 0;                }                */                                // ----- calculate COGS                                $COGS_Advanced  = 0;                $COGS_Simple    = 0;                                $quantity               = (!$quantity) ? 0 : $quantity;                $cogs                   = ($value_each * $quantity);                                //$cogs                   = $this->CalculateInventoryValue($barcode, $DATE, false);                $cogs_formatted         = (is_string($cogs)) ? $cogs : money_format("%n", $cogs);                                                $total_cogs     += $cogs;                $total_simple   += $simple_cost;                                $total_COGS_Advanced    += $COGS_Advanced;                $total_COGS_Simple      += $COGS_Simple;                                $COGS_Advanced          = money_format("%n", $COGS_Advanced);                $COGS_Simple            = ($COGS_Simple == 0) ? '' : money_format("%n", $COGS_Simple);                                                                                                                $average_method_cost_total              = ($value_each * $quantity);                $average_method_cost_total_formatted    = money_format("%n", $average_method_cost_total);                                                                                //$this->EchoVar('category', $record['report_category']);                if ($record['report_category']) {                    $category_totals_arr[$record['report_category']] += $cogs;                } else {                    $category_totals_arr[$this->Category_Remaining_Title] += $cogs;                }                                $id                     = $this->GetInventoryIDFromBarcode($barcode);                $CLASS_EXECUTE_LINK     = '/office/class_execute';                $eq3                    = EncryptQuery("class=Inventory_InventoryProducts;v1={$id};");                $link3                  = $CLASS_EXECUTE_LINK . '?eq=' . $eq3 . "&action=inventoryreport&date={$DATE}";                $script3                = "top.parent.appformCreate('Window', '{$link3}', 'apps'); return false;";                $report                 = "<a href='#' class='row_viewline' title='COGS Report'   onclick=\"{$script3}; return false;\">?</a>";                                if (Post('report')) {                    $cogs_table = "                        <table width='100%'>                        <tr><td width='100%'>{$cogs_formatted}</td><td>{$report}</td></tr>                        </table>                    ";                } else {                    $cogs_table = $cogs_formatted;                }                                $data[$count] = array(                    'ID'                    => $count,                    'barcode'               => $barcode,                    'retailer_code'         => $record['retailer_code'],                    'description'           => $record['description'],                    'quantity'              => $quantity,                                        ////'value_each'            => $cogs_formatted,                    'average_method_total'  => $average_method_cost_total_formatted,                                        #'COGS'                  => $cogs_table,                                        #'COGS_Advanced'         => $COGS_Advanced,                    #'COGS_Simple'           => $COGS_Simple,                                        ////'simple_cost'           => $simple_cost_formatted,                    ////'simple_price_each'     => $simple_price_each,                );                                // ----- add the category status information                 foreach ($categories_arr as $id => $cat) {                    //$catstat                = ($record['report_category'] == $cat) ? $cogs_formatted : '';                    $catstat                = ($record['report_category'] == $cat) ? 'YES' : '';                    $data[$count][$cat]     = $catstat;                }                            } // end foreach                                    // ----- output the totals            $total_cogs             = money_format("%n", $total_cogs);            $total_simple           = money_format("%n", $total_simple);            $total_COGS_Advanced    = money_format("%n", $total_COGS_Advanced);            $total_COGS_Simple      = money_format("%n", $total_COGS_Simple);            $count++;                        $data[$count] = array(                'ID'                    => '',                'barcode'               => '',                'retailer_code'         => '',                'description'           => '',                'quantity'              => "<b>TOTAL:</b>",                'average_method_total'                  => "<b>{$total_cogs}</b>",                                //'COGS_Advanced'         => "<b>{$total_COGS_Advanced}</b>",                //'COGS_Simple'           => "<b>{$total_COGS_Simple}</b>",                                //'simple_cost'           => "<b>{$total_simple}</b>",                //'simple_price_each'     => '',            );                        // ----- add empty spaces to table             foreach ($categories_arr as $id => $cat) {                $data[$count][$cat] = '';            }                                                            // ----- output the category totals            $cat_total = 0;            foreach ($category_totals_arr as $cat => $total) {                $cat_total += $total;                $cat_total_formatted = money_format("%n", $total);                $count++;                $data[$count] = array(                    'ID'                    => '',                    'barcode'               => '',                    'retailer_code'         => '',                    'description'           => '',                    'quantity'              => "<b>{$cat}:</b>",                    'COGS'                  => "<b>{$cat_total_formatted}</b>",                    'simple_cost'           => "",                    'simple_price_each'     => '',                );                                // ----- add empty spaces to table                 foreach ($categories_arr as $id => $cat) {                    $data[$count][$cat] = '';                }            }                    }                return $data;    }        public function InventorySimpleCost($BARCODE, $DATE='')    {        $wheredate = ($DATE) ? " AND inventory_counts.date <= '$DATE' " : "";                $record = $this->SQL->GetRecord(Array(            'table' => 'inventory_products',            'keys'  => "                (inventory_products.part_cost *                 (SELECT (SUM(`qty_in`) - SUM(`qty_out`)) AS INVENTORY_PHYSICAL     FROM `inventory_counts`     WHERE `inventory_counts`.`barcode`=`inventory_products`.`barcode` AND `inventory_counts`.active=1 {$wheredate})                ) AS QUICK_VALUE            ",            'where' => "inventory_products.barcode='$BARCODE'",        ));        $this->EchoQuery();        return $record['QUICK_VALUE'];    }}  // -------------- END CLASS --------------