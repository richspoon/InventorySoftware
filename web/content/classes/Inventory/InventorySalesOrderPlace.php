<?phpclass Inventory_InventorySalesOrderPlace extends Inventory_InventoryBase{        // ----- EDITABLE VARIABLES -----    public $Show_Query                  = false;                        // (false) TRUE = show the database queries    public $Module_Offline              = false;                        // (false) TRUE = dispaly offline message to users           // ----- AUTOTABLE VARIABLES -----    public $Header_Row                  = "Barcode|APDM SKU|Description|QTY|Price (ea)|Price (total)|DEL";      // Header row for quick-add table    private $Table_Holder_DIV           = "autotable_holder";                                                   // defines hidden textarea that will hold the text array    private $Table_Display_DIV          = "autotable_table_display";                                            // defines the div that wraps the created table    private $Table_Delimiter            = '|';                                                                  // defines the delimiter for table columns            // ----- CUSTOMIZATION VARIABLES -----    private $Window_Width               = 820;                          // needs to be larger than Pipeline_Table_Width    private $Pipeline_Table_Width       = 800;                          // width of pipeline table area    private $Quickadd_Columns           = 3;                            // how many columns to put quick-add columns into 	private $Pipeline_Field_Start       = "pipeline_";                  // custom fieldname start for pipeline variables    private $Pipeline_Status_Get        = "pipeline_status";            // variable passed in _GET to set the pipeline status    private $Timezone_Database          = '';                           // timezone of database    private $Timezone_Local             = '';                           // timezone of user    private $Output_Format              = '';                           // output timestamp format    private $Allow_Empty_Sales_Orderd   = true;                         // (true) TRUE = allow a 0-line sales order (blank SO)        // ----- OTHER VARIABLES -----    public $Inventory_Sales_Orders_Id 	= 0;                            // will hold the SO ID that is editing	public $Locked                      = false;                        // will hold the locked status    public $Pipeline_Status             = '';                           // will hold the pipeline status passed into class    public $Quickadd_Exist_Arr          = array();                      // will hold what quickadd fields exist in form    public $Production_Status_Color     = array();                      // will hold array of colors to show for production status    public $Pipeline_Status_Color       = array();                      // will hold array of colors to show for pipeline status    public $Pipeline_Finance_Color      = array();                      // will hold array of colors to show for finance status    public $UID                         = 0;                            // will hold UID for this record    public $Show_Template_Swap_Name     = false;                        // (false) true = show the swap value name for template system        // ----- CHECKLIST VARIABLES -----    public $Checklist_Master            = "";                           // will hold the current product checklist master    private $Checklist_Field_Start      = "checklist_";                                                         // custom fieldname start for checklist variables    private $Checklist_Title_Template   = "<span class=\"formtitle\" style='font-weight:bold;'>@</span>";       // -------- Template for the title    private $Checklist_Info_Template    = "<span class=\"forminfo\">@</span></br>";                             // -------- templete for the input field    private $Checklist_Default_Section  = "CHK";        // =======================    private $Table_Products_Arr         = array();            // ----- NOTES VARIABLES -----    private $Existing_Notes_Count       = 0;                            // will hold the number of notes for this sales order    private $Notes_Width                = 800;                          // notes area - width     private $Notes_Font_Size            = 14;                           // notes area - font size    private $Note_Area_Wrapper_Id       = "note_add_record_wrapper";    // notes area - wrapper id        // ----- FILES VARIABLES -----    private $Existing_Files_Count       = 0;                            // will hold the number of files for this sales order    private $Files_Width                = 800;                          // files area - width     private $Files_Font_Size            = 13;                           // files area - font size    private $Files_Font_Size_2          = 10;                           // files area - font size (file details)    private $Files_Area_Wrapper_Id      = "file_add_record_wrapper";    // files area - wrapper id                /* ----------------------------------------------    Bugs - always thinks the pipeline has changed in the custom notes    ---------------------------------------------- */            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database        		$this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-12',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-09-16',            'Filename'      => $this->Classname,            'Version'       => '1.9',            'Description'   => 'Create a customer sales order - will draw down inventory',            'Update Log'    => Array(                '2012-11-30_1.1'    => "Added customer information field",                '2012-11-30_1.2'    => "Added new formatting and ability to calculate prices",				'2013-03-13_1.3'    => "Modified to support database change - track by id not SO#",                '2013-05-01_1.4.0'  => "New management for pipeline",                '2013-05-07_1.4.1'  => "Continued pipeline development",                '2013-05-11_1.4.2'  => "Continued pipeline development",                '2013-05-13_1.4.3'  => "Continued pipeline development",                '2013-05-21_1.4.4'  => "Minor bug fix",                '2013-05-21_1.4.5'  => "Access-level control and form changes",                '2013-06-12_1.4.6'  => "Minor bug fixes",                '2013-06-13_1.4.7'  => "Minor bug fixes",                '2013-06-26_1.4.8'  => "Added 'shipped date' to sort function",                '2013-06-29_1.4.9'  => "Changed language of module to 'order pipeline' plus misc other field changes",                '2013-07-08_1.4.10' => "spelling mistake fix",                '2013-07-15_1.4.11' => "Added PO Date field",                '2013-07-19_1.5.0'  => "Added order analysis capability",                '2013-07-23_1.6.0'  => "Continuing work on quick-add capability",                '2013-07-29_1.6.1'  => "Continuing work on quick-add capability",                '2013-07-30_1.7.0'  => "Significant structural changes to code for post-processing and checklist",                '2013-07-31_1.7.1'  => "Changed default fields",                '2013-08-09_1.7.2'  => "Support for showing hidden records",                '2013-08-28_1.8.0'  => "Support for module help in header.",                '2013-09-16_1.9'    => "Added order_price and order_price_notes",            ),        );                        /// ===== GET VALUES PASSED INTO CLASS CONSTRUCT =====        $this->SetParameters(func_get_args());        $this->Pipeline_Status                  = $this->GetParameter(0);        $this->Inventory_Sales_Orders_Id        = $this->GetParameter(1);                                $this->Table                = 'inventory_sales_orders';        $this->Index_Name           = 'inventory_sales_orders_id';        $this->Default_Sort         = 'priority_sort_order, inventory_sales_orders_id';      // field for default table sort                        $this->Field_Titles = array(            "{$this->Table}.inventory_sales_orders_id"              => 'Inventory Sales Orders Id',            "{$this->Table}.universal_id"                           => 'Universal ID',            "{$this->Table}.description"                            => 'Description',            "{$this->Table}.so_number"                              => 'SO Number',            "{$this->Table}.quote_number"                           => 'Quote Number',            "{$this->Table}.invoice_number"                         => 'Invoice Number',            "{$this->Table}.rma_number"                             => 'RMA Number',            "{$this->Table}.customer_po_number"                     => 'Customer PO Number',            "{$this->Table}.order_type"                             => 'Order Type',            "{$this->Table}.customer"                               => 'Customer',            "{$this->Table}.priority_sort_order"                    => 'Priority Sort Order',                        "{$this->Table}.order_price"                            => 'Order Price',            "{$this->Table}.order_price_notes"                      => 'Order Price Notes',                        'STATUS INFORMATION' => '|',            "{$this->Table}.demo_status"                            => 'Demo Status',            "{$this->Table}.rma_status"                             => 'RMA Status',            "{$this->Table}.pipeline_status"                        => 'Pipeline Status',            "{$this->Table}.production_status"                      => 'Production Status',            "{$this->Table}.finance_status"                         => 'Finance Status',            "{$this->Table}.status_post_production_complete"        => 'Post-production Complete',            "{$this->Table}.date_created"                           => 'Created Date',            "{$this->Table}.date_purchase_order"                    => 'Purchase Order Date',            "{$this->Table}.date_ship_delivery_request"             => 'Requested Delivery Date',            "{$this->Table}.date_ship_request"                      => 'Planned Ship Date',            "{$this->Table}.date_ship_actual"                       => 'Actual Ship Date',            "{$this->Table}.date_invoice_sent"                      => 'Invoice Sent Date',            "{$this->Table}.date_payment_received"                  => 'Payment Received Date',                        'OTHER DETAILS' => '|',            //"{$this->Table}.ref_document_url"                       => 'Ref URL',            //"{$this->Table}.ref_document_number"                    => 'Ref Number',            "{$this->Table}.active AS ORDER_ANALYSIS"               => 'Order Analysis',            "{$this->Table}.active AS SHIP_STATUS_SYSTEM"           => 'Ship Status (system)',                        'COMMISSION DETAILS' => '|',            "{$this->Table}.commission_paid"                        => 'Commission Paid',            "{$this->Table}.commission_date"                        => 'Commission Date',            "{$this->Table}.commission_amount"                      => 'Commission Amount',            "{$this->Table}.commission_cogs"                        => 'Commission COGS',            "{$this->Table}.commission_notes"                       => 'Commission Notes',                        '' => '|',            "{$this->Table}.active"                                 => 'Status',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',                        "{$this->Table}.pipeline_array AS SUMMARY_TABLE"        => 'Inventory Summary Table',        );                        $this->Join_Array = Array(            'inventory_counts'  => "LEFT OUTER JOIN `inventory_sales_order_lines` ON `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number`",        );                $this->Default_Fields   = 'universal_id, description, so_number, order_type, customer, pipeline_status, production_status, finance_status, date_created, date_ship_actual, date_purchase_order';        $this->Unique_Fields    = '';                $this->Default_Values   = array(            //'status'        => 'open',            'date_created'  => date('Y-m-d'),        );                                $this->Default_Where        = "";               // additional search conditions                if ($this->Pipeline_Status) {            $this->Default_Where    .= ($this->Default_Where) ? " AND pipeline_status='{$this->Pipeline_Status}'" : " pipeline_status='{$this->Pipeline_Status}'";        }                        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Edit_Links_Count     = '4';        $this->Use_Selection_Tab    = true;         // false = hide the search tab on the table        $this->Default_List_Size    = 100;          // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window                        // ----- TURN ON/OFF THE SUMMARY TABLE        if (Get('pipeline_show_summary_on'))    { $_SESSION['pipeline_show_summary'] = true; }        if (Get('pipeline_show_summary_off'))   { unset($_SESSION['pipeline_show_summary']); }        if (Session('pipeline_show_summary')) {            $this->Default_Fields .= ", SUMMARY_TABLE";            $this->Show_Table_Post_Process  = true;                     // turn on post-processing        }                        // ----- TURN ON/OFF HIDDEN RECORDS        if (Get('pipeline_show_hidden_records_on'))    { $_SESSION['pipeline_show_hidden_records'] = true; }        if (Get('pipeline_show_hidden_records_off'))   { unset($_SESSION['pipeline_show_hidden_records']); }        if (Session('pipeline_show_hidden_records')) {            $this->Field_Titles["{$this->Table}.status_hide_from_pipeline"] = 'Hide From Pipeline';            $this->Default_Where    .= ($this->Default_Where) ? " AND status_hide_from_pipeline=1" : "status_hide_from_pipeline=1";            $this->Default_Fields   .= ",status_hide_from_pipeline";        } else {            $this->Default_Where    .= ($this->Default_Where) ? " AND status_hide_from_pipeline=0" : "status_hide_from_pipeline=0";        }                                // ----- GET SOME NEEDED SETTINGS -----        $this->LoadClassSettings();        $this->TableHeading_ShowTitle = false;                        if (Get('z')) {            $this->Show_Template_Swap_Name = true;        }                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $this->ModuleOfflineMessage();                      // show module offline essage - if activated        $this->JavascriptConfirmDeleteAndOpenWindow();      // Javascript needed for deleting records from table with confirmation                        $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;            			case 'delete':                // ----- special delete case because a lot of different records need to be modified                $this->DeleteSalesOrder();            break;			            case 'list':            default:                // ----- display table list of records				$this->AddStyle();                $this->AddScript();                                // ----- create the top-of-page module help                echo $this->GetPageHeaderHelp($this->Classname);                                $this->ListTableHeader();                $this->ListTable(true);     // TRUE = bypass outputting header             break;                        case 'sort':                $this->AddStyleSort();                $this->AddScriptSort();                $this->ListTableHeader();                $this->GetAllSalesOrdersForSort();            break;                        case 'file_print':                                // ----- CREATE THE BASIC SWAP ARRAY -----                $record = $this->SQL->GetRecord(array(                    'table' => 'inventory_sales_orders',                    'keys'  => '*',                    'where' => "inventory_sales_orders_id={$this->Inventory_Sales_Orders_Id}",                ));                //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                                $temp_arr = array();                if ($record) {                    foreach ($record AS $key => $value) {                        $temp_arr[$key] = $value;                    }                } else {                    echo "ERROR :: Unable to load order.";                    exit();                }                                                // ----- CREATE THE order_lines PART OF SWAP ARRAY -----                //$this->Db_Want_Query = true;                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_sales_order_lines',                    'keys'  => 'inventory_sales_order_lines.*, inventory_products.description, inventory_products.manufacturer_code, inventory_products.retailer_code,                               (SELECT SUM(`quantity`) FROM `inventory_sales_order_sent` WHERE `inventory_sales_order_sent`.`inventory_sales_order_lines_id` = `inventory_sales_order_lines`.`inventory_sales_order_lines_id` AND `inventory_sales_order_sent`.active=1) AS QTY_PREV_SENT',                    'where' => "`inventory_sales_order_lines`.`inventory_sales_orders_id`='{$this->Inventory_Sales_Orders_Id}' AND (inventory_sales_order_lines.active=1 )",                    'joins' => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_sales_order_lines`.`barcode`",                ));                //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                                if ($records) {                                        $order_line_description     = "";                                   // initialize variable                    $order_line_qty             = "";                                   // initialize variable                    $order_line_price           = "";                                   // initialize variable                                        foreach ($records AS $record) {                        $barcode                    = $record['barcode'];                        $qty                        = $record['quantity'];                        $retailer_code              = $record['retailer_code'];                        $description                = $record['description'];                                                $order_line_description     .= "{$barcode} - {$retailer_code}\n{$description}\n ----------------------- \n\n";                        $order_line_qty             .= "{$qty}\n\n\n\n\n";                        $order_line_price           .= "---\n\n\n\n\n";                    }                                        $temp_arr['order_line_description']     = $order_line_description;                    $temp_arr['order_line_qty']             = $order_line_qty;                    $temp_arr['order_line_price']           = $order_line_price;                }                                //$this->EchoVar('order_lines', $temp_arr['order_lines']);                                                                                // ----- CREATE THE checklist PART OF SWAP ARRAY -----                                                                                                                $action = Get('filetype');                switch ($action) {                    case 'checklist':                        $template       = "template_checklist.docx";                        $filename       = "Order_{$this->Inventory_Sales_Orders_Id}_Checklist";                    break;                    case 'packinglist':                        $template       = "template_packinglist.docx";                        $filename       = "Order_{$this->Inventory_Sales_Orders_Id}_Packinglist";                    break;                    case 'invoice':                        $template       = "template_invoice.docx";                        $filename       = "Order_{$this->Inventory_Sales_Orders_Id}_Invoice";                    break;                    default:                        echo "ERROR :: No filetype.";                        exit();                    break;                }                                                $OBJ_Doc                        = new Inventory_PrintDocument();        // initialize object                $OBJ_Doc->Template_File         = $template;                            // template file to use                $OBJ_Doc->Filename              = $filename;                            // filename for saving                $OBJ_Doc->Swap_Array            = $temp_arr;                            // store the swaps                $OBJ_Doc->Execute();                                                    // execute file creation            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_products',                    'keys'  => 'description, retailer_code, barcode, status_retired',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%') AND active=1 AND status_hide_salesorder=0",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $retired = ($record['status_retired'] == 1) ? "[Retired] - " : "";                    $arr[] = array(                        'label'             => "{$record['barcode']} - {$retired}{$record['retailer_code']}",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                        case 'load_notes':                $this->Inventory_Sales_Orders_Id = Get('soid');                $return = $this->LoadNotesArea(true);            break;                        case 'load_files':                $this->Inventory_Sales_Orders_Id = Get('soid');                $return = $this->LoadFilesArea(true);            break;                        case '__nextuniversalid':                // get the next unique barcode in the system (starting with a 3)                                $loop = 0;                                do {                    $count  = $this->SQL->Count('inventory_sales_orders', 'active=0 OR active=1');                                        $max_length     = 5;                    // how long should barcode be                    $lead           = 10000;                // what should first lead character be                    $value          = $count + 1;           // value of main part of number                    $count_length   = strlen($value);       // get number length                                        // ----- add middle gap 0's                    if ($count_length < $max_length) {                        $value = str_pad($value, ($max_length - 1), 0, STR_PAD_LEFT);                    }                                        // ----- tack on the leading number                    $value  = $lead + $value;               // form up the final number                    $lead   = $lead + 10000;                // increment lead number (for next loop)                                                            if ($lead > 9) {                        $return = "ERROR :: Max universal_id Count";                    }                                        // ----- verify its unique                    $unique = $this->SQL->IsUnique('inventory_sales_orders', 'universal_id', $value);                                                                                                } while (!$unique);                                $return = $value;            break;                                                case 'sort':                                # CREATE THE ARRAY THE IS PROCESSABLE                $items = array();                $order = 1;                $parts = explode('item[]=', $_POST['order']);                foreach ($parts as $part) {                    if ($part) {                        $key = intonly($part);                        $items[$key] = $order;                        $order++;                    }                }                                # RUN ALL OF THE SORTS                $passed = true;                foreach($items as $id => $order) {                    $id     = intonly($id);                    $order  = intonly($order);                                        $result = $this->SQL->UpdateRecord(array(                        'table'         => $this->Table,                        'key_values'    => "priority_sort_order='{$order}'",                        'where'         => "inventory_sales_orders_id='{$id}'",                    ));                    $passed = (!$result) ? false : $passed;                }                $return = ($passed) ? 1 : 0;            break;                        case 'sales_order_assembly_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $isoaid = Get('isoaid');                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_sales_order_assembly_lines',                    'keys'  => 'barcode, quantity_out',                    'where' => "inventory_sales_order_assemblies_id='{$isoaid}' AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $arr[] = array(                        'barcode'       => $record['barcode'],                        'quantity'      => $record['quantity_out'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                                }                echo $return;    }                    private function AddScript()    {        # FUNCTION :: Add needed scripts for this class                $CLASS_EXECUTE_LINK         = '/office/class_execute';        $CLASS_EXECUTE_LINK_AJAX    = '/office/AJAX/class_execute';        $eq                         = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)        $link                       = $CLASS_EXECUTE_LINK_AJAX . '?eq=' . $eq;                        // ----- ADD SCRIPT TO ADD/EDIT NOTES AND WHITESHEETS -----        AddScript("            function callClass(eq, action) {                top.parent.appformCreate('Window', '{$CLASS_EXECUTE_LINK}?eq=' + eq + '&action=' + action, 'apps');            }                        function LoadNotesArea() {                // ----- FUNTION :: Load the notes for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_notes;soid={$this->Edit_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Note_Area_Wrapper_Id}').html(data);                });            }                        function LoadFilesArea() {                // ----- FUNTION :: Load the files for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_files;soid={$this->Edit_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Files_Area_Wrapper_Id}').html(data);                });            }                        function reloadScreen() {                window.location.reload();            }                        function getUniversalId(returnID)            {                // FUNCTION :: Get the next universal ID                                var url = 'http://webmanager.whhub.com{$link};action=nextuniversalid';                                // CALL THIS CLASS VIA AJAX TO GET BARCODE                $.get(url, '', function(data){                    $('#' + returnID).val(data);                });            }        ");    }    public function AddStyle()    {        AddStyle("            #quickadd_noexist_products_header {                font-size:14px;                font-weight:bold;                color:blue;                background-color:#ddd;                            }            #quickadd_noexist_products_subheader {                font-size:10px;                color:blue;                background-color:#ddd;                border-bottom:1px solid blue;            }            #quickadd_noexist_products_table td.theader {                background-color:#ddd;                font-size:12px;                font-weight:bold;            }            #quickadd_noexist_products_table td.tcontent {                border-bottom:1px solid #ddd;            }        ");    }        private function JavascriptAutocomplete()    {        $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_0').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=autocomplete_inventory_lookup',                minChars        : 0,    // how many characters tot ype before starting function call                selectFirst     : true,                autoFocus       : true,                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_0" ).val( ui.item.label );                    $( "#FORM_temp_1" ).val( ui.item.barcode );                 // store Barcode                    $( "#FORM_temp_2" ).val( ui.item.sku );                     // store APDM SKU                    $( "#FORM_temp_4" ).val( ui.item.description );             // store Description                         return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "<br>" + item.description + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        private function JavascriptCreateTable()    {        $this->ScriptJSONTableGeneric();                                // Add in the generic code held in the BaseClass        $this->ScriptCalculatePrice();                                  // Add in the generic code held in the BaseClass                $script = <<<SCRIPT                    // ===== USER DEFINED VARIABLES =====            var targetTextID        = "FORM_{$this->Table_Holder_DIV}";          // defines hidden textarea that will hold the text array            var targetTableDivID    = "{$this->Table_Display_DIV}";        // defines the div that wraps the created table            var requiredFieldArray  = ["FORM_temp_1","FORM_temp_5"];            var headerText          = "{$this->Header_Row}";                        var fieldQty            = "FORM_temp_5";                    // In form - field holding quantity            var priceEach           = "FORM_temp_6";                    // In form - field for price each            var priceTotal          = "FORM_temp_7";                    // In form - field for price total                                    function formTableRow() {                var delimiter       = "{$this->Table_Delimiter}";                var barcode         = $("#FORM_temp_1").val();                var sku             = $("#FORM_temp_2").val();                var description     = $("#FORM_temp_4").val();                var qty             = $("#FORM_temp_5").val();                var priceEach       = $("#FORM_temp_6").val();                var priceTotal      = $("#FORM_temp_7").val();                                // ----- create the string that will be added to table.                // ----- no starting or ending delimiter                // ----- action buttons will be added by other function                var output = barcode + delimiter + sku + delimiter + description + delimiter + qty + delimiter + priceEach + delimiter + priceTotal;                return output;            }                        function clearDataTextboxes() {                // -- clear the textboxes used to search on table data                $("#FORM_temp_0").val('');                $("#FORM_temp_1").val('');                $("#FORM_temp_2").val('');                $("#FORM_temp_4").val('');                $("#FORM_temp_5").val('');                $("#FORM_temp_6").val('');                $("#FORM_temp_7").val('');            }            SCRIPT;        AddScript($script);                AddScriptOnReady("            // -- call table creation function on load            // -- rebuilds table after coming back from form errors            var targetText          = $('#' + targetTextID);        // defines hidden textarea that will hold the text array            var targetTableDiv      = $('#' + targetTableDivID);    // defines the div that wraps the created table            createTableFromTextbox(targetText, targetTableDiv);        ");    }        public function GetLockedStatus($ID)    {        // ----- determine if sales order shold be locked        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_sales_order_sent",            'keys'      => "*",            'where'     => "inventory_sales_orders_id='{$ID}' AND active=1",        ));        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                $locked = ($records) ? true : false;                return $locked;    }        public function GetExistingRecords($ID)    {        // ----- get all records from the database        $so_number = $this->GetSalesOrderNumberFromID($this->Edit_Id);        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_sales_order_lines",            'keys'      => "inventory_sales_order_lines.*, inventory_products.description, inventory_products.retailer_code",            'where'     => "inventory_sales_orders_id='{$ID}' AND `inventory_sales_order_lines`.`active`=1",            'joins'     => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_sales_order_lines`.`barcode`",        ));        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                // ----- format records for output        $count = 1;        $table = $this->Header_Row . "\n";        foreach ($records as $record) {            $del            = ($this->Locked) ? "LOCKED" : "<div class='button_delete' id='row_1' onclick='tableDeleteRow(\" row_{$count} \")'>X</div>";            $price_total    = money_format("%n", $record['price_total']);            $price_each     = money_format("%n", ($record['price_total'] / $record['quantity']));                        $table .= "{$record['barcode']}|{$record['retailer_code']}|{$record['description']}|{$record['quantity']}|{$price_each}|{$price_total}|{$del}\n";            $count++;        }        		// ----- put formatted records into POST array and add javascript to add extra needed line break        $_POST["FORM_{$this->Table_Holder_DIV}"] = $table;        AddScriptOnReady('$("#FORM_autotable_holder").val($("#FORM_autotable_holder").val() + "\n");');    }                public function AddScript_TemplateSwap()    {        # FUNCTION :: Add information for creating swap template files                global $FormPrefix;        if ($this->Show_Template_Swap_Name) {            $script = <<<SCRIPT                        // ----- PERFORM THE BASIC SWAPS -----            $("[id^='{$FormPrefix}']").each(function() {                    var id          = this.id;                                          // get ID of field were looking at                var idDisplay   = '[[' + id.replace("{$FormPrefix}", "") + ']]';    // trim off the form prefix                //$("#" + id).before(idDisplay);                                    // display the ID                //$("#" + id).replaceWith('');                                      // hide the element                $("#" + id).replaceWith(idDisplay);                                 // hide the element and replace with ID            });                        // ----- PERFORM ADVANCED SWAPS -----            $("#temp_uid").replaceWith('[[universal_id]]');            $("#checklist_wrapper").replaceWith('[[checklist]]');            $("#solines_wrapper").replaceWith('[[order_lines]]');                        // ----- SHOW DOWN ARROW ON ALL AREAS -----            $("[class^='updown']").each(function() {                    var id          = this.id;                                          // get ID of field were looking at                $("#" + id).addClass('updown_down');                                // hide the element and replace with ID            });                        // ----- EXPAND ALL AREAS -----            $("[class^='menu_group']").each(function() {                    var id          = this.id;                                          // get ID of field were looking at                $("#" + id).css({ "display": ''});                                  // hide the element and replace with ID            });                        SCRIPT;        AddScriptOnReady($script);        }    }            public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen        $swap = $this->Show_Template_Swap_Name;             // set if we are performing template swap        $this->AddScript_TemplateSwap();                    // script for template swap information        $this->AddScript();                        // ----- if editing record - need to get the records from database and put on the page        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                        $this->Inventory_Sales_Orders_Id  	= $this->Edit_Id;            $so_number 							= $this->GetSalesOrderNumberFromID($this->Inventory_Sales_Orders_Id);            $this->Locked 						= $this->GetLockedStatus($so_number);            //$this->Locked = true;            $this->GetExistingRecords($this->Inventory_Sales_Orders_Id);                        if ($this->Locked) {                AddScriptOnReady("$('#FORM_so_number').val('{$so_number}');");                AddScriptOnReady("$('#temp_sonumber').html('{$so_number}');");                AddScriptOnReady("$('#FORM_temp_locked').val(1);");            }        }                // ----- put the universal ID on the screen        AddScriptOnReady("$('#temp_uid').html($('#FORM_universal_id').val());");                        // ----- Javascript Functionality -----        $this->JavascriptToggleFunctionality();             // Javascript for taggling show/hide a div area                if (!$swap) {            $this->JavascriptDisplaySessionMessage();       // Display alert messages            $this->JavascriptAutocomplete();                // Javascript for autocomplete functionality            $this->JavascriptCreateTable();                 // Javascript for creating table from array of data                        $this->JavascriptDatepickerFunctionality(array('FORM_date_created','FORM_commission_date','FORM_date_ship_request','FORM_date_ship_actual','FORM_date_ship_delivery_request','FORM_date_invoice_sent','FORM_date_purchase_order','FORM_date_payment_received'));            $this->JavascriptDisableFunctionality(array('FORM_temp_1','FORM_temp_2','FORM_temp_4'));            $this->JavascriptInputNoBorder(array('FORM_temp_1','FORM_temp_2','FORM_temp_4'));        }                $btn_add                    = MakeButton('positive', 'ADD', '', '', 'btn_add', "addDataToTable('FORM_temp_0')", 'button', 'btn_add');        $btn_clear                  = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');        $btn_unniversal_id          = MakeButton('positive', 'Get Next Universal ID', '', '', 'btn_uid', "getUniversalId('FORM_universal_id')", 'button', 'btn_uid');                        $pipeline_status_list       = $this->GetSetting('sales_order_pipeline_status');         // get values from inventory_settings table        $production_status_list     = $this->GetSetting('sales_order_production_status');       // get values from inventory_settings table        $finance_status_list        = $this->GetSetting('sales_order_finance_status');          // get values from inventory_settings table        $order_type_list            = $this->GetSetting('sales_order_type');                    // get values from inventory_settings table        $demo_status_list           = $this->GetSetting('sales_order_demo_status');             // get values from inventory_settings table        $rma_status_list            = $this->GetSetting('sales_order_rma_status');              // get values from inventory_settings table        $loan_status_list           = $this->GetSetting('sales_order_loan_status');             // get values from inventory_settings table        $rental_status_list         = $this->GetSetting('sales_order_rental_status');           // get values from inventory_settings table        $sale_status_list           = $this->GetSetting('sales_order_sale_status');             // get values from inventory_settings table                        // ----- CREATE THE QUICK-ADD AREA -----        $quickadd_records   = $this->GetRecordsForQuickAddTable_FromDatabase();                 // get quickadd fields from database        $quickadd           = $this->CreateQuickAddTable($quickadd_records, false);             // create the table        $quickadd_records   = $this->GetRecordsForQuickAddTable_FromRemaining();                // get quickadd fields from pipeline record        $quickadd          .= '</br>';        $quickadd          .= '<div id="quickadd_noexist_products_header">ADDITIONAL PIPELINE ITEMS</div>';        $quickadd          .= '<div id="quickadd_noexist_products_subheader">(exist in record but not active quick-add items)</div>';        $quickadd          .= $this->CreateQuickAddTable($quickadd_records, true);              // create the table        $this->PopulateQuickAddTable();                                                         // populate quickadd table with values                                // ----- CREATE THE CHECKLIST AREA -----        $checklist_arr = $this->CreateChecklistTable();                                         // create the table        $this->PopulateChecklistTable();                                                        // populate quickadd table with values                                // ----- GET NOTES FOR SALES ORDER (ONLY IF EDITING)        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {            $notes_area = $this->LoadNotesArea();           // get notes for sales order        } else {            // don't load notes area if we're submitting an add/edit record            $notes_area = "<div style='color:red;'>UNABLE TO ADD NOTES. CAN ONLY ADD NOTES WHEN EDITING AN EXISTING RECORD</div>";        }                                // ----- determine what boxes to show/hide -----        $show_quickadd              = ($this->Flags['quickadd'])    ? true : false;        $show_so_lines              = ($this->Flags['lines'])       ? true : false;        $show_commission            = ($this->Flags['commission'])  ? true : false;        $show_reference             = false; //($this->Flags['reference'])   ? true : false;        $show_notes                 = ($this->Flags['notes'])       ? true : false;        $show_so_information        = ($this->Flags['information']) ? true : false;        $show_contact_information   = ($this->Flags['information']) ? true : false;        $show_checklist             = ($this->Flags['checklist'])   ? true : false;        $access                     = $this->Flags['access'];                           // (admin | marketing | production)        $show_files                 = true;        $show_checklist             = true;                        // ----- GET FILES FOR SALES ORDER (ONLY IF EDITING)        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {            $this->UID          = Post('FORM_universal_id');            $files_area_upload  = ($show_files) ? $this->LoadFilesUploadArea() : '';            // get files for sales order            $files_area         = ($show_files) ? $this->LoadFilesArea() : '';                  // get files for sales order        } else {            // don't load notes area if we're submitting an add/edit record            $files_area_upload  = "";            $files_area         = "<div style='color:red;'>UNABLE TO ADD FILES. CAN ONLY ADD FILES WHEN EDITING AN EXISTING RECORD</div>";        }                                        $base_array = array(            "form|{$this->Action_Link}|post|db_edit_form",            'hidden|inventory_sales_orders_id',            'hidden|universal_id',            'hidden|temp_locked',            "code|<div style='font-size:16px; color:blue; padding:5px; background-color:#ccc;'>Universal ID: <span id='temp_uid'></span></div><br />",            "code|<div style='width:{$this->Window_Width}px; border:0px solid blue;'>&nbsp;</div>",         // ----- form width div -----            'code|<div style="display:none;">',                "textarea|Temp 3|{$this->Table_Holder_DIV}|N|60|4",            'code|</div>',        );                        if ($show_so_information) {            $temp_array = array(                // ========== GENERAL SALES ORDER DETAILS ==========                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">SALES ORDER INFORMATION <a class="toggle" href="#" id="menu_group_soi"><span class="updown updown_down">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:_none;" id="div_menu_group_soi">',                                                'text|Customer|customer|N|60|255',                        'text|Description|description|N|60|255',                                                "code|</br></br>",                        "code|<div style='padding-left:10px;'><table><tr>",                        "code|<td valign='top' style='padding-right:20px;'>",                                                        "code|<div style='border:1px solid black; padding:5px;'>",                            'text|Quote Number|quote_number|N|20|20',                            'text|Customer PO #|customer_po_number|N|20|20',                            'text|SO Number|so_number|N|20|20',                            'text|Invoice Number|invoice_number|N|20|20',                            'text|RMA Number|rma_number|N|20|20',                            'code|</div>',                                                        'code|</br></br>',                                                        "code|<div style='border:1px solid black; padding:5px;'>",                            "select|Order Type|order_type|N||{$order_type_list}",                            "select|Pipeline Status|pipeline_status|N||{$pipeline_status_list}",                            "select|Production Status|production_status|N||{$production_status_list}",                            "select|Finance Status|finance_status|N||{$finance_status_list}",                                                        "code|<div style='border-bottom:1px solid blue;'></div>",                            "select|Demo Status|demo_status|N||{$demo_status_list}",                            "select|RMA Status|rma_status|N||{$rma_status_list}",                            "select|Loan Status|loan_status|N||{$loan_status_list}",                            "select|Rental Status|rental_status|N||{$rental_status_list}",                            "select|Sale Status|sale_status|N||{$sale_status_list}",                            "code|<div style='border-bottom:1px solid blue;'></div>",                                                        'checkbox|Post Production Complete|status_post_production_complete||1|0',                            'checkbox|Hide From Pipeline|status_hide_from_pipeline||1|0',                            'code|</div>',                                                    "code|</td>",                        "code|<td valign='top' style='padding-right:20px;'>",                            "code|<div style='border:1px solid black; padding:5px;'>",                            'text|Created Date|date_created|N|20|20',                            'text|PO Date|date_purchase_order|N|20|20',                            'text|Delivery Request Date|date_ship_delivery_request|N|20|20',                            'code|</br>',                            'text|Planned Ship Date|date_ship_request|N|20|20',                            'text|Actual Ship Date|date_ship_actual|N|20|20',                            'code|</br>',                            'text|Invoice Sent Date|date_invoice_sent|N|20|20',                            "text|Payment Rec'd Date|date_payment_received|N|20|20",                            'code|</div>',                            'code|</br></br>',                                                        "code|<div style='border:1px solid black; padding:5px;'>",                            "titletemplate|{$this->title_template}",                            "infotemplate|{$this->info_template}",                            'textarea|Ship Tracking #s:|shipping_tracking_numbers|N|30|3',                            "titletemplate|STD",                            "infotemplate|STD",                            'code|</div>',                            'code|</br></br>',                                                        "code|<div style='border:1px solid black; padding:5px;'>",                            'text|Order Price|order_price|N|20|255',                            "titletemplate|{$this->title_template}",                            "infotemplate|{$this->info_template}",                            'textarea|Order Price Notes:|order_price_notes|N|30|3',                            "titletemplate|STD",                            "infotemplate|STD",                            'code|</div>',                                                                                "code|</td>",                        "code|</tr>",                        "code|</table></div>",                                            'code|</div>',                'code|</div>',                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        // ========== CONTACT INFORMATION ==========        if ($show_contact_information) {            $temp_array = array(                // ========== GENERAL SALES ORDER DETAILS ==========                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">CONTACT INFORMATION <a class="toggle" href="#" id="menu_group_ci"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_ci">',                                                "titletemplate|{$this->title_template}",                        "infotemplate|{$this->info_template}",                                                "code|<div style='padding-left:10px;'><table align='center'><tr>",                        "code|<td valign='top' style='padding-right:20px;'>",                            'textarea|User Contact|contact_user|N|30|6',                'code|<br />',                            'text|Email|contact_user_email|N|35|255',                   'code|<br />',                            'text|Phone|contact_user_phone|N|35|255',                   'code|<br />',                        "code|</td>",                        "code|<td valign='top' style='padding-right:20px;'>",                            'textarea|Billing Contact|contact_billing|N|30|6',          'code|<br />',                            'text|Email|contact_billing_email|N|35|255',                'code|<br />',                            'text|Phone|contact_billing_phone|N|35|255',                'code|<br />',                            'textarea|Billing Details|billing_details|N|30|3',                        "code|</td>",                        "code|<td valign='top'>",                            'textarea|Shipping Contact|contact_shipping|N|30|6',        'code|<br />',                            'text|Email|contact_shipping_email|N|35|255',               'code|<br />',                            'text|Phone|contact_shipping_phone|N|35|255',               'code|<br />',                            'textarea|Shipping Details|shipping_details|N|30|3',                        "code|</td>",                        "code|</tr>",                        "code|<tr>",                        "code|<td valign='top' style='padding-right:20px;' colspan='3'>",                                                    "code|</td>",                        "code|</tr>",                        "code|</table></div>",                                                "titletemplate|STD",                        "infotemplate|STD",                                            'code|</div>',                'code|</div>',                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        // ========== PIPELINE QUICK ADD ==========        if ($show_quickadd && !$swap) {            $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">PIPELINE QUICKADD <a class="toggle" href="#" id="menu_group_pipeline"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_pipeline">',                       "code|{$quickadd}",                    'code|</div>',                'code|</div>',                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);           }                        // ========== SALES ORDER LINES ==========        if ($show_so_lines) {                        $locked_message         = "</br><div class='shadow form_section_wrapper_error'>SALES ORDER IS LOCKED BECAUSE INVENTORY HAS ALREADY BEEN SENT. TO MAKE MODIFICATION YOU MUST DELETE THE SALES ORDER - WHICH WILL UNSEND ALL ITEMS.</div>";            $display_add_style      = ($this->Locked) ? "display:none;" : "";            $display_message_style  = ($this->Locked) ? "" : "display:none;";                        $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">SALES ORDER - SYSTEM <a class="toggle" href="#" id="menu_group_z"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_z">',                        'code|<div id="solines_wrapper">',                        "code|<div style='{$display_add_style}'>",                                                        "text|Search|temp_0|N|60|100",                            "text|Barcode|temp_1|N|60|100",                            "text|APDM SKU|temp_2|N|60|100",                            "text|Description|temp_4|N|60|100",                                                        "titletemplate|{$this->title_template}",                            "infotemplate|{$this->info_template}",                                                        "code|<div style='padding-left:120px;'><table><tr>",                            "code|<td>",                                "text|QTY|temp_5|N|10|100",                            "code|</td>",                            "code|<td>",                                "text|Price (ea)|temp_6|N|10|100",                            "code|</td>",                            "code|<td>",                                "text|Price (total)|temp_7|N|10|100",                            "code|</td>",                            "code|</tr></table></div>",                                                        "titletemplate|STD",                            "infotemplate|STD",                                                        "info||{$btn_add} &nbsp;&nbsp;&nbsp; {$btn_clear}",                                                    "code|</div>",                                                                        "code|<div style='{$display_message_style}'>",                            "code|{$locked_message}",                        "code|</div>",                                                                        'code|<br /><br />',                        "code|<div id='{$this->Table_Display_DIV}'></div>",                        'code|<br /><br />',                        "code|</div>",                    "code|</div>",                "code|</div>",                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);           }                        // ========== SALES COMMISSION ==========        if ($show_commission && !$swap) {            $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">SALES COMMISSION <a class="toggle" href="#" id="menu_group_a"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_a">',                        'checkbox|Paid|commission_paid||1|0',                        'text|Date Paid|commission_date|N|20|20',                        'text|Amount|commission_amount|N|20|20',                        'text|COGS Calculated|commission_cogs|N|20|20',                        'textarea|Notes|commission_notes|N|60|2',                    'code|</div>',                'code|</div>',                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);           }                        // ========== REFERENCE INFORMATION ==========        if ($show_reference && !$swap) {            $FORM_ref_document_url      = Post('FORM_ref_document_url');            $FORM_ref_document_number   = Post('FORM_ref_document_number');                        $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">REFERENCE INFORMATION <a class="toggle" href="#" id="menu_group_b"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_b">',                        "info|Document URL|{$FORM_ref_document_url}",                        "info|Document #|{$FORM_ref_document_number}",                    'code|</div>',                'code|</div>',                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);           }                        // ========== NOTES ==========        if ($show_notes && !$swap) {            $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">NOTES ('.$this->Existing_Notes_Count.') <a class="toggle" href="#" id="menu_group_notes"><span class="updown updown_down">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:_none;" id="div_menu_group_notes">',                                                "code|<div style='padding:10px;' id='{$this->Note_Area_Wrapper_Id}'>",                        "code|{$notes_area}",                        "code|</div>",                                            'code|</div>',                'code|</div>',                'code|</br></br>',            );            $base_array = array_merge ($base_array, $temp_array);           }                        // ========== FILES ==========        if ($show_files && !$swap) {            $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">FILES ('.$this->Existing_Files_Count.') <a class="toggle" href="#" id="menu_group_files"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_files">',                                                "code|{$files_area_upload}",                                                "code|<div style='padding:10px;' id='{$this->Files_Area_Wrapper_Id}'>",                        "code|{$files_area}",                        "code|</div>",                                            'code|</div>',                'code|</div>',                'code|</br></br>',            );            $base_array = array_merge ($base_array, $temp_array);           }                        // ========== CHECKLIST ==========        if ($show_checklist) {            $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">CHECKLIST <a class="toggle" href="#" id="menu_group_checklist"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_checklist">',                    'code|<div id="checklist_wrapper">',            );            $base_array = array_merge ($base_array, $temp_array);                                    $temp_array = $checklist_arr;            $base_array = array_merge ($base_array, $temp_array);                                    $temp_array = array(                    'code|</div>',                    'code|</div>',                'code|</div>',                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);        }                        // ========== FILE OUTPUT ==========        $show_fileoutput = true; //Get('x');        if ($show_fileoutput) {                        global $CLASS_EXECUTE_LINK;                        $eq                     = EncryptQuery("class={$this->Classname};v2={$this->Inventory_Sales_Orders_Id};");                        $link_checklist         = $CLASS_EXECUTE_LINK . '?eq=' . $eq . '&action=file_print&filetype=checklist';            $script_checklist       = "top.parent.appformCreate('Window', '{$link_checklist}', 'apps'); return false;";                        $link_packinglist       = $CLASS_EXECUTE_LINK . '?eq=' . $eq . '&action=file_print&filetype=packinglist';            $script_packinglist     = "top.parent.appformCreate('Window', '{$link_packinglist}', 'apps'); return false;";                        $link_invoice           = $CLASS_EXECUTE_LINK . '?eq=' . $eq . '&action=file_print&filetype=invoice';            $script_invoice         = "top.parent.appformCreate('Window', '{$link_invoice}', 'apps'); return false;";                                    $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">FILES (DEV ONLY) <a class="toggle" href="#" id="menu_group_fileoutput"><span class="updown updown_down">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:_none;" id="div_menu_group_fileoutput">',                    'code|<div id="fileoutput_wrapper">',                                                "code|<a href='#' onclick=\"{$script_packinglist}\">[Packing List]</a>",                        "code|<a href='#' onclick=\"{$script_invoice}\">[Invoice]</a>",                        "code|<a href='#' onclick=\"{$script_checklist}\">[Checklist]</a>",                                            'code|</div>',                    'code|</div>',                'code|</div>',                'code|<br /><br />',                    );            $base_array = array_merge ($base_array, $temp_array);                    }                        if ($swap) {            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;            $this->Form_Data_Array_Edit = $base_array;        } else {            if ($this->Action == 'ADD') {                $base_array[] = "submit|Add Record|$this->Add_Submit_Name";                $base_array[] = 'endform';                $this->Form_Data_Array_Add = $base_array;            } else {                //$base_array[] = 'checkbox|Active|active||1|0';                $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";                $base_array[] = 'endform';                $this->Form_Data_Array_Edit = $base_array;            }        }    }        public function PostProcessFormValues($FormArray)     {        # FUNCTION :: Process the form array to save information to database                $lines_array        	        = array();                                                                                          // will hold lines being added        $passed                 	    = true;                                                                                             // holds check-passed status        $adding                 	    = ($this->Action == 'ADD') ? true : false;                                                          // hold edit status        $locked                 	    = (isset($FormArray['temp_locked']) && ($FormArray['temp_locked'] == 1)) ? true : false;            // locked status        $inventory_sales_orders_id      = $FormArray['inventory_sales_orders_id'];                                                          // record ID                $lines_array                    = $this->FormArray_ConvertTableToLinesArray($FormArray);                                            // convert the table to a lines array        $pipeline_arr                   = $this->FormArray_ProcessPipelineArray();                                                          // convert the table to a lines array        $checklist_arr                  = $this->FormArray_ProcessChecklistArray($FormArray);                                               // convert the table to a lines array                $FormArray['pipeline_array']    = serialize($pipeline_arr);                                                                         // store the pipeline array for database        $FormArray['checklist_array']   = serialize($checklist_arr);                                                                        // store the checklist array for database        $FormArray['universal_id']      = ($FormArray['universal_id'] == '') ? $this->MakeUniversalId() : $FormArray['universal_id'];       // create a universal ID                $special_notes                  = $this->FormArray_ProcessRecordChangedNotes($FormArray, $inventory_sales_orders_id);               // get notes about record changing        $FormArray                      = $this->FormArray_CleanUp($FormArray);                                                             // clean up the excess form array                unset($pipeline_arr);                                                                                                               // memory clean-up        unset($checklist_arr);                                                                                                              // memory clean-up                                        // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed) {                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                                                // ------ add the 'RECORD CHANGED' note            if ($special_notes != '') {                $db_record = array(                    'inventory_sales_orders_id' => $inventory_sales_orders_id,                    'user'                      => "{$_SESSION['USER_LOGIN']['LOGIN_RECORD']['first_name']} {$_SESSION['USER_LOGIN']['LOGIN_RECORD']['last_name']}",                    'date'                      => date('Y-m-d'),                    'note'                      => $special_notes,                );                                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_sales_order_notes',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $passed = (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);            }                                                                        # ----- Create the Sales Order entry            $db_record = $FormArray;            if ($adding) {                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_sales_orders',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $inventory_sales_orders_id   	= $this->SQL->Last_Insert_Id;                $passed     					= (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                            } else {                $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_sales_orders',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}' AND `active`=1",                ));                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                $passed = (!$result) ? false : $passed;            }                                    // ----- if locked - the only thing we can do is modify the form            if (!$locked) {                            # ----- Delete old Sales Order LINES entry                // ---- currently this is the fastest way to deal with editing lines - because we don't need                //      to track the IDs in the on-screen table. Just deactivate lines and let them be added again.                if (!$adding) {                    $db_record = array(                        'active'            => 0,                    );                                        $result = $this->SQL->UpdateRecord(array(                        'table'         => 'inventory_sales_order_lines',                        'key_values'    => $this->SQL->KeyValues($db_record),                        'where'         => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}' AND `active`=1",                    ));                    $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                    $passed = (!$result) ? false : $passed;                }                                                # ----- Create the Sales Order LINES entry                foreach ($lines_array as $line) {                    $db_record = array(                        'inventory_sales_orders_id'     => $inventory_sales_orders_id,                        'barcode'           			=> $line['barcode'],                        'quantity'          			=> $line['quantity'],                        'price_total'       			=> $line['price_total']                    );                                        $result = $this->SQL->AddRecord(array(                        'table'     => 'inventory_sales_order_lines',                        'keys'      => $this->SQL->Keys($db_record),                        'values'    => $this->SQL->Values($db_record),                    ));                    $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                    $passed = (!$result) ? false : $passed;                }                        } // end locked check                                    //$this->Error .= "<br />PURPOSFUL HALTING ERROR";            //exit();                                    # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                                // save the database transactions to database                                // ----- trigger a sucess message                if ($adding) {                    $this->Bypass_Form_Processing = true;                                       // stop the form from being processed by the rest of base class                    $this->SuccessfulAddRecord();                                               // close the window and output sucess message                } else {                    $this->Bypass_Form_Processing = true;                                       // stop the form from being processed by the rest of base class                    $this->SuccessfulEditRecord($this->Idx, $this->Idx, $this->Index_Name);     // close the window and output sucess message                }                            } else {                $this->SQL->Rollback();                                                         // remove all the database transactions from the database                $this->Error .= "UNABLE TO PROCESS DATABASE TRANSACTIONS";                return $FormArray;            }                    } else {                        // ----- return form array to process any legitimate errors            return $FormArray;        }    }                            private function FormArray_CleanUp($FormArray)    {        $field_kickout_string           = 'temp_';        $checklist_kickout_string       = $this->Checklist_Field_Start;         // initialize variable                // ----- remove any temp fields from the array so they don't get processed        // ----- NOTE :: WASTED STEP IF WE BLOW OUT ARRAY AT END OF FUNCTION        foreach ($FormArray as $field => $value) {                        $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }                        $pos = strpos($field, $checklist_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }                    }                unset($FormArray["{$this->Table_Holder_DIV}"]);           // remove the table holder            return $FormArray;    }        private function FormArray_ConvertTableToLinesArray($FormArray)    {                $lines_array = array();                                      // initialize variable                // ----- get the main table holder value to process        $table = $FormArray[$this->Table_Holder_DIV];        if ($table) {            $lines          = explode("\n", $table);            $header_row     = true;                        foreach ($lines as $key => $line) {                if ($line) {                   if ($header_row == false) {                        $parts          = explode($this->Table_Delimiter, $line);                        $barcode        = trim($parts[0]);                        $sku            = trim($parts[1]);                        $description    = trim($parts[2]);                        $quantity       = trim($parts[3]);                        $price_each     = trim($parts[4]);                        $price_total    = trim($parts[5]);                        $price          = ($price_total != '') ? $price_total : ($quantity * $price_each);                                                // ----- check that inventory still exists                        $exist = $this->StatusInventoryItemExist($barcode);                                                if (!$exist) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        } else {                                                        $lines_array[] = array(                                'inventory_sales_orders_id' => '',      // will get later                                'barcode'                   => $barcode,                                'quantity'                  => $quantity,                                'price_total'               => $price,                            );                                                    }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                return $lines_array;    }        private function FormArray_ProcessPipelineArray()     {                $field_start    = $this->Pipeline_Field_Start;          // initialize variable        $pipeline_arr   = array();                              // initialize variable                foreach ($_POST as $field => $value) {            //echo "</br>$field => $value";            $pos = strpos($field, $field_start);            if ($pos !== false) {                                $parts      = explode("_", $field);                $type       = $parts[1];                $barcode    = $parts[2];                                switch ($type) {                    case 'qty':                        $pipeline_arr[$barcode]['quantity'] = $value;                    break;                    case 'price':                        $pipeline_arr[$barcode]['price'] = $value;                    break;                }            }        }                // ----- remove blank entries         foreach ($pipeline_arr as $barcode => $arr) {            if ($arr['quantity'] == '' && $arr['price'] == '') {                unset($pipeline_arr[$barcode]);            }        }                return $pipeline_arr;    }        private function FormArray_ProcessChecklistArray($FormArray)     {                $field_start    = $this->Checklist_Field_Start;         // initialize variable        $checklist_arr  = array();                              // initialize variable                foreach ($FormArray as $field => $value) {            $pos = strpos($field, $field_start);            if ($pos !== false) {                if ($value == 1) {                              // only store checked checklist items                    $checklist_arr[] = $field;                }            }        }                return $checklist_arr;    }        private function FormArray_ProcessRecordChangedNotes($FormArray, $inventory_sales_orders_id)    {                $output                 = '';        $process_fields_arr     = array('pipeline_status', 'production_status', 'finance_status', 'order_type', 'demo_status', 'rma_status', 'loan_status', 'rental_status', 'sale_status');                        // ----- get existing values to determine if a change has been made        $record = $this->SQL->GetRecord(array(            'table' => $this->Table,            'keys'  => "*",            'where' => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}' AND `active`=1",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                // ----- create the note (basic changes)        foreach ($process_fields_arr AS $key) {            $title      = ucwords(str_replace('_', ' ', $key));            $rec        = (isset($record[$key])) ? $record[$key] : '';            $form       = (isset($FormArray[$key])) ? $FormArray[$key] : '';            $output    .= ($rec != $form) ? "{$title} changed from <b>{$rec}</b> to <b>{$form}</b>.</br>" : "";                }                // ----- create the note (advanced changes)        $output .= ($record['pipeline_array'] != $FormArray['pipeline_array'])                           ? "Quick Add products changed.</br>" : "";        $output .= ($record['date_ship_delivery_request'] != $FormArray['date_ship_delivery_request'])   ? "Requested ship delivery date changed.</br>" : "";        $output .= ($record['date_ship_request'] != $FormArray['date_ship_request'])                     ? "Planned ship date changed.</br>" : "";        $output .= ($record['date_invoice_sent'] != $FormArray['date_invoice_sent'])                     ? "Invoice Sent date changed.</br>" : "";            return $output;    }                                	public function DeleteSalesOrder()    {        /* ===== P-CODE =================                * -- Don't allow if inventory has been received - force person to un-receive inventory first                1. Delete the master record        2. Delete all the SO lines                ============================== */                if ($this->Inventory_Sales_Orders_Id) {                        $passed         = true; // initialize variable            $status         = $this->StatusPurchaseOrder(0, $this->Inventory_Sales_Orders_Id);            			// ----- Make sure the PO is totally open. If not - don't delete            if ($status != 'open') {                echo "Purchase order has recevied inventory - unreceive and try again.";                exit();            }                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                        // ----- de-activate the main record            $db_record  = array('active' => 0);            $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_sales_orders',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_sales_orders_id`='{$this->Inventory_Sales_Orders_Id}'",                ));            $passed     = (!$result) ? false : $passed;            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        // ----- de-activate the sub-line records            $db_record  = array('active' => 0);            $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_sales_order_lines',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_sales_orders_id`='{$this->Inventory_Sales_Orders_Id}'",                ));            $passed     = (!$result) ? false : $passed;            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                echo "<br /><br /><h2>SUCCESSFULLY DELETED - REFRESH PARENT TABLE</h2>";            }                    } else {            echo "NO Inventory_Sales_Orders_Id passed in.";        }    }	    public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/class_execute';                				$eq_fulfill             = EncryptQuery("class=Inventory_InventorySalesOrderFulfill;v1={$id};");                $link_fulfill           = $CLASS_EXECUTE_LINK . '?eq=' . $eq_fulfill;                $script_fulfill         = "top.parent.appformCreate('Window', '{$link_fulfill}', 'apps'); return false;";                                $eq_cogs                = EncryptQuery("class=Inventory_Valuation_SalesOrderCalculateCOGS;v1={$id};");                $link_cogs              = $CLASS_EXECUTE_LINK . '?eq=' . $eq_cogs;                $script_cogs            = "top.parent.appformCreate('Window', '{$link_cogs}', 'apps'); return false;";                				$eq_delete              = EncryptQuery("class=Inventory_InventorySalesOrderPlace;v2={$id};PARENT_DIALOGID={$this->Dialogid_Id}");                $link_delete            = $CLASS_EXECUTE_LINK . '?eq=' . $eq_delete . '&action=delete';                $script_delete          = "ConfirmDeleteAndOpenWindow('{$link_delete}'); return false;";                                $eq_files               = EncryptQuery("class=Inventory_Uploadify_UploadFile;v1=salesorder;v2=0;v3={$id};PARENT_DIALOGID={$this->Dialogid_Id}");                $link_files             = $CLASS_EXECUTE_LINK . '?eq=' . $eq_files . '&action=';                $script_files           = "top.parent.appformCreate('Window', '{$link_files}', 'apps'); return false;";                                $this->Flags['files'] = 'true';                				// ----- determine which options to show to user                //$col_view       = ($this->Flags['view'] == 'false')   ? ''    : "<a href=`#` class=`row_view`       title=`View`            onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                				$col_edit       = ($this->Flags['edit'] == 'false')   ? ''    : "<a href=`#` class=`row_edit`       title=`Edit`            onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_receive    = ($this->Flags['print'] == 'false')  ? ''    : "<a href=`#` class=`row_receive`    title=`Ship Items`  	onclick=`{$script_fulfill}; return false;`></a>";                $col_cogs     	= ($this->Flags['cogs'] == 'false')   ? ''    : "<a href=`#` class=`row_dollarsign` title=`Calculate COGS`  onclick=`{$script_cogs}`></a>";                $col_delete     = ($this->Flags['delete'] == 'false') ? ''    : "<a href=`#` class=`row_delete`     title=`Delete`          onclick=`{$script_delete}`></a>";                $col_files      = ($this->Flags['files'] == 'false')  ? ''    : "<a href=`#` class=`row_files`      title=`Upload Files`    onclick=`{$script_files}`></a>";                                //<td align=`center`>{$col_files}</td>                                    // ----- output the options                $this->Edit_Links_Count = '5';                $this->Edit_Links = qqn("                    <td align=`center`>{$col_edit}</td>					<td align=`center`>{$col_receive}</td>                    <td align=`center`>{$col_cogs}</td>                    <td align=`center`>{$col_delete}</td>                    ");            break;                        case 'COGS':                $Obj_Cogs                               = new Inventory_Valuation_SalesOrderCalculateCOGS();                $Obj_Cogs->Method                       = 'average';                $Obj_Cogs->Inventory_Sales_Orders_Id    = $id;                $Obj_Cogs->Execute(true);                           // true means to return the output instead of echo it                                $val_sent       = money_format("%n", $Obj_Cogs->COGS_Calculated_Sent_Inventory);                $val_unsent     = money_format("%n", $Obj_Cogs->COGS_Calculated_Unsent_Inventory);                $val_method     = $Obj_Cogs->Pricing_Method_Used;                                #$val_sent = 'S';                #$val_unsent = 'US';                #$val_method = 'M';                                $value          = "<b>Sent:</b> {$val_sent}</br><b>Unsent:</b> {$val_unsent}</br><b>Method:</b> {$val_method}";                                unset($Obj_Cogs);    // memory cleanup            break;                        case 'order_price':                $value       = money_format("%n", $value);            break;                        case 'SHIP_STATUS_SYSTEM':                // convert the "ACTIVE" field to a status                $value = $this->StatusSalesOrder(0, $id);                                switch ($value) {                    case 'open':                        $value      = "NOT Shipped";                        $td_options = "style=\"background-color:#ffcccc;\"";                                                //$td_options = "style=\"background-color:#b2ffb2;\"";                    break;                    case 'partial':                        $value      = "Partially Shipped";                        $td_options = "style=\"background-color:#ffcccc;\"";                                                //$td_options = "style=\"background-color:#ffff80;\"";                    break;                    case 'closed':                        $value      = "Shipped";                                            break;                }                               break;                        case 'date_ship_delivery_request':            case 'date_purchase_order':            case 'date_ship_actual':            case 'date_ship_request':                $value = ($value == '0000-00-00') ? '' : $value;            break;                        case 'ORDER_ANALYSIS':                // ----- analyze order for various information                $record = $this->SQL->GetRecord(array(                    'table' => $this->Table,                    'keys'  => 'date_created, date_purchase_order, date_ship_actual, date_invoice_sent, date_payment_received',                    'where' => "{$this->Index_Name} = {$id}",                ));                                if ($record) {                                        $diff_1 = '-';          // initialize variable                    $diff_2 = '-';          // initialize variable                    $diff_3 = '-';          // initialize variable                    $diff_4 = '-';          // initialize variable                                        $dc     = ($record['date_created'] != '' && $record['date_created'] != '0000-00-00')                    ? $record['date_created']           : '0000-00-00';                    $dpo    = ($record['date_purchase_order'] != '' && $record['date_purchase_order'] != '0000-00-00')      ? $record['date_purchase_order']    : '0000-00-00';                    $dsa    = ($record['date_ship_actual'] != '' && $record['date_ship_actual'] != '0000-00-00')            ? $record['date_ship_actual']       : '0000-00-00';                    $dis    = ($record['date_invoice_sent'] != '' && $record['date_invoice_sent'] != '0000-00-00')          ? $record['date_invoice_sent']      : '0000-00-00';                    $dpr    = ($record['date_payment_received'] != '' && $record['date_payment_received'] != '0000-00-00')  ? $record['date_payment_received']  : '0000-00-00';                                        $o_dc   = new DateTime($dc);        // inititalize DateTime object with date                    $o_dpo  = new DateTime($dpo);       // inititalize DateTime object with date                    $o_dsa  = new DateTime($dsa);       // inititalize DateTime object with date                    $o_dis  = new DateTime($dis);       // inititalize DateTime object with date                    $o_dpr  = new DateTime($dpr);       // inititalize DateTime object with date                                        // ----- calculate tie differences                    if ($dc != '0000-00-00' && $dpo != '0000-00-00') {                        $interval_1     = $o_dc->diff($o_dpo);                        $diff_1         = $interval_1->days . 'd';                    }                    if ($dpo != '0000-00-00' && $dsa != '0000-00-00') {                        $extra = "$dpo -- $dsa";                        $interval_2     = $o_dpo->diff($o_dsa);                        $diff_2         = $interval_2->days . 'd';                    }                    if ($dsa != '0000-00-00' && $dis != '0000-00-00') {                        $interval_3     = $o_dsa->diff($o_dis);                        $diff_3         = $interval_3->days . 'd';                    }                    if ($dis != '0000-00-00' && $dpr != '0000-00-00') {                        $interval_4     = $o_dis->diff($o_dpr);                        $diff_4         = $interval_4->days . 'd';                    }                                        $value = "                        <div style='min-width:180px; border:0px solid red;'>                        <table width='100%' border='0' cellpadding='0' cellspacing='0'>                        <tr><td align='right'><b>Created >> PO:</b></td>        <td >{$diff_1}</td></tr>                        <tr><td align='right'><b>PO >> Ship:</b></td>           <td >{$diff_2}</td></tr>                        <tr><td align='right'><b>Ship >> Invoice:</b></td>      <td >{$diff_3}</td></tr>                        <tr><td align='right'><b>Invoice >> Payment:</b></td>   <td >{$diff_4}</td></tr>                        </table>                        </div>";                } else {                    $value = 'n/a';                }            break;                        case 'production_status':                $color = (isset($this->Production_Status_Color[$value])) ? $this->Production_Status_Color[$value] : '';                $td_options = "style=\"background-color:{$color};\"";            break;                        case 'pipeline_status':                $color = (isset($this->Pipeline_Status_Color[$value])) ? $this->Pipeline_Status_Color[$value] : '';                $td_options = "style=\"background-color:{$color};\"";            break;                        case 'finance_status':                $color = (isset($this->Pipeline_Finance_Color[$value])) ? $this->Pipeline_Finance_Color[$value] : '';                $td_options = "style=\"background-color:{$color};\"";            break;                                    case 'SUMMARY_TABLE':                $this->Table_Products_Arr[$id]  = unserialize($value);      // store the inventory information                $this->Show_Table_Post_Process  = true;                     // turn on post-processing                $value                          = '';                       // output blank content            break;                        case 'status_hide_from_pipeline':                if ($value == 1) {                    $value      = "YES";                    $td_options = "style=\"background-color:yellow;\"";                } else {                    $value = "no";                }            break;                    }    }            private function GetRecordsForQuickAddTable_FromDatabase()    {        // ----- CREATE QUICK-ADD AREA        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_products',            'keys'  => 'barcode, retailer_code, salesorder_quickadd_title',            'where' => "status_show_salesorder_quickadd=1 AND active=1",            'order' => "salesorder_quickadd_title ASC",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);        //$this->EchoVar('records', $records);                return $records;    }        private function GetRecordsForQuickAddTable_FromRemaining()    {        # FUNCTION :: Create array of records that are in the database pipeline array but        #             aren't currently output to the screen (because set to not show)                $records = array();                // ----- Load values into the quick-add table        if (isset($_POST['FORM_pipeline_array'])) {                        // LOAD FROM DATABASE RECORD -----                        $pipeline_arr = unserialize($_POST['FORM_pipeline_array']);            if ($pipeline_arr != '') {                foreach ($pipeline_arr as $barcode => $arr) {                                        // ----- determine if the field in on the page                    if (!isset($this->Quickadd_Exist_Arr[$barcode])) {                                                $record = $this->SQL->GetRecord(array(                            'table' => 'inventory_products',                            'keys'  => 'retailer_code, salesorder_quickadd_title',                            'where' => "`barcode`='{$barcode}'",                        ));                                                $retailer_code                      = (isset($record['retailer_code'])) ? $record['retailer_code'] : '';                        $salesorder_quickadd_title          = (isset($record['salesorder_quickadd_title'])) ? $record['salesorder_quickadd_title'] : '';                        $title                              = ($salesorder_quickadd_title) ? $salesorder_quickadd_title : $retailer_code;                                                $arr['barcode']                     = $barcode;                        //$arr['retailer_code']               = $this->GetInventoryItemRetailerCodeFromBarcode($barcode);                        $arr['salesorder_quickadd_title']   = $title;                        $records[$barcode]                  = $arr;                                            }                }            }        }                return $records;    }        private function CreateQuickAddTable($records, $shorttable=false)    {        $locked                 = $this->Locked;        $quickadd_show_price    = true;        $quickadd_show_barcode  = true;        $locked_fields_arr      = array();                if ($records) {                        // ----- setup the rows and columns            $columns        = $this->Quickadd_Columns;            $count          = count($records);            $rows_per_col   = ceil($count / $columns);                        // ----- initialize variables            $col_content_arr    = array();            $col_current        = 0;            $row_current        = 0;                        // ----- process records            foreach ($records as $record) {                $row_current++;                                $field_start        = $this->Pipeline_Field_Start;                $barcode            = $record['barcode'];                $title              = ($record['salesorder_quickadd_title']) ? $record['salesorder_quickadd_title'] : $barcode;                $span_style         = "font-size:8px; color:#999;";                $style_pad_top      = ($quickadd_show_barcode) ? "padding-top:2px;" : "padding-top:6px;";                                $id_qty             = "{$field_start}qty_{$barcode}";                $id_price           = "{$field_start}price_{$barcode}";                                $qty_input          = "<input id='{$id_qty}' name='{$id_qty}' size='1' maxlength='255' value='' type='text' />";                $price_input        = ($quickadd_show_price) ? "&nbsp;&nbsp;\$<input id='{$id_price}' name='{$id_price}' size='3' maxlength='255' value='' type='text' />" : '';                $barcode_display    = ($quickadd_show_barcode) ? "</br><span style='{$span_style}'>[{$barcode}]</span>" : '';                                                if ($locked) {                    $locked_fields_arr[]    = $id_qty;                    $locked_fields_arr[]    = $id_price;                }                                        $display = "                    <div style='border-bottom:1px solid #ccc; margin-bottom:5px;'>                    <div style='float:left; {$style_pad_top}'><b>{$title}</b>: {$barcode_display}</div>                    <div style='float:right;'>{$qty_input}{$price_input}</div>                    <div class='clear'></div>                    </div>                    ";                                                                // ----- increment column                if ($row_current > $rows_per_col) {                    $row_current = 1;                    $col_current++;                }                                // ----- store content                $existing_content                   = (isset($col_content_arr[$col_current])) ? $col_content_arr[$col_current] : '';                $col_content_arr[$col_current]      = "{$existing_content}{$display}";                $this->Quickadd_Exist_Arr[$barcode] = $barcode;                            }                        // ----- create the output table            $count          = count($col_content_arr);            $col_content    = "";            foreach ($col_content_arr AS $id => $content) {                $col_content .= "<td valign='top'>{$content}</td>";                $col_content .= "<td style='border-right:1px solid blue;'></td>";                $col_content .= "<td style='padding-right:10px;'></td>";            }                                    if ($locked) {                $this->JavascriptDisableFunctionality($locked_fields_arr);      // disable fields                $this->JavascriptInputNoBorder($locked_fields_arr);             // hide borders on fields            }                                    $quickadd_assembly  = (!$locked) ? $this->GetSalesOrderAssemblies() : "";            $style              = (!$shorttable) ? "width='{$this->Pipeline_Table_Width}' style='width:{$this->Pipeline_Table_Width}px;'" : "";                         $output = "                <div style='border-bottom:1px solid black; padding:5px;'>                {$quickadd_assembly}                </div>                <table border='0' {$style}>                <tr>{$col_content}</tr>                </table>                ";                    } else {            $output = 'No Quick Add Products';        }                return $output;    }        private function PopulateQuickAddTable()    {        // ----- Load values into the quick-add table        if (isset($_POST['FORM_pipeline_array'])) {                        // LOAD FROM DATABASE RECORD -----                        $pipeline_arr = unserialize($_POST['FORM_pipeline_array']);            if ($pipeline_arr != '') {                foreach ($pipeline_arr as $barcode => $arr) {                                        // ----- get values from array                    $field_start    = $this->Pipeline_Field_Start;                    $quantity       = (isset($arr['quantity'])) ? $arr['quantity'] : 0;                    $price          = (isset($arr['price'])) ? $arr['price'] : 0;                                        // ----- use jQuery to populate the form                    AddScriptOnReady("                        $('#{$field_start}qty_{$barcode}').val('{$quantity}');                        $('#{$field_start}price_{$barcode}').val('{$price}');                    ");                                                            // ----- determine if the field in on the page                    if (!isset($this->Quickadd_Exist_Arr[$barcode])) {                                                $arr['barcode'] = $barcode;                        $arr['retailer_code'] = 'temp retailer_code';                        $arr['salesorder_quickadd_title'] = 'temp salesorder_quickadd_title';                        $this->Quickadd_Not_Exist_Arr[$barcode] = $arr;                    }                }            }                                    // ----- handle the records that don't have populatable fields            /*            $extra_output   = '<div id="quickadd_noexist_products_header">ADDITIONAL PIPELINE ITEMS</div>';            $extra_output  .= '<div id="quickadd_noexist_products_subheader">(exist in record but not active quick-add items)</div>';            $extra_output  .= '<table id="quickadd_noexist_products_table">';            $extra_output  .= "<tr><td class=\"theader\">ITEM</td><td class=\"theader\">QUANTITY</td><td class=\"theader\">PRICE</td></tr>";            foreach ($this->Quickadd_Not_Exist_Arr AS $barcode => $arr) {                $info           = $this->GetInventoryItemDetailsFromBarcode($barcode);                $quantity       = (isset($arr['quantity'])) ? $arr['quantity'] : 0;                $price          = (isset($arr['price'])) ? $arr['price'] : 0;                $extra_output  .= "<tr><td class=\"tcontent\">{$info}</td><td class=\"tcontent\">{$quantity}</td><td class=\"tcontent\">\${$price}</td></tr>";            }            $extra_output .= '</table>';                        $extra_output   .= $this->CreateQuickAddTable($this->Quickadd_Not_Exist_Arr);                        AddScriptOnReady("                $('#quickadd_noexist_products').html('{$extra_output}');            ");                        AddStyle("                #quickadd_noexist_products_header {                    font-size:14px;                    font-weight:bold;                    color:blue;                    background-color:#ddd;                                    }                #quickadd_noexist_products_subheader {                    font-size:10px;                    color:blue;                    background-color:#ddd;                    border-bottom:1px solid blue;                }                #quickadd_noexist_products_table td.theader {                    background-color:#ddd;                    font-size:12px;                    font-weight:bold;                }                #quickadd_noexist_products_table td.tcontent {                    border-bottom:1px solid #ddd;                }            ");            */                                } else {                        // LOOP THROUGH _POST[] TO FIND VALUES                        $field_start = $this->Pipeline_Field_Start;            foreach ($_POST as $field => $value) {                //echo "</br>$field => $value";                $pos = strpos($field, $field_start);                        // check if fieldname were looking for is in array                if ($pos !== false) {                    //echo "<div style='color:red;'>$field => $value</div>";                    AddScriptOnReady("$('#{$field}').val('{$value}');");      // use jQuery to populate the form                }            }                    }    }                                private function ListTableHeader()    {        # FUNCTION :: Create header area above the table listing                $select             = $this->CreatePipelineStatusDropdown();        $sortlink           = $this->CreateSortLink();        $last_update        = $this->GetLastUpdateDate();        $gap                = "&nbsp;&nbsp;&nbsp;&nbsp;";        $summarylink        = $this->CreateSummaryTableLink();        $select_visibility  = $this->CreatePipelineVisibilityDropdown();                $output = "        <table class='pb_day_table'>            <tr>                <td valign='middle' width='100%'>                    <div style='font-size:13px; background-color:#efefef; padding:5px;'><b>Last Pipeline Update:</b> {$last_update}</div>                                        <table cellpadding='2' cellspacing='0' border='0'>                    <tr><td align='right'><span style='font-size:13px;'><b>Pipeline Status:</b></span></td><td>{$select}</td></tr>                    <tr><td align='right'><span style='font-size:13px;'><b>Pipeline Sort:</b></span></td><td>{$sortlink}</td></tr>                    <tr><td align='right'><span style='font-size:13px;'><b>Summary Table:</b></span></td><td>{$summarylink}</td></tr>                    <tr><td align='right'><span style='font-size:13px;'><b>Pipeline Visibility:</b></span></td><td>{$select_visibility}</td></tr>                    </table>                                    </td>            </tr>        </table></br>";                echo $output;    }        private function GetLastUpdateDate()    {        # FUNCTION :: Determine the last edit date for the pipeline                // ----- get the records        $where_pipeline = ($this->Pipeline_Status) ? " AND pipeline_status='{$this->Pipeline_Status}'" : '';        $record = $this->SQL->GetRecord(array(            'table' => $this->Table,            'keys'  => 'MAX(updated) AS MAXDATE',            'where' => "active=1 AND status_hide_from_pipeline=0 {$where_pipeline}",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, false);                                if (isset($record['MAXDATE'])) {            $date_current           = $record['MAXDATE'];            $timezone_database      = $this->Timezone_Database;     // timezone of database            $timezone_local         = $this->Timezone_Local;        // timezone of user            $output_format          = $this->Output_Format;         // output timestamp format 'Y-m-d H:i:s T'            $Obj_Date               = new DateTime($date_current, new DateTimeZone($timezone_database));            $Obj_Date->setTimezone(new DateTimeZone($timezone_local));          // set tiezone to local            $output                 = $Obj_Date->format($output_format);            // format and output date        } else {            $output = 'n/a';        }                return $output;    }        private function CreatePipelineStatusDropdown()    {        # FUNCTION :: Create a drop-down showing all the pipeline statuses - for above table listing                global $PAGE;                $select_options         = '';                                                       // initialize variable        $pagelink               = 'http://webmanager.whhub.com/office/class_execute';       // get page URL        $current_status         = $this->Pipeline_Status;                                   // get the current pipeline status        $pipeline_status_list   = $this->GetSetting('sales_order_pipeline_status');         // get values from inventory_settings table        $pipeline_parts         = explode('|', $pipeline_status_list);                // ----- default 'ALL' option        //$eq                     = EncryptQuery("class={$this->Classname}");        //$link                   = $pagelink . '?eq=' . $eq;        $item                   = "-- ALL --";        $selected               = ($current_status == $item) ? ' selected' : '';        $eq                     = EncryptQuery("class={$this->Classname};v1=;");        $action                 = (Get('action')) ? ";action=" . Get('action') : '';        $link_current           = $pagelink . '?eq=' . $eq . $action;        $link_sort_on           = $pagelink . '?eq=' . $eq . ';action=sort';        $link_sort_off          = $pagelink . '?eq=' . $eq;        $select_options        .= "<option value='' link_current='{$link_current}' link_sort_on='{$link_sort_on}' link_sort_off='{$link_sort_off}'>{$item}</option>";                // create the default "all" option                // ----- all of the other options        foreach ($pipeline_parts AS $item) {            $selected           = ($current_status == $item) ? ' selected' : '';            $eq                 = EncryptQuery("class={$this->Classname};v1={$item};");            $action             = (Get('action')) ? ";action=" . Get('action') : '';            $link_current       = $pagelink . '?eq=' . $eq . $action;            $link_sort_on       = $pagelink . '?eq=' . $eq . ';action=sort';            $link_sort_off      = $pagelink . '?eq=' . $eq;            $select_options    .= "<option value='{$item}' link_current='{$link_current}' link_sort_on='{$link_sort_on}' link_sort_off='{$link_sort_off}' {$selected}>{$item}</option>";        }                // ----- create the select dropdown        $select = "<select name='pipeline_status' id='pipeline_status'>{$select_options}</select>";                // ----- jquery for handling drop-down change        AddScriptOnReady("            $('#pipeline_status').change(function() {                var value   = $(this).attr('value');                var link    = $('option:selected', this).attr('link_current');                window.location = link;            });        ");                return $select;    }        private function CreateSortLink()    {        # FUNCTION :: Create sort enable/disable link                $text       = (Get('action') == 'sort') ? "COMPLETE SORT" : "ENABLE SORT";        $link       = (Get('action') == 'sort') ? "" : ";action=sort";                if (Get('action') == 'sort') {            $text       = "DISABLE SORT";            $link_use   = "link_sort_off";        } else {            $text       = "ENABLE SORT";            $link_use   = "link_sort_on";        }                $output     = "<span id='pipeline_sort_link' style='cursor:pointer; color:blue;'>{$text}</span>";                // ----- jquery for handling drop-down change        AddScriptOnReady("            $('#pipeline_sort_link').click(function() {                var value   = $('#pipeline_status').attr('value');                var link    = $('option:selected', '#pipeline_status').attr('{$link_use}');                window.location = link;            });        ");                return $output;    }                private function CreatePipelineVisibilityDropdown()    {        # FUNCTION :: Create a drop-down showing pipeline visibility statuses                $output = "";                if (Get('action') != 'sort') {                        $show_summary   = Session('pipeline_show_hidden_records');            $text           = ($show_summary) ? "HIDE HIDDEN RECORDS" : "SHOW HIDDEN RECORDS";            $link           = ($show_summary) ? ";pipeline_show_hidden_records_off=true" : ";pipeline_show_hidden_records_on=true";            $link_use       = "link_sort_off";                        $output         = "<span id='hidden_records_link' style='cursor:pointer; color:blue;'>{$text}</span>";                        // ----- jquery for handling drop-down change            AddScriptOnReady("                $('#hidden_records_link').click(function() {                    var link    = $('option:selected', '#pipeline_status').attr('{$link_use}');                    window.location = link + '{$link}';                });            ");        }                return $output;    }                private function CreateSummaryTableLink()    {        # FUNCTION :: Create summary table enable/disable link                $output = "";                if (Get('action') != 'sort') {                        $show_summary   = Session('pipeline_show_summary');            $text           = ($show_summary) ? "HIDE SUMMARY TABLE" : "SHOW SUMMARY TABLE";            $link           = ($show_summary) ? ";pipeline_show_summary_off=true" : ";pipeline_show_summary_on=true";            $link_use       = "link_sort_off";                        $output         = "<span id='summary_table_link' style='cursor:pointer; color:blue;'>{$text}</span>";                        // ----- jquery for handling drop-down change            AddScriptOnReady("                $('#summary_table_link').click(function() {                    var value   = $('#pipeline_status').attr('value');                    var link    = $('option:selected', '#pipeline_status').attr('{$link_use}');                    window.location = link + '{$link}';                });            ");        }                return $output;    }                    private function AddScriptSort()    {            # FUNCTION :: Scripts needed for re-sorting priority                AddScriptInclude("https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js");                $link   = getClassExecuteLink(EncryptQuery("class={$this->Classname};"));        $SCRIPT = <<<SCRIPT                        $("#sortable").sortable({                placeholder: 'ui-state-highlight',                stop: function(i) {                    placeholder: 'ui-state-highlight',                    $.ajax({                        type: "POST",                        url: "{$link};action=sort;",                        data: { order: $("#sortable").sortable("serialize") },                        success: function( result ) {                                if (result == 1) {                                    //alert('Instructors have been re-ordered');                                } else {                                    alert('Failed to re-order instructors');                                }                            }                    });                }            });            $("#sortable").disableSelection();SCRIPT;        AddScriptOnReady($SCRIPT);            }        public function AddStyleSort()    {        AddStyle("            #sortable, .TABLE_DISPLAY {                list-style-type: none;                margin: 0;                padding: 0;                /*width: 60%;*/            }            #sortable li, .TABLE_DISPLAY li {                margin: 0 3px 3px 3px;                padding: 0.4em;                padding-left: 1.5em;                font-size: 1.4em;                /*height: 18px;*/            }            #sortable li span, TABLE_DISPLAY li span {                position: absolute;                margin-left: -1.3em;            }        ");    }        private function GetAllSalesOrdersForSort()    {        # FUNCTION :: Get all sales orders from the database                $output = '';           // initialize variable                        // ----- get the records        $where_pipeline = ($this->Pipeline_Status) ? " AND pipeline_status='{$this->Pipeline_Status}'" : '';        $records = $this->SQL->GetArrayAll(array(            'table' => $this->Table,            'keys'  => 'inventory_sales_orders_id, universal_id, so_number, order_type, customer, date_created, date_ship_delivery_request, date_ship_actual, pipeline_status, production_status, finance_status',            'where' => "active=1 AND status_hide_from_pipeline=0 {$where_pipeline}",            'order' => '`priority_sort_order` ASC',        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, false);                        // ----- format the records        if ($records) {            $output .= '<ul id="sortable">';            foreach ($records AS $record) {                                $id = $record['inventory_sales_orders_id'];                $display = "                    <div class='col col_1'>                        ID: {$record['inventory_sales_orders_id']}</br>                        UID: <b>{$record['universal_id']}</b></br>                        SO#: {$record['so_number']}                    </div>                    <div class='col col_2'>                        Customer: <b>{$record['customer']}</b></br>                        Date Created: {$record['date_created']}</br>                        Delivery Date: {$record['date_ship_delivery_request']}</br>                        Shipped Date: {$record['date_ship_actual']}                    </div>                    <div class='col col_3'>                        Type: <b>{$record['order_type']}</b></br>                        Pipeline Status: <b>{$record['pipeline_status']}</b></br>                        Production Status: <b>{$record['production_status']}</b></br>                        Finance Status: <b>{$record['finance_status']}</b>                    </div>                    <div class='clear'></div>                ";                                $output    .= "<li id='item_{$id}' class='ui-state-default' style='min-width:200px;'><span class='ui-icon ui-icon-arrowthick-2-n-s'></span>{$display}</li>";            }            $output .= '</ul>';                                    // ----- add needed styles            AddStyle("                .col {  float:left; font-size:12px;}                .col_1 {                    width: 150px;                    border:0px solid red;                }                .col_2 {                    width: 300px;                    border:0px solid red;                }                .col_3 {                    width: 300px;                    border:0px solid red;                }            ");                    } else {            $output = 'NO RECORDS FOUND';        }                echo $output;            }            private function GetSalesOrderAssemblies()    {        # FUNCTION :: Get the sales order assemblies                $output = "";                // ----- get the records        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_sales_order_assemblies',            'keys'  => 'inventory_sales_order_assemblies_id, assembly_name',            'where' => 'active=1',        ));                // ----- format the records        if ($records) {                        $selected           = ''; //Get('status');            $select_options     = '';            foreach ($records AS $record) {                //$selected = (strtolower($status_item) == strtolower($status)) ? ' selected' : '';                $selected = "";                $select_options .= "<option value='{$record['inventory_sales_order_assemblies_id']}' {$selected}>{$record['assembly_name']}</option>";            }            $OBJ_Help       = new Help_HelpInstructions();            $help1          = $OBJ_Help->ShowHelpIndicator(3);            $add            = "<span id='quickadd_assembly_select_add'>[Add]</span>";            $remove         = "<span id='quickadd_assembly_select_remove'>[Remove]</span>";            $view           = "<span id='quickadd_assembly_select_view'>[View]</span>";            $status_select  = "<select id='quickadd_assembly_select'>{$select_options}</select>&nbsp;{$add}&nbsp;{$remove}&nbsp;{$view}&nbsp;&nbsp;&nbsp;&nbsp;{$help1}";                                    $eq             = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)            $eq_viewassy    = EncryptQuery("class=Inventory_InventorySalesOrderAssemblyCreate");                                    AddScriptOnReady("                $('#quickadd_assembly_select_add').click(function() {                    var isoaid  = $('#quickadd_assembly_select').val();                    var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=sales_order_assembly_lookup;isoaid=' + isoaid;                    var data    = '';                                        $.get(url, data)                        .done(function(data) {                            //alert(data);                                                        var obj             = jQuery.parseJSON(data);                            var length          = obj.length;                            var i               = 0;                            var field_start     = '{$this->Pipeline_Field_Start}';                                                        for (i=0; i<length; i++){                                //alert(obj[i].barcode + ' -- ' + obj[i].quantity);                                                                var barcode         = obj[i].barcode;                               // get barcode to remove                                var quantity        = parseInt(obj[i].quantity);                    // get quantity to remove                                var targetID        = '#' + field_start + 'qty_' + barcode;         // determine field to get value for                                var curQty          = parseInt($(targetID).val());                  // get current quantity                                                                curQty              = (!curQty) ? 0 : curQty;                       // make sure valid number in value                                quantity            = (!quantity) ? 0 : quantity;                   // make sure valid number in value                                                                var newQty          = curQty + quantity;                            // calculate new quantity                                newQty              = (newQty < 0) ? 0 : newQty;                    // don't allow negative quantity                                                                $(targetID).val(newQty);                                            // store new quantity in field                            }                    }, 'json');                });                                $('#quickadd_assembly_select_remove').click(function() {                    var isoaid  = $('#quickadd_assembly_select').val();                    var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=sales_order_assembly_lookup;isoaid=' + isoaid;                    var data    = '';                                        $.get(url, data)                        .done(function(data) {                            //alert(data);                                                        var obj             = jQuery.parseJSON(data);                            var length          = obj.length;                            var i               = 0;                            var field_start     = '{$this->Pipeline_Field_Start}';                                                        for (i=0; i<length; i++){                                //alert(obj[i].barcode + ' -- ' + obj[i].quantity);                                                                var barcode         = obj[i].barcode;                               // get barcode to remove                                var quantity        = parseInt(obj[i].quantity);                    // get quantity to remove                                var targetID        = '#' + field_start + 'qty_' + barcode;         // determine field to get value for                                var curQty          = parseInt($(targetID).val());                  // get current quantity                                                                curQty              = (!curQty) ? 0 : curQty;                       // make sure valid number in value                                quantity            = (!quantity) ? 0 : quantity;                   // make sure valid number in value                                                                var newQty          = curQty - quantity;                            // calculate new quantity                                newQty              = (newQty < 0) ? 0 : newQty;                    // don't allow negative quantity                                                                $(targetID).val(newQty);                                            // store new quantity in field                            }                    }, 'json');                });                                $('#quickadd_assembly_select_view').click(function() {                    var isoaid  = $('#quickadd_assembly_select').val();                    var url     = 'http://webmanager.whhub.com/office/class_execute.php;eq={$eq_viewassy};action=viewspecial;isoaid=' + isoaid;                                        top.parent.appformCreate('Window', url, 'apps'); return false;                });                            ");                        AddStyle("                #quickadd_assembly_select_add {                    color:          blue;                    font-weight:    bold;                    cursor:         pointer;                }                                #quickadd_assembly_select_remove {                    color:          red;                    font-weight:    bold;                    cursor:         pointer;                }                                #quickadd_assembly_select_view {                    color:          black;                    font-weight:    bold;                    cursor:         pointer;                }            ");        }                return $status_select;    }        public function MakeUniversalId()    {        # FUNCTION :: Create a unique universal ID                do {                        $code_format    = $this->GetSetting('universal_id_format');     // get setting from inventory_settings table            $letters        = "ABCDEFGHJKMNPQRTWXYZ";                       // what letters are allowed            $numbers        = "23456789";                                   // what numbers are allowed                        $code_len       = strlen ($code_format);                        // length of code            $letters_len    = strlen ($letters);                            // length of letters            $numbers_len    = strlen ($numbers);                            // length of numbers                        $code_output    = "";                                           // initialize variable                        for ($i=0; $i<$code_len; $i++) {                // loop through code formatting to create letters and numbers                switch($code_format[$i]) {                    case 'L':                    case 'l':                        // add a random letter to the output code                        $code_output .= $letters[mt_rand(0, $letters_len - 1)];                    break;                                        case 'N':                    case 'n':                        // add a random number to the output code                        $code_output .= $numbers[mt_rand(0, $numbers_len - 1)];                    break;                }            }                        // check if the created code is actually unique            $unique     = $this->SQL->IsUnique('inventory_sales_orders', 'universal_id', $code_output);                    } while (!$unique);                return $code_output;    }        private function LoadClassSettings()    {        // FUNCTION :: Load settings needed for the module                $this->Timezone_Database            = $this->GetSetting('sales_order_timezone_database');        $this->Timezone_Local               = $this->GetSetting('sales_order_timezone_local');        $this->Output_Format                = $this->GetSetting('sales_order_date_format');        $this->Checklist_Master             = $this->GetSetting('sales_order_checklist');                        // ----- get production status colors        $p_status_colors            = $this->GetSetting('sales_order_production_status_color');        $p_status_colors_parts      = explode('|', $p_status_colors);        foreach ($p_status_colors_parts as $part) {            $p      = explode('=', $part);            if (isset($p[1]) && isset($p[0])) {                $title  = $p[0];                $color  = $p[1];                $this->Production_Status_Color[$title] = $color;            }        }                // ----- get pipeline status colors        $p_status_colors            = $this->GetSetting('sales_order_pipeline_status_color');        $p_status_colors_parts      = explode('|', $p_status_colors);        foreach ($p_status_colors_parts as $part) {            $p      = explode('=', $part);            if (isset($p[1]) && isset($p[0])) {                $title  = $p[0];                $color  = $p[1];                $this->Pipeline_Status_Color[$title] = $color;            }        }                // ----- get finance status colors        $p_status_colors            = $this->GetSetting('sales_order_finance_status_color');        $p_status_colors_parts      = explode('|', $p_status_colors);        foreach ($p_status_colors_parts as $part) {            $p      = explode('=', $part);            if (isset($p[1]) && isset($p[0])) {                $title  = $p[0];                $color  = $p[1];                $this->Pipeline_Finance_Color[$title] = $color;            }        }                        }    private function GetUIDFromISOID()    {        if (!$this->Inventory_Sales_Orders_Id) {            $error = "Missing Inventory_Sales_Orders_Id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_sales_orders',            'keys'  => 'universal_id',            'where' => "`inventory_sales_orders_id`={$this->Inventory_Sales_Orders_Id}",        ));                if ($record) {            $output = $record['universal_id'];        } else {            $output = 0;        }                return $output;    }                        public function TablePostProcess($search_array)    {        # FUNCTION :: Do a summary after running the query                $pipeline_arr   = array();      // initialize variable        $total_arr      = array();      // initialize variable        $output_arr     = array();      // initialize variable                $title_row          = "";                                                                   // initialize variable        $content_row        = "";                                                                   // initialize variable        $total_row          = "";                                                                   // initialize variable        $content            = "";                                                                   // initialize variable                $style_table        = "border:1px solid blue;";        $style_title        = "background-color:#ccc; font-weight:bold; text-align:center;";                                        // initialize style        $style_content      = "background-color:#fff; font-weight:normal; text-align:center; border-bottom:1px solid #ccc;";        // initialize style        $style_total        = "background-color:#ccc; font-weight:bold; text-align:center;";                                        // initialize style                                // ---------- create the master table of pipeline items ----------        $quickadd_records   = $this->GetRecordsForQuickAddTable_FromDatabase();                                                     // get quickadd fields from database        foreach ($quickadd_records AS $record) {            $barcode            = $record['barcode'];            $title              = ($record['salesorder_quickadd_title']) ? $record['salesorder_quickadd_title'] : $barcode;            $pipeline_arr[]     = $barcode;                        $title_row         .= "<td style='{$style_title}'>{$barcode}</br>{$title}</td>";            $content_row       .= "<td style='{$style_content}'>@@{$barcode}@@</td>";            $total_row         .= "<td style='{$style_total}'>@@{$barcode}@@</td>";        }                $title_row          = "<tr><td style='{$style_title}'>UID</td>{$title_row}</tr>";                       // store the content into a row        $content_row        = "<tr><td style='{$style_content}'>@@UID@@</td>{$content_row}</tr>";               // store the content into a row        $total_row          = "<tr><td></td>{$total_row}</tr>";                                                 // store the content into a row                                // ---------- process the products from the search query ----------        foreach ($this->Table_Products_Arr AS $id => $lines) {            if ($lines) {                $this->Inventory_Sales_Orders_Id    = $id;                $uid                                = $this->GetUIDFromISOID();                                     // get UID for record                                // ---------- make the content row ----------                $search = array();      // initialize variable                $replace = array();     // initialize variable                                $search[]   = "@@UID@@";                $replace[]  = $uid;                                foreach ($pipeline_arr AS $barcode) {                    $search[]   = "@@{$barcode}@@";                    $replace[]  = (isset($lines[$barcode])) ? $lines[$barcode]['quantity'] : "";                                        // ----- store into for the totals row                    $existing_qty           = (isset($total_arr[$barcode])) ? $total_arr[$barcode] : 0;             // get existing quantity                    $total_arr[$barcode]    = $existing_qty + $lines[$barcode]['quantity'];                         // store new quantity for total                }                $content .= str_replace($search, $replace, $content_row);            }        }                                // ---------- make the totals row ----------        $search = array();      // initialize variable        $replace = array();     // initialize variable        foreach ($pipeline_arr AS $barcode) {            $search[]   = "@@{$barcode}@@";            $replace[]  = (isset($total_arr[$barcode])) ? $total_arr[$barcode] : "";        }        $total_row = str_replace($search, $replace, $total_row);                                // ---------- make the final output ----------        $output .= "</br><div class='form_section_wrapper'>";        $output .= "<div class='form_section_header'>PRODUCT SUMMARY TABLE</div>";        $output .= "<table style='{$style_table}'>{$title_row}{$content}{$total_row}</table>";        $output .= "</div>";                return $output;            }                // ===== NOTES AREA FUNCTIONS =====    private function LoadNotesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the notes areas for this sales order                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                $output                                 = "";                                                                           // initialize variable                $Obj_Notes                              = new Inventory_InventorySalesOrderNotes(0, $this->Inventory_Sales_Orders_Id);  // instantiate class        $Obj_Notes->Inventory_Sales_Orders_Id   = $this->Inventory_Sales_Orders_Id;                                             // set sales order id to get notes for        $Obj_Notes->Table_Width                 = $this->Notes_Width;                                                           // set variable        $Obj_Notes->Notes_Font_Size             = $this->Notes_Font_Size;                                                       // set variable        $this->Existing_Notes_Count             = $Obj_Notes->GetExistingCount($this->Inventory_Sales_Orders_Id);               // get count of existing notes        $output                                .= $Obj_Notes->AddRecordText();                                                  // display ability to add a new note        $output                                .= "</br>";        $output                                .= $Obj_Notes->ViewAllRecords(true);                                             // get the existing records                        return $output;                                                                                                         // return the output    }            // ===== FILES AREA FUNCTIONS =====    private function LoadFilesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the notes areas for this sales order                $bypass_adding_script = false;                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                        if (!$this->UID) {            $this->UID = $this->GetUIDFromISOID();        }                if (!$this->UID) {            $error = "Missing UID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output                                 = "";                                                                           // initialize variable                $Obj_Files                              = new Inventory_Uploadify_UploadedFiles();                                      // instantiate class        $Obj_Files->UID                         = $this->UID;                                                                   // set sales order id to get files for        $Obj_Files->Upload_Type                 = 'salesorder';                                                                 // set file type        $Obj_Files->Table_Width                 = $this->Files_Width;                                                           // set variable        $Obj_Files->Files_Font_Size             = $this->Files_Font_Size;                                                       // set variable        $Obj_Files->Files_Font_Size_2           = $this->Files_Font_Size_2;                                                     // set variable                $output                                .= "</br>";        $output                                .= $Obj_Files->ViewAllRecordsFromFolderWithDatabaseCrosscheck(true);             // get the existing records        $Obj_Files->AddScript();        $this->Existing_Files_Count             = $Obj_Files->Existing_Files_Count;                                             // get count of existing files                return $output;                                                                                                         // return the output    }        private function LoadFilesUploadArea()    {                        if (!$this->UID) {            $this->UID = $this->GetUIDFromISOID();        }                if (!$this->UID) {            $error = "Missing UID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                                $output = '';                $Obj_Files_Upload                       = new Inventory_Uploadify_UploadFile('salesorder', $this->UID);             // instantiate class        $Obj_Files_Upload->AddStyle();                                                                                      // add needed styles or stylesheet        $Obj_Files_Upload->AddScript();                                                                                     // add needed scripts        $output                                .= $Obj_Files_Upload->AddRecordText();                                       // display ability to add a new file                return $output;    }                    public function CreateChecklistTable()    {        # FUNCTION :: Create the checklist area                $output             = "";                                                               // initialize variable        $col_current        = 1;                                                                // initialize variable        $section            = $this->Checklist_Default_Section;                                 // initialize variable        $master             = $this->Checklist_Master;        $lines              = explode("\n", $master);                $output[]   = "titletemplate|{$this->Checklist_Title_Template}";                        // set the special form template        $output[]   = "infotemplate|{$this->Checklist_Info_Template}";                          // set the special form template        $output[]   = "code|<table border='0' cellpadding='5'><tr><td valign='top'>";           // open the table                        foreach ($lines as $line) {                        $line   = trim($line);            $first  = substr($line, 0, 1);            $last   = substr($line, -1);                        if ($line == "") {                $output[]   = "code|</br>";                                                     // store a newline            } elseif ($line == "---") {                $output[]   = ($col_current != 1) ? "code|</td>" : "";                          // close previous column                 $output[]   = "code|<td valign='top'>";                                         // start a new column                $col_current++;                                                                 // increment column count            } elseif ($first == "[" && $last == "]") {                $line       = str_replace(array('[', ']'), '', $line);                          // remove the brackets                $output[]   = "code|<div class='checklist_section_header'>{$line}</div>";       // store the output                $section    = preg_replace("/[^A-Za-z0-9]/", '', $line);                        // remove non alpha-numeric characters            } else {                $id         = preg_replace("/[^A-Za-z0-9]/", '', $line);                        // remove non alpha-numeric characters                $fieldname  = "{$this->Checklist_Field_Start}{$section}_{$id}";                 // create the fieldname                $output[]   = "checkbox|{$line}|{$fieldname}||1|0";                             // store the output            }        }                        $output[]   = "code|</td>";                                                             // close previous column         $output[]   = "code|</tr></table>";                                                     // close the table        $output[]   = "titletemplate|STD";                                                      // reset the form template        $output[]   = "infotemplate|STD";                                                       // reset the form template                        AddStyle("            .checklist_section_header {                font-weight:    bold;                font-size:      16px;                color:          blue;                border-bottom:  1px solid blue;            }        ");                        return $output;    }        private function PopulateChecklistTable()    {        // ----- Load values into the quick-add table        if (isset($_POST['FORM_checklist_array'])) {                        // LOAD FROM DATABASE RECORD -----                        $checklist_arr = unserialize($_POST['FORM_checklist_array']);            if ($checklist_arr != '') {                foreach ($checklist_arr AS $id => $fieldname) {                    // ----- use jQuery to populate the form                    AddScriptOnReady("$('#FORM_{$fieldname}').attr('checked','checked');");                }            }                    } else {                        // LOOP THROUGH _POST[] TO FIND VALUES                        $field_start = $this->Checklist_Field_Start;            foreach ($_POST as $field => $value) {                $pos = strpos($field, $field_start);                        // check if fieldname were looking for is in array                if ($pos !== false) {                    // ----- use jQuery to populate the form                    AddScriptOnReady("$('#FORM_{$field}').attr('checked','checked');");                }            }                    }    }                        }  // -------------- END CLASS --------------