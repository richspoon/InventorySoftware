<?phpclass Inventory_InventorySalesOrderPlace extends Inventory_InventoryBase{        // ----- EDITABLE VARIABLES -----    public $Show_Query                  = false;                        // (false) TRUE = show the database queries    public $Module_Offline              = false;                        // (false) TRUE = dispaly offline message to users    public $Header_Row                  = "Barcode|APDM SKU|Description|QTY|Price (ea)|Price (total)|DEL";      // Header row for quick-add table            // ----- CUSTOMIZATION VARIABLES -----    private $Window_Width               = 820;                          // needs to be larger than Pipeline_Table_Width    private $Pipeline_Table_Width       = 800;                          // width of pipeline table area    private $Notes_Width                = 800;                          // notes area - width     private $Notes_Font_Size            = 14;                           // notes area - font size    private $Note_Area_Wrapper_Id       = "note_add_record_wrapper";    // notes area - wrapper id    private $Files_Width                = 800;                          // files area - width     private $Files_Font_Size            = 13;                           // files area - font size    private $Files_Font_Size_2          = 10;                           // files area - font size (file details)    private $Files_Area_Wrapper_Id      = "file_add_record_wrapper";    // files area - wrapper id    private $Quickadd_Columns           = 3;                            // how many columns to put quick-add columns into 	private $Pipeline_Field_Start       = "pipeline_";                  // custom fieldname start for pipeline variables    private $Pipeline_Status_Get        = "pipeline_status";            // variable passed in _GET to set the pipeline status    private $Timezone_Database          = 'America/Mexico_City';        // timezone of database    private $Timezone_Local             = 'America/Los_Angeles';        // timezone of user    private $Output_Format              = 'l, M jS, Y -- g:i:s a (T)';  // output timestamp format    private $Allow_Empty_Sales_Orderd   = true;                         // (true) TRUE = allow a 0-line sales order (blank SO)        // ----- OTHER VARIABLES -----    private $Existing_Notes_Count       = 0;                            // will hold the number of notes for this sales order    private $Existing_Files_Count       = 0;                            // will hold the number of files for this sales order    public $Inventory_Sales_Orders_ID 	= 0;                            // will hold the SO ID that is editing	public $Locked                      = false;                        // will hold the locked status    public $Pipeline_Status             = '';                           // will hold the pipeline status passed into class    public $Quickadd_Exist_Arr          = array();                      // will hold what quickadd fields exist in form    public $Production_Status_Color     = array();                      // will hold array of colors to show for production status    public $Pipeline_Status_Color       = array();                      // will hold array of colors to show for pipeline status    public $Pipeline_Finance_Color      = array();                      // will hold array of colors to show for finance status    public $UID                         = 0;                            // will hold UID for this record            /* ====== TO DO LIST ==========================        Convert to using the Universal ID for linking lines        Convert Quick-add to actual order    Assebly of products into quick-add    Delete notes        ================================ */            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database        		$this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-12',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-07-15',            'Filename'      => $this->Classname,            'Version'       => '1.4.11',            'Description'   => 'Create a customer sales order - will draw down inventory',            'Update Log'    => Array(                '2012-11-30_1.1'    => "Added customer information field",                '2012-11-30_1.2'    => "Added new formatting and ability to calculate prices",				'2013-03-13_1.3'    => "Modified to support database change - track by id not SO#",                '2013-05-01_1.4.0'  => "New management for pipeline",                '2013-05-07_1.4.1'  => "Continued pipeline development",                '2013-05-11_1.4.2'  => "Continued pipeline development",                '2013-05-13_1.4.3'  => "Continued pipeline development",                '2013-05-21_1.4.4'  => "Minor bug fix",                '2013-05-21_1.4.5'  => "Access-level control and form changes",                '2013-06-12_1.4.6'  => "Minor bug fixes",                '2013-06-13_1.4.7'  => "Minor bug fixes",                '2013-06-26_1.4.8'  => "Added 'shipped date' to sort function",                '2013-06-29_1.4.9'  => "Changed language of module to 'order pipeline' plus misc other field changes",                '2013-07-08_1.4.10' => "spelling mistake fix",                '2013-07-15_1.4.11' => "Added PO Date field",            ),        );                        /// ===== GET VALUES PASSED INTO CLASS CONSTRUCT =====        $this->SetParameters(func_get_args());        $this->Pipeline_Status          = $this->GetParameter(0);                                $this->Table                = 'inventory_sales_orders';        $this->Index_Name           = 'inventory_sales_orders_id';        $this->Default_Sort         = 'priority_sort_order, inventory_sales_orders_id';      // field for default table sort                        $this->Field_Titles = array(            "{$this->Table}.inventory_sales_orders_id"              => 'Inventory Sales Orders Id',            "{$this->Table}.universal_id"                           => 'Universal ID',            "{$this->Table}.description"                            => 'Description',            "{$this->Table}.so_number"                              => 'SO Number',            "{$this->Table}.quote_number"                           => 'Quote Number',            "{$this->Table}.invoice_number"                         => 'Invoice Number',            "{$this->Table}.rma_number"                             => 'RMA Number',            "{$this->Table}.customer_po_number"                     => 'Customer PO Number',            "{$this->Table}.order_type"                             => 'Order Type',            "{$this->Table}.customer"                               => 'Customer',            "{$this->Table}.priority_sort_order"                    => 'Priority Sort Order',                        'STATUS INFORMATION' => '|',            "{$this->Table}.demo_status"                            => 'Demo Status',            "{$this->Table}.rma_status"                             => 'RMA Status',            "{$this->Table}.pipeline_status"                        => 'Pipeline Status',            "{$this->Table}.production_status"                      => 'Production Status',            "{$this->Table}.finance_status"                         => 'Finance Status',            "{$this->Table}.status_hide_from_pipeline"              => 'Hide From Pipeline',            "{$this->Table}.status_post_production_complete"        => 'Post-production Complete',            "{$this->Table}.date_created"                           => 'Created Date',            "{$this->Table}.date_ship_delivery_request"             => 'Requested Delivery Date',            "{$this->Table}.date_ship_request"                      => 'Planned Ship Date',            "{$this->Table}.date_ship_actual"                       => 'Actual Ship Date',            "{$this->Table}.date_invoice_sent"                      => 'Invoice Sent Date',            "{$this->Table}.date_purchase_order"                    => 'Purchase Order Date',                                    'OTHER DETAILS' => '|',            //"{$this->Table}.active AS COGS"                         => 'COGS',            //"(SELECT SUM(`price_total`) AS EST_LINE_ITEM_COST FROM `inventory_sales_order_lines` WHERE `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number` AND `inventory_sales_order_lines`.active=1) AS EST_LINE_ITEM_COST" => 'Estimated Line Item Cost',            //"{$this->Table}.notes"                                  => 'Notes',            //"{$this->Table}.cost_shipping"                          => 'Cost (shipping)',            //"{$this->Table}.cost_other"                             => 'Cost (other)',            "{$this->Table}.ref_document_url"                       => 'Ref URL',            "{$this->Table}.ref_document_number"                    => 'Ref Number',                        'COMMISSION DETAILS' => '|',            "{$this->Table}.commission_paid"                        => 'Commission Paid',            "{$this->Table}.commission_date"                        => 'Commission Date',            "{$this->Table}.commission_amount"                      => 'Commission Amount',            "{$this->Table}.commission_cogs"                        => 'Commission COGS',            "{$this->Table}.commission_notes"                       => 'Commission Notes',                        '' => '|',            "{$this->Table}.active"                                 => 'Status',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                        $this->Join_Array = Array(            'inventory_counts'  => "LEFT OUTER JOIN `inventory_sales_order_lines` ON `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number`",        );                $this->Default_Fields   = 'universal_id, so_number, order_type, customer, description, pipeline_status, production_status, finance_status, date_created, date_ship_delivery_request, date_ship_actual, date_purchase_order, updated';        $this->Unique_Fields    = 'universal_id';                $this->Default_Values   = array(            'status'    => 'open',            'date'      => date('Y-m-d'),        );                        $where_pipeline_status      = ($this->Pipeline_Status) ? " AND pipeline_status='{$this->Pipeline_Status}'" : '';        $this->Default_Where        = "status_hide_from_pipeline=0 {$where_pipeline_status}";               // additional search conditions                $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Edit_Links_Count     = '4';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table        $this->Default_List_Size    = 100;          // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window                        // ----- GET SOME NEEDED SETTINGS -----        $this->LoadClassSettings();        $this->TableHeading_ShowTitle = false;            } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $this->ModuleOfflineMessage();  // show module offline essage - if activated                //echo "<div style='padding:5px; background-color:pink; font-size:14px;'>SALES ORDER DEV</div>";                $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;            			case 'delete':                // ----- special delete case because a lot of different records need to be modified                $this->DeleteSalesOrder();            break;			            case 'list':            default:                // ----- display list of all assemblies that can be built				$this->AddStyle();                $this->AddScript();                $this->ListTableHeader();                $this->ListTable();            break;                        case 'sort':                $this->AddStyleSort();                $this->AddScriptSort();                $this->ListTableHeader();                $this->GetAllSalesOrdersForSort();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_products',                    'keys'  => 'description, retailer_code, barcode, status_retired',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%') AND active=1 AND status_hide_salesorder=0",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $retired = ($record['status_retired'] == 1) ? "[Retired] - " : "";                    $arr[] = array(                        'label'             => "{$record['barcode']} - {$retired}{$record['retailer_code']}",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                        case 'load_notes':                $this->Inventory_Sales_Orders_ID = Get('soid');                $return = $this->LoadNotesArea(true);            break;                        case 'load_files':                $this->Inventory_Sales_Orders_ID = Get('soid');                $return = $this->LoadFilesArea(true);            break;                        case '__nextuniversalid':                // get the next unique barcode in the system (starting with a 3)                                $loop = 0;                                do {                    $count  = $this->SQL->Count('inventory_sales_orders', 'active=0 OR active=1');                                        $max_length     = 5;                    // how long should barcode be                    $lead           = 10000;                // what should first lead character be                    $value          = $count + 1;           // value of main part of number                    $count_length   = strlen($value);       // get number length                                        // ----- add middle gap 0's                    if ($count_length < $max_length) {                        $value = str_pad($value, ($max_length - 1), 0, STR_PAD_LEFT);                    }                                        // ----- tack on the leading number                    $value  = $lead + $value;               // form up the final number                    $lead   = $lead + 10000;                // increment lead number (for next loop)                                                            if ($lead > 9) {                        $return = "ERROR :: Max universal_id Count";                    }                                        // ----- verify its unique                    $unique = $this->SQL->IsUnique('inventory_sales_orders', 'universal_id', $value);                                                                                                } while (!$unique);                                $return = $value;            break;                                                case 'sort':                                # CREATE THE ARRAY THE IS PROCESSABLE                $items = array();                $order = 1;                $parts = explode('item[]=', $_POST['order']);                foreach ($parts as $part) {                    if ($part) {                        $key = intonly($part);                        $items[$key] = $order;                        $order++;                    }                }                                # RUN ALL OF THE SORTS                $passed = true;                foreach($items as $id => $order) {                    $id     = intonly($id);                    $order  = intonly($order);                                        $result = $this->SQL->UpdateRecord(array(                        'table'         => $this->Table,                        'key_values'    => "priority_sort_order='{$order}'",                        'where'         => "inventory_sales_orders_id='{$id}'",                    ));                    $passed = (!$result) ? false : $passed;                }                $return = ($passed) ? 1 : 0;            break;                        case 'sales_order_assembly_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $isoaid = Get('isoaid');                $records = $this->SQL->GetArrayAll(array(                    'table' => 'inventory_sales_order_assembly_lines',                    'keys'  => 'barcode, quantity_out',                    'where' => "inventory_sales_order_assemblies_id='{$isoaid}' AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $arr[] = array(                        'barcode'       => $record['barcode'],                        'quantity'      => $record['quantity_out'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                    }                echo $return;    }                    private function AddScript()    {        # FUNCTION :: Add needed scripts for this class                $CLASS_EXECUTE_LINK         = '/office/class_execute';        $CLASS_EXECUTE_LINK_AJAX    = '/office/AJAX/class_execute';        $eq                         = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)        $link                       = $CLASS_EXECUTE_LINK_AJAX . '?eq=' . $eq;                        // ----- ADD SCRIPT TO ADD/EDIT NOTES AND WHITESHEETS -----        AddScript("            function callClass(eq, action) {                top.parent.appformCreate('Window', '{$CLASS_EXECUTE_LINK}?eq=' + eq + '&action=' + action, 'apps');            }                        function LoadNotesArea() {                // ----- FUNTION :: Load the notes for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_notes;soid={$this->Edit_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Note_Area_Wrapper_Id}').html(data);                });            }                        function LoadFilesArea() {                // ----- FUNTION :: Load the files for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_files;soid={$this->Edit_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Files_Area_Wrapper_Id}').html(data);                });            }                        function reloadScreen() {                window.location.reload();            }                        function getUniversalId(returnID)            {                // FUNCTION :: Get the next universal ID                                var url = 'http://webmanager.whhub.com{$link};action=nextuniversalid';                                // CALL THIS CLASS VIA AJAX TO GET BARCODE                $.get(url, '', function(data){                    $('#' + returnID).val(data);                });            }        ");    }    public function AddStyle()    {        AddStyle("            #quickadd_noexist_products_header {                font-size:14px;                font-weight:bold;                color:blue;                background-color:#ddd;                            }            #quickadd_noexist_products_subheader {                font-size:10px;                color:blue;                background-color:#ddd;                border-bottom:1px solid blue;            }            #quickadd_noexist_products_table td.theader {                background-color:#ddd;                font-size:12px;                font-weight:bold;            }            #quickadd_noexist_products_table td.tcontent {                border-bottom:1px solid #ddd;            }        ");    }        private function JavascriptAutocomplete()    {        $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_0').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=autocomplete_inventory_lookup',                minChars        : 0,    // how many characters tot ype before starting function call                selectFirst     : true,                autoFocus       : true,                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_0" ).val( ui.item.label );                    $( "#FORM_temp_1" ).val( ui.item.barcode );                 // store Barcode                    $( "#FORM_temp_2" ).val( ui.item.sku );                     // store APDM SKU                    $( "#FORM_temp_4" ).val( ui.item.description );             // store Description                         return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "<br>" + item.description + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        private function JavascriptCreateTable()    {        $this->ScriptJSONTableGeneric();                                // Add in the generic code held in the BaseClass        $this->ScriptCalculatePrice();                                  // Add in the generic code held in the BaseClass                $script = <<<SCRIPT                    // ===== USER DEFINED VARIABLES =====            var targetTextID        = "FORM_autotable_holder";          // defines hidden textarea that will hold the text array            var targetTableDivID    = "autotable_table_display";        // defines the div that wraps the created table            var requiredFieldArray  = ["FORM_temp_1","FORM_temp_5"];            var headerText          = "{$this->Header_Row}";                        var fieldQty            = "FORM_temp_5";                    // In form - field holding quantity            var priceEach           = "FORM_temp_6";                    // In form - field for price each            var priceTotal          = "FORM_temp_7";                    // In form - field for price total                                    function formTableRow() {                var delimiter       = "|";                var barcode         = $("#FORM_temp_1").val();                var sku             = $("#FORM_temp_2").val();                var description     = $("#FORM_temp_4").val();                var qty             = $("#FORM_temp_5").val();                var priceEach       = $("#FORM_temp_6").val();                var priceTotal      = $("#FORM_temp_7").val();                                // ----- create the string that will be added to table.                // ----- no starting or ending delimiter                // ----- action buttons will be added by other function                var output = barcode + delimiter + sku + delimiter + description + delimiter + qty + delimiter + priceEach + delimiter + priceTotal;                return output;            }                        function clearDataTextboxes() {                // -- clear the textboxes used to search on table data                $("#FORM_temp_0").val('');                $("#FORM_temp_1").val('');                $("#FORM_temp_2").val('');                $("#FORM_temp_4").val('');                $("#FORM_temp_5").val('');                $("#FORM_temp_6").val('');                $("#FORM_temp_7").val('');            }            SCRIPT;        AddScript($script);                AddScriptOnReady("            // -- call table creation function on load            // -- rebuilds table after coming back from form errors            var targetText          = $('#' + targetTextID);        // defines hidden textarea that will hold the text array            var targetTableDiv      = $('#' + targetTableDivID);    // defines the div that wraps the created table            createTableFromTextbox(targetText, targetTableDiv);        ");    }        public function GetLockedStatus($ID)    {        // ----- determine if sales order shold be locked        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_sales_order_sent",            'keys'      => "*",            'where'     => "inventory_sales_orders_id='{$ID}' AND active=1",        ));        $this->EchoQuery();                $locked = ($records) ? true : false;                return $locked;    }        public function GetExistingRecords($ID)    {        // ----- get all records from the database        $so_number = $this->GetSalesOrderNumberFromID($this->Edit_Id);        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_sales_order_lines",            'keys'      => "inventory_sales_order_lines.*, inventory_products.description, inventory_products.retailer_code",            'where'     => "inventory_sales_orders_id='{$ID}' AND `inventory_sales_order_lines`.`active`=1",            'joins'     => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_sales_order_lines`.`barcode`",        ));        $this->EchoQuery();                // ----- format records for output        $count = 1;        $table = $this->Header_Row . "\n";        foreach ($records as $record) {            $del            = ($this->Locked) ? "LOCKED" : "<div class='button_delete' id='row_1' onclick='tableDeleteRow(\" row_{$count} \")'>X</div>";            $price_total    = money_format("%n", $record['price_total']);            $price_each     = money_format("%n", ($record['price_total'] / $record['quantity']));                        $table .= "{$record['barcode']}|{$record['retailer_code']}|{$record['description']}|{$record['quantity']}|{$price_each}|{$price_total}|{$del}\n";            $count++;        }        		// ----- put formatted records into POST array and add javascript to add extra needed line break        $_POST['FORM_autotable_holder'] = $table;        AddScriptOnReady('$("#FORM_autotable_holder").val($("#FORM_autotable_holder").val() + "\n");');    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                $this->AddScript();                // ----- if editing record - need to get the records from database and put on the page        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                        $this->Inventory_Sales_Orders_ID  	= $this->Edit_Id;            $so_number 							= $this->GetSalesOrderNumberFromID($this->Inventory_Sales_Orders_ID);            $this->Locked 						= $this->GetLockedStatus($so_number);            $this->GetExistingRecords($this->Inventory_Sales_Orders_ID);            $this->Locked = false;            if ($this->Locked) {                //echo "<h2>SALES ORDER IS LOCKED</h2>";                AddScriptOnReady("$('#FORM_so_number').val('{$so_number}');");                AddScriptOnReady("$('#temp_sonumber').html('{$so_number}');");                AddScriptOnReady("$('#FORM_temp_locked').val(1);");                                            }        }                // ----- put the universal ID on the screen        AddScriptOnReady("$('#temp_uid').html($('#FORM_universal_id').val());");                        // ----- Javascript Functionality -----        $this->JavascriptDisplaySessionMessage();   // Display alert messages        $this->JavascriptAutocomplete();            // Javascript for autocomplete functionality        $this->JavascriptCreateTable();             // Javascript for creating table from array of data        $this->JavascriptToggleFunctionality();     // Javascript for taggling show/hide a div area                        $this->JavascriptDatepickerFunctionality(array('FORM_date_created','FORM_commission_date','FORM_date_ship_request','FORM_date_ship_actual','FORM_date_ship_delivery_request','FORM_date_invoice_sent','FORM_date_purchase_order'));        $this->JavascriptDisableFunctionality(array('FORM_temp_1','FORM_temp_2','FORM_temp_4'));        $this->JavascriptInputNoBorder(array('FORM_temp_1','FORM_temp_2','FORM_temp_4'));                        $btn_add                    = MakeButton('positive', 'ADD', '', '', 'btn_add', "addDataToTable('FORM_temp_0')", 'button', 'btn_add');        $btn_clear                  = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');        $btn_unniversal_id          = MakeButton('positive', 'Get Next Universal ID', '', '', 'btn_uid', "getUniversalId('FORM_universal_id')", 'button', 'btn_uid');        $adding                     = ($this->Action == 'ADD') ? true : false;                  // hold edit status        $pipeline_status_list       = $this->GetSetting('sales_order_pipeline_status');         // get values from inventory_settings table        $production_status_list     = $this->GetSetting('sales_order_production_status');       // get values from inventory_settings table        $finance_status_list        = $this->GetSetting('sales_order_finance_status');          // get values from inventory_settings table        $order_type_list            = $this->GetSetting('sales_order_type');                    // get values from inventory_settings table        $demo_status_list           = $this->GetSetting('sales_order_demo_status');             // get values from inventory_settings table        $rma_status_list            = $this->GetSetting('sales_order_rma_status');              // get values from inventory_settings table                        // ----- CREATE THE QUICK-ADD TABLE -----        $quickadd_records   = $this->GetRecordsForQuickAddTable_FromDatabase();     // get quickadd fields from database        $quickadd           = $this->CreateQuickAddTable($quickadd_records);        // create the table        $quickadd_records   = $this->GetRecordsForQuickAddTable_FromRemaining();    // get quickadd fields from pipeline record        $quickadd          .= '</br>';        $quickadd          .= '<div id="quickadd_noexist_products_header">ADDITIONAL PIPELINE ITEMS</div>';        $quickadd          .= '<div id="quickadd_noexist_products_subheader">(exist in record but not active quick-add items)</div>';        $quickadd          .= $this->CreateQuickAddTable($quickadd_records, true);  // create the table        $this->PopulateQuickAddTable();                                             // populate quickadd table with values                        $quickadd_assembly = $this->GetSalesOrderAssemblies();                        // ----- GET NOTES FOR SALES ORDER (ONLY IF EDITING)        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {            $notes_area = $this->LoadNotesArea();           // get notes for sales order        } else {            // don't load notes area if we're submitting an add/edit record            $notes_area = "<div style='color:red;'>UNABLE TO ADD NOTES. CAN ONLY ADD NOTES WHEN EDITING AN EXISTING RECORD</div>";        }                                // ----- determine what boxes to show/hide -----        $show_quickadd              = ($this->Flags['quickadd'])    ? true : false;        $show_so_lines              = ($this->Flags['lines'])       ? true : false;        $show_commission            = ($this->Flags['commission'])  ? true : false;        $show_reference             = ($this->Flags['reference'])   ? true : false;        $show_notes                 = ($this->Flags['notes'])       ? true : false;        $show_so_information        = ($this->Flags['information']) ? true : false;        $show_contact_information   = ($this->Flags['information']) ? true : false;        $show_checklist             = ($this->Flags['checklist'])   ? true : false;        $access                     = $this->Flags['access'];                           // (admin | marketing | production)        $show_files                 = true;                        // ----- GET FILES FOR SALES ORDER (ONLY IF EDITING)        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {            $this->UID          = Post('FORM_universal_id');            $files_area_upload  = ($show_files) ? $this->LoadFilesUploadArea() : '';           // get files for sales order            $files_area         = ($show_files) ? $this->LoadFilesArea() : '';           // get files for sales order        } else {            // don't load notes area if we're submitting an add/edit record            $files_area_upload  = "";            $files_area         = "<div style='color:red;'>UNABLE TO ADD FILES. CAN ONLY ADD FILES WHEN EDITING AN EXISTING RECORD</div>";        }                                        if (!$this->Locked) {            $base_array = array(                "form|{$this->Action_Link}|post|db_edit_form",                'hidden|inventory_sales_orders_id',                'hidden|universal_id',                'hidden|temp_locked',                                                //'code|<div class="form_section_header" style="background-color:pink;">SALES ORDER DEV</div>',                                "code|<div style='font-size:16px; color:blue; padding:5px; background-color:#ccc;'>Universal ID: <span id='temp_uid'></span></div><br />",                                              // ----- form width div -----				"code|<div style='width:{$this->Window_Width}px; border:0px solid blue;'>&nbsp;</div>",                                'code|<div style="display:none;">',                    'textarea|Temp 3|autotable_holder|N|60|4',                'code|</div>',            );                                                                        if ($show_so_information) {                $temp_array = array(                    // ========== GENERAL SALES ORDER DETAILS ==========                    "code|<div class='shadow form_section_wrapper'>",                        'code|<div class="form_section_header">SALES ORDER INFORMATION <a class="toggle" href="#" id="menu_group_soi"><span class="updown updown_down">&nbsp;</span></a></div>',                        'code|<div class="menu_group" style="display:_none;" id="div_menu_group_soi">',                                                        'text|Customer|customer|N|60|255',                            'text|Description|description|N|60|255',                                                                                    "code|</br></br>",                            "code|<div style='padding-left:10px;'><table><tr>",                            "code|<td valign='top' style='padding-right:20px;'>",                                                                "code|<div style='border:1px solid black; padding:5px;'>",                                'text|Quote Number|quote_number|N|20|20',                                'text|Customer PO #|customer_po_number|N|20|20',                                'text|SO Number|so_number|N|20|20',                                'text|Invoice Number|invoice_number|N|20|20',                                'text|RMA Number|rma_number|N|20|20',                                'code|</div>',                                                                                                'code|</br></br>',                                                                                                "code|<div style='border:1px solid black; padding:5px;'>",                                "select|Order Type|order_type|N||{$order_type_list}",                                "select|Pipeline Status|pipeline_status|N||{$pipeline_status_list}",                                "select|Production Status|production_status|N||{$production_status_list}",                                "select|Finance Status|finance_status|N||{$finance_status_list}",                                "select|Demo Status|demo_status|N||{$demo_status_list}",                                "select|RMA Status|rma_status|N||{$rma_status_list}",                                'checkbox|Post Production Complete|status_post_production_complete||1|0',                                'checkbox|Hide From Pipeline|status_hide_from_pipeline||1|0',                                'code|</div>',                                                                                                                            "code|</td>",                            "code|<td valign='top' style='padding-right:20px;'>",                                "code|<div style='border:1px solid black; padding:5px;'>",                                'text|Created Date|date_created|N|20|20',                                'text|Purchase Order Date|date_purchase_order|N|20|20',                                'text|Delivery Request Date|date_ship_delivery_request|N|20|20',                                'text|Planned Ship Date|date_ship_request|N|20|20',                                'text|Actual Ship Date|date_ship_actual|N|20|20',                                'text|Invoice Sent Date|date_invoice_sent|N|20|20',                                'code|</div>',                                'code|</br></br>',                                                                "code|<div style='border:1px solid black; padding:5px;'>",                                "titletemplate|{$this->title_template}",                                "infotemplate|{$this->info_template}",                                'textarea|Ship Tracking #s:|shipping_tracking_numbers|N|30|3',                                "titletemplate|STD",                                "infotemplate|STD",                                'code|</div>',                            "code|</td>",                            "code|</tr>",                            "code|</table></div>",                                                        #'code|<br />',                            #'text|Shipping Cost|cost_shipping|N|20|20',                            #'text|Other Cost|cost_other|N|20|20',                                                                                    //'textarea|Notes|notes|N|35|2',                        'code|</div>',                    'code|</div>',                    'code|<br /><br />',                );                $base_array = array_merge ($base_array, $temp_array);                        }                                    // ========== CONTACT INFORMATION ==========            if ($show_contact_information) {                $temp_array = array(                    // ========== GENERAL SALES ORDER DETAILS ==========                    "code|<div class='shadow form_section_wrapper'>",                        'code|<div class="form_section_header">CONTACT INFORMATION <a class="toggle" href="#" id="menu_group_ci"><span class="updown">&nbsp;</span></a></div>',                        'code|<div class="menu_group" style="display:none;" id="div_menu_group_ci">',                                                                                    "titletemplate|{$this->title_template}",                            "infotemplate|{$this->info_template}",                                                        "code|<div style='padding-left:10px;'><table align='center'><tr>",                            "code|<td valign='top' style='padding-right:20px;'>",                                'textarea|User Contact|contact_user|N|30|6',                'code|<br />',                                'text|Email|contact_user_email|N|35|255',                   'code|<br />',                                'text|Phone|contact_user_phone|N|35|255',                   'code|<br />',                            "code|</td>",                            "code|<td valign='top' style='padding-right:20px;'>",                                'textarea|Billing Contact|contact_billing|N|30|6',          'code|<br />',                                'text|Email|contact_billing_email|N|35|255',                'code|<br />',                                'text|Phone|contact_billing_phone|N|35|255',                'code|<br />',                                'textarea|Billing Details|billing_details|N|30|3',                            "code|</td>",                            "code|<td valign='top'>",                                'textarea|Shipping Contact|contact_shipping|N|30|6',        'code|<br />',                                'text|Email|contact_shipping_email|N|35|255',               'code|<br />',                                'text|Phone|contact_shipping_phone|N|35|255',               'code|<br />',                                'textarea|Shipping Details|shipping_details|N|30|3',                            "code|</td>",                            "code|</tr>",                            "code|<tr>",                            "code|<td valign='top' style='padding-right:20px;' colspan='3'>",                                                            "code|</td>",                            "code|</tr>",                            "code|</table></div>",                                                        "titletemplate|STD",                            "infotemplate|STD",                                                    'code|</div>',                    'code|</div>',                    'code|<br /><br />',                );                $base_array = array_merge ($base_array, $temp_array);                        }                                    // ========== PIPELINE QUICK ADD ==========            if ($show_quickadd) {                $temp_array = array(                    "code|<div class='shadow form_section_wrapper'>",                        'code|<div class="form_section_header">PIPELINE QUICKADD <a class="toggle" href="#" id="menu_group_pipeline"><span class="updown">&nbsp;</span></a></div>',                        'code|<div class="menu_group" style="display:none;" id="div_menu_group_pipeline">',                           "code|{$quickadd_assembly}",                           "code|</br><hr></br>",                           "code|{$quickadd}",                        'code|</div>',                    'code|</div>',                    'code|<br /><br />',                );                $base_array = array_merge ($base_array, $temp_array);               }                                    // ========== SALES ORDER LINES ==========            if ($show_so_lines) {                $temp_array = array(                    "code|<div class='shadow form_section_wrapper'>",                        'code|<div class="form_section_header">SALES ORDER - SYSTEM <a class="toggle" href="#" id="menu_group_z"><span class="updown">&nbsp;</span></a></div>',                        'code|<div class="menu_group" style="display:none;" id="div_menu_group_z">',                                                        "text|Search|temp_0|N|60|100",                            "text|Barcode|temp_1|N|60|100",                            "text|APDM SKU|temp_2|N|60|100",                            "text|Description|temp_4|N|60|100",                                                        "titletemplate|{$this->title_template}",                            "infotemplate|{$this->info_template}",                                                        "code|<div style='padding-left:120px;'><table><tr>",                            "code|<td>",                                "text|QTY|temp_5|N|10|100",                            "code|</td>",                            "code|<td>",                                "text|Price (ea)|temp_6|N|10|100",                            "code|</td>",                            "code|<td>",                                "text|Price (total)|temp_7|N|10|100",                            "code|</td>",                            "code|</tr></table></div>",                                                        "titletemplate|STD",                            "infotemplate|STD",                                                        "info||$btn_add &nbsp;&nbsp;&nbsp; $btn_clear",                                                                                    'code|<br /><br />',                            "code|<div id='autotable_table_display'></div>",                            'code|<br /><br />',                                                    "code|</div>",                    "code|</div>",                    'code|<br /><br />',                );                $base_array = array_merge ($base_array, $temp_array);               }                                    // ========== SALES COMMISSION ==========            if ($show_commission) {                $temp_array = array(                    "code|<div class='shadow form_section_wrapper'>",                        'code|<div class="form_section_header">SALES COMMISSION <a class="toggle" href="#" id="menu_group_a"><span class="updown">&nbsp;</span></a></div>',                        'code|<div class="menu_group" style="display:none;" id="div_menu_group_a">',                            'checkbox|Paid|commission_paid||1|0',                            'text|Date Paid|commission_date|N|20|20',                            'text|Amount|commission_amount|N|20|20',                            'text|COGS Calculated|commission_cogs|N|20|20',                            'textarea|Notes|commission_notes|N|60|2',                        'code|</div>',                    'code|</div>',                    'code|<br /><br />',                );                $base_array = array_merge ($base_array, $temp_array);               }                                    // ========== REFERENCE INFORMATION ==========            if ($show_reference) {                $temp_array = array(                    "code|<div class='shadow form_section_wrapper'>",                        'code|<div class="form_section_header">REFERENCE INFORMATION <a class="toggle" href="#" id="menu_group_b"><span class="updown">&nbsp;</span></a></div>',                        'code|<div class="menu_group" style="display:none;" id="div_menu_group_b">',                            'text|Ref. Document|ref_document_number|N|60|1024',                            'text|Ref. Document URL|ref_document_url|N|60|255',                        'code|</div>',                    'code|</div>',                    'code|<br /><br />',                );                $base_array = array_merge ($base_array, $temp_array);               }                                    // ========== NOTES ==========            if ($show_notes) {                $temp_array = array(                    "code|<div class='shadow form_section_wrapper'>",                        'code|<div class="form_section_header">NOTES ('.$this->Existing_Notes_Count.') <a class="toggle" href="#" id="menu_group_notes"><span class="updown updown_down">&nbsp;</span></a></div>',                        'code|<div class="menu_group" style="display:_none;" id="div_menu_group_notes">',                                                        "code|<div style='padding:10px;' id='{$this->Note_Area_Wrapper_Id}'>",                            "code|{$notes_area}",                            "code|</div>",                                                    'code|</div>',                    'code|</div>',                    'code|</br></br>',                );                $base_array = array_merge ($base_array, $temp_array);               }                                    // ========== FILES ==========            if ($show_files) {                $temp_array = array(                    "code|<div class='shadow form_section_wrapper'>",                        'code|<div class="form_section_header">FILES ('.$this->Existing_Files_Count.') <a class="toggle" href="#" id="menu_group_files"><span class="updown">&nbsp;</span></a></div>',                        'code|<div class="menu_group" style="display:none;" id="div_menu_group_files">',                                                        "code|{$files_area_upload}",                                                        "code|<div style='padding:10px;' id='{$this->Files_Area_Wrapper_Id}'>",                            "code|{$files_area}",                            "code|</div>",                                                    'code|</div>',                    'code|</div>',                    'code|</br></br>',                );                $base_array = array_merge ($base_array, $temp_array);               }                        // ========== CHECKLIST ==========            if ($show_checklist) {                            }                    } else {                        /*            $base_array = array(                "form|$this->Action_Link|post|db_edit_form",                				#'text|ID|inventory_sales_orders_id|N|20|255',                'hidden|inventory_sales_orders_id',                'hidden|temp_locked',				                "code|<div style='font-size:16px; color:blue; padding:5px; background-color:#ccc;'>SO Number: <span id='temp_sonumber'></span></div><br />",                "code|<div class='shadow form_section_wrapper_error'>",                    "code|SALES ORDER IS LOCKED BECAUSE INVENTORY HAS ALREADY BEEN SENT. TO MAKE MODIFICATION YOU MUST DELETE THE SALES ORDER - WHICH WILL UNSEND ALL ITEMS.",                "code|</div>",                'code|<br /><br />',                                            );            */                    }                if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {                /* ======================== PSEUDOCODE ========================                Check each inventory item to make sure they still exist (superfulous but do it)        Verify the PO number is unique        For each line set the sales line TOTAL (derived from qty and each price)                Start Transaction        Create the Sales Order entry        Create each Sales Order LINE entry        End Transaction                Clear out the entire array        Put a success message on the screen        Re-direct to the entry page                Note: This bypasses normal action of BaseClass doing the entry into database - but this is needed        because its a multi-table entry		        =============================================================== */                $delimiter              	    = '|';        $table_holder           	    = 'autotable_holder';        $field_kickout_string   	    = 'temp_';        $lines_array_add        	    = array();                                      // will hold lines being added        $lines_array_delete     	    = array();                                      // will hold lines being deleted        $passed                 	    = true;                                         // holds check-passed status        $adding                 	    = ($this->Action == 'ADD') ? true : false;      // hold edit status        $locked                 	    = (isset($FormArray['temp_locked']) && ($FormArray['temp_locked'] == 1)) ? true : false;        $inventory_sales_orders_id      = $FormArray['inventory_sales_orders_id'];                $FormArray['pipeline_array']    = '';           // initialize variable        $have_pipeline_array            = false;        // initialize variable                        // ----- create a universal ID if one does not already exist        if ($FormArray['universal_id'] == '') {            $FormArray['universal_id'] = $this->MakeUniversalId();        }                        // =========================        // ----- Handle the pipeline        $field_start    = $this->Pipeline_Field_Start;        $pipeline_arr   = array();                      // initialize the variable        foreach ($_POST as $field => $value) {            //echo "</br>$field => $value";            $pos = strpos($field, $field_start);            if ($pos !== false) {                                $parts      = explode("_", $field);                $type       = $parts[1];                $barcode    = $parts[2];                                switch ($type) {                    case 'qty':                        $pipeline_arr[$barcode]['quantity'] = $value;                    break;                    case 'price':                        $pipeline_arr[$barcode]['price'] = $value;                    break;                }            }        }                // ----- remove blank entries         foreach ($pipeline_arr as $barcode => $arr) {            if ($arr['quantity'] == '' && $arr['price'] == '') {                unset($pipeline_arr[$barcode]);            }        }                //$have_pipeline_array = ($value > 0) ? true : $have_pipeline_array;      // don't error if pipeline qty exists        $have_pipeline_array = (count($pipeline_arr) > 0) ? true : false;                $FormArray['pipeline_array'] = serialize($pipeline_arr);    // store the pipeline array for database        unset($pipeline_arr);                                       // memory clean-up        #return $FormArray;        #exit();        // =========================                                // ----- if locked - the only thing we can do is modify the form        if ($locked) {            # ----- Create the Sales Order entry            $db_record = array(                'order_type'            => $FormArray['order_type'],                'description'           => $FormArray['description'],                'universal_id'          => $FormArray['universal_id'],                'so_number'             => $FormArray['so_number'],                'quote_number'             => $FormArray['quote_number'],                'invoice_number'             => $FormArray['invoice_number'],                'rma_number'             => $FormArray['rma_number'],                                'status_post_production_complete'   => $FormArray['status_post_production_complete'],                'customer_po_number'                => $FormArray['customer_po_number'],                'date_invoice_sent'                 => $FormArray['date_invoice_sent'],                'shipping_tracking_numbers'         => $FormArray['shipping_tracking_numbers'],                'demo_status'                       => $FormArray['demo_status'],                'rma_status'                        => $FormArray['rma_status'],                                'ref_document_url'      => $FormArray['ref_document_url'],                'ref_document_number'   => $FormArray['ref_document_number'],                'date_created'          => $FormArray['date_created'],                'date_ship_request'     => $FormArray['date_ship_request'],                'date_ship_delivery_request'    => $FormArray['date_ship_delivery_request'],                'date_purchase_order'           => $FormArray['date_purchase_order'],                'date_ship_actual'      => $FormArray['date_ship_actual'],                'notes'                 => $FormArray['notes'],                                'pipeline_status'       => $FormArray['pipeline_status'],                'production_status'     => $FormArray['production_status'],                'finance_status'        => $FormArray['finance_status'],                                'contact_user'              => $FormArray['contact_user'],                'contact_user_email'        => $FormArray['contact_user_email'],                'contact_user_phone'        => $FormArray['contact_user_phone'],                'contact_billing'           => $FormArray['contact_billing'],                'contact_billing_email'     => $FormArray['contact_billing_email'],                'contact_billing_phone'     => $FormArray['contact_billing_phone'],                'contact_shipping'          => $FormArray['contact_shipping'],                'contact_shipping_email'    => $FormArray['contact_shipping_email'],                'contact_shipping_phone'    => $FormArray['contact_shipping_phone'],                                'shipping_details'      => $FormArray['shipping_details'],                'billing_details'       => $FormArray['billing_details'],                                                                'status_hide_from_pipeline'     => $FormArray['status_hide_from_pipeline'],            );                        $result = $this->SQL->UpdateRecord(array(                'table'         => 'inventory_sales_orders',                'key_values'    => $this->SQL->KeyValues($db_record),                'where'         => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}' AND `active`=1",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__ . '_z');                                    if ($result) {                // ----- Do A force redirect to bypass BaseClass further procesing this                $link = $this->getPageURL();                $_SESSION['alert_message'] = "SALES ORDER UPDATED SUCESSFULLY";                header("Location: {$link}");            } else {                echo "ERROR :: Unable to update sales order.";                exit();            }        }                                // ----- remove any temp fields from the array so they don't get processed        // ----- NOTE :: WASTED STEP IF WE BLOW OUT ARRAY AT END OF FUNCTION        foreach ($FormArray as $field => $value) {            //echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                //echo ArrayToStr($_POST);        //exit();                                        // ----- check for unique SO #        if ($adding) {            $unique = $this->SQL->IsUnique('inventory_sales_orders', 'so_number', $FormArray['so_number'], 'active=1');            if (!$unique) {                $this->Error .= "<br />ERROR :: Sales Order number is not unique. SO Number: {$FormArray['so_number']}";                $passed = false;            }        }                                        // ----- get the main table holder value to process        $table = $FormArray[$table_holder];        if ($table) {            $lines = explode("\n", $table);            $header_row = true;                        foreach ($lines as $key => $line) {                if ($line) {                   if ($header_row == false) {                        $parts          = explode($delimiter, $line);                        $barcode        = trim($parts[0]);                        $sku            = trim($parts[1]);                        $description    = trim($parts[2]);                        $quantity       = trim($parts[3]);                        $price_each     = trim($parts[4]);                        $price_total    = trim($parts[5]);                        $price          = ($price_total != '') ? $price_total : ($quantity * $price_each);                                                // ----- check that inventory still exists                        $exist = $this->StatusInventoryItemExist($barcode);                                                if (!$exist) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        } else {                                                        $lines_array_add[] = array(                                'so_number'      => $FormArray['so_number'],                                'barcode'        => $barcode,                                'quantity'       => $quantity,                                'price_total'    => $price,                                'status'         => 'open',                            );                                                    }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                                //$this->Error .= "<br />PURPOSFUL HALTING ERROR";                                                // ----- verify if any good lines made it to processing - we don't want to allow a 0-line entry        if (!$this->Allow_Empty_Sales_Orderd) {            if (!$lines_array_add && !$have_pipeline_array) {                $passed = false;                $this->Error .= "THIS SALES ORDER HAS NO VALID LINES TO PROCESS";            }        }        //exit();//$passed = false;                                // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed) {                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                                                            // ========== CREATE A 'RECORD CHANGED' NOTE ==========                        // ----- get existing values to determine if a chnage has been made            $record = $this->SQL->GetRecord(array(                'table' => $this->Table,                'keys'  => "pipeline_status, production_status, finance_status, order_type, pipeline_array, date_ship_delivery_request, date_ship_request, date_invoice_sent, demo_status, rma_status",                'where' => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}' AND `active`=1",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);                        // ----- crete the note (if applicable)            $special_notes = '';            $special_notes .= ($record['pipeline_status'] != $FormArray['pipeline_status'])                         ? "Pipeline status changed from <b>{$record['pipeline_status']}</b> to <b>{$FormArray['pipeline_status']}</b>.</br>" : "";            $special_notes .= ($record['production_status'] != $FormArray['production_status'])                     ? "Production status changed from <b>{$record['production_status']}</b> to <b>{$FormArray['production_status']}</b>.</br>" : "";            $special_notes .= ($record['finance_status'] != $FormArray['finance_status'])                           ? "Finance status changed from <b>{$record['finance_status']}</b> to <b>{$FormArray['finance_status']}</b>.</br>" : "";            $special_notes .= ($record['order_type'] != $FormArray['order_type'])                                   ? "Order status changed from <b>{$record['order_type']}</b> to <b>{$FormArray['order_type']}</b>.</br>" : "";            $special_notes .= ($record['demo_status'] != $FormArray['demo_status'])                                 ? "Demo status changed from <b>{$record['demo_status']}</b> to <b>{$FormArray['demo_status']}</b>.</br>" : "";            $special_notes .= ($record['rma_status'] != $FormArray['rma_status'])                                   ? "RMA status changed from <b>{$record['rma_status']}</b> to <b>{$FormArray['rma_status']}</b>.</br>" : "";            $special_notes .= ($record['pipeline_array'] != $FormArray['pipeline_array'])                           ? "Quick Add products changed.</br>" : "";            $special_notes .= ($record['date_ship_delivery_request'] != $FormArray['date_ship_delivery_request'])   ? "Requested ship delivery date changed.</br>" : "";            $special_notes .= ($record['date_ship_request'] != $FormArray['date_ship_request'])                     ? "Planned ship date changed.</br>" : "";            $special_notes .= ($record['date_invoice_sent'] != $FormArray['date_invoice_sent'])                     ? "Invoice Sent date changed.</br>" : "";                                    // ------ add the note            if ($special_notes != '') {                $db_record = array(                    'inventory_sales_orders_id' => $inventory_sales_orders_id,                    'user'                      => "{$_SESSION['USER_LOGIN']['LOGIN_RECORD']['first_name']} {$_SESSION['USER_LOGIN']['LOGIN_RECORD']['last_name']}",                    'date'                      => date('Y-m-d'),                    'note'                      => $special_notes,                );                                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_sales_order_notes',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $passed = (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__, true);            }                                                                        # ----- Create the Sales Order entry            $db_record = array(                'order_type'            => $FormArray['order_type'],                'description'           => $FormArray['description'],                'universal_id'          => $FormArray['universal_id'],                'so_number'             => $FormArray['so_number'],                'quote_number'             => $FormArray['quote_number'],                'invoice_number'             => $FormArray['invoice_number'],                'rma_number'             => $FormArray['rma_number'],                                'status_post_production_complete'   => $FormArray['status_post_production_complete'],                'customer_po_number'                => $FormArray['customer_po_number'],                'date_invoice_sent'                 => $FormArray['date_invoice_sent'],                'shipping_tracking_numbers'         => $FormArray['shipping_tracking_numbers'],                'demo_status'                       => $FormArray['demo_status'],                'rma_status'                        => $FormArray['rma_status'],                                                'customer'              => $FormArray['customer'],                'ref_document_url'      => $FormArray['ref_document_url'],                'ref_document_number'   => $FormArray['ref_document_number'],                'date_created'          => $FormArray['date_created'],                'date_ship_request'     => $FormArray['date_ship_request'],                'date_ship_delivery_request'    => $FormArray['date_ship_delivery_request'],                'date_purchase_order'           => $FormArray['date_purchase_order'],                'date_ship_actual'      => $FormArray['date_ship_actual'],                //'cost_shipping'         => $FormArray['cost_shipping'],                //'cost_other'            => $FormArray['cost_other'],                //'notes'                 => $FormArray['notes'],                'pipeline_array'        => $FormArray['pipeline_array'],                                'pipeline_status'       => $FormArray['pipeline_status'],                'production_status'     => $FormArray['production_status'],                'finance_status'        => $FormArray['finance_status'],                                'contact_user'              => $FormArray['contact_user'],                'contact_user_email'        => $FormArray['contact_user_email'],                'contact_user_phone'        => $FormArray['contact_user_phone'],                'contact_billing'           => $FormArray['contact_billing'],                'contact_billing_email'     => $FormArray['contact_billing_email'],                'contact_billing_phone'     => $FormArray['contact_billing_phone'],                'contact_shipping'          => $FormArray['contact_shipping'],                'contact_shipping_email'    => $FormArray['contact_shipping_email'],                'contact_shipping_phone'    => $FormArray['contact_shipping_phone'],                                'shipping_details'      => $FormArray['shipping_details'],                'billing_details'       => $FormArray['billing_details'],                                'status_hide_from_pipeline'     => $FormArray['status_hide_from_pipeline'],            );                        if ($adding) {                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_sales_orders',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $inventory_sales_orders_id   	= $this->SQL->Last_Insert_Id;                $passed     					= (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__ . '_a', true);                            } else {                $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_sales_orders',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}' AND `active`=1",                ));                $this->SQL->EchoQuery($this->Classname, __FUNCTION__ . '_b', true);                $passed = (!$result) ? false : $passed;            }                                                # ----- Delete old Sales Order LINES entry            // ---- currently this is the fastest way to deal with editing lines - because we don't need            //      to track the IDs in the on-screen table. Just deactivate lines and let them be added again.            if (!$adding) {                $db_record = array(                    'active'            => 0,                );                                $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_sales_order_lines',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}' AND `active`=1",                ));                $this->SQL->EchoQuery($this->Classname, __FUNCTION__ . '_c', true);                $passed = (!$result) ? false : $passed;            }                                    # ----- Create the Sales Order LINES entry            foreach ($lines_array_add as $line) {                $db_record = array(                    'inventory_sales_orders_id'     => $inventory_sales_orders_id,                    'barcode'           			=> $line['barcode'],                    'quantity'          			=> $line['quantity'],                    'price_total'       			=> $line['price_total']                );                                $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_sales_order_lines',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $this->SQL->EchoQuery($this->Classname, __FUNCTION__ . '_d', true);                $passed = (!$result) ? false : $passed;            }                                                            #exit();                                    # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                // ----- Do A force redirect to bypass BaseClass further procesing this                #$link = $this->getPageURL();                //$_SESSION['alert_message'] = ($adding) ? "SALES ORDER ADDED SUCESSFULLY" : "SALES ORDER UPDATED SUCESSFULLY";                #header("Location: {$link}");                                //exit();                $this->SuccessfulAddRecord();                                //$flash = (!empty($this->Form_Array[$this->Flash_Field]))? $this->Form_Array[$this->Flash_Field] : $id;                //$this->SuccessfulEditRecord($flash, $id, $id_field);                            } else {                                $this->Error .= "UNABLE TO PROCESS DATABASE TRANSACTIONS";                // ----- return form array to process any legitimate errors                return $FormArray;            }        } else {                        #echo "ERROR HERE";            #exit();                        // ----- return form array to process any legitimate errors            return $FormArray;        }    }    	public function DeleteSalesOrder()    {        /* ===== P-CODE =================                * -- Don't allow if inventory has been received - force person to un-receive inventory first                1. Delete the master record        2. Delete all the SO lines                ============================== */                if ($this->Inventory_Sales_Orders_ID) {                        $passed         = true; // initialize variable            $status         = $this->StatusPurchaseOrder(0, $this->Inventory_Sales_Orders_ID);            			// ----- Make sure the PO is totally open. If not - don't delete            if ($status != 'open') {                echo "Purchase order has recevied inventory - unreceive and try again.";                exit();            }                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                        // ----- de-activate the main record            $db_record  = array('active' => 0);            $where      = "`inventory_sales_orders_id`='{$this->Inventory_Sales_Orders_ID}'";            $result     = $this->UpdateRecordLoc('inventory_sales_orders', $db_record, $where);            $passed     = (!$result) ? false : $passed;            $this->EchoQuery();                        // ----- de-activate the sub-line records            $db_record  = array('active' => 0);            $where      = "`inventory_sales_orders_id`='{$this->Inventory_Sales_Orders_ID}'";            $result     = $this->UpdateRecordLoc('inventory_sales_order_lines', $db_record, $where);            $passed     = (!$result) ? false : $passed;            $this->EchoQuery();                        # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                echo "<br /><br /><h2>SUCCESSFULLY DELETED - REFRESH PARENT TABLE</h2>";            }                    } else {            echo "NO Inventory_Sales_Orders_ID passed in.";        }    }	    public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/class_execute';                				$eq_fulfill             = EncryptQuery("class=Inventory_InventorySalesOrderFulfill;v1={$id};");                $link_fulfill           = $CLASS_EXECUTE_LINK . '?eq=' . $eq_fulfill;                $script_fulfill         = "top.parent.appformCreate('Window', '{$link_fulfill}', 'apps'); return false;";                                $eq_cogs                = EncryptQuery("class=Inventory_Valuation_SalesOrderCalculateCOGS;v1={$id};");                $link_cogs              = $CLASS_EXECUTE_LINK . '?eq=' . $eq_cogs;                $script_cogs            = "top.parent.appformCreate('Window', '{$link_cogs}', 'apps'); return false;";                				$eq_delete              = EncryptQuery("class=Inventory_InventorySalesOrderPlace;v1={$id};PARENT_DIALOGID={$this->Dialogid_Id}");                $link_delete            = $CLASS_EXECUTE_LINK . '?eq=' . $eq_delete . '&action=delete';                $script_delete          = "ConfirmDeleteAndOpenWindow('{$link_delete}'); return false;";                                $eq_files               = EncryptQuery("class=Inventory_Uploadify_UploadFile;v1=salesorder;v2=0;v3={$id};PARENT_DIALOGID={$this->Dialogid_Id}");                $link_files             = $CLASS_EXECUTE_LINK . '?eq=' . $eq_files . '&action=';                $script_files           = "top.parent.appformCreate('Window', '{$link_files}', 'apps'); return false;";                                $this->Flags['files'] = 'true';                				// ----- determine which options to show to user                //$col_view       = ($this->Flags['view'] == 'false')   ? ''    : "<a href=`#` class=`row_view`       title=`View`            onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                				$col_edit       = ($this->Flags['edit'] == 'false')   ? ''    : "<a href=`#` class=`row_edit`       title=`Edit`            onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_receive    = ($this->Flags['print'] == 'false')  ? ''    : "<a href=`#` class=`row_receive`    title=`Ship Items`  	onclick=`{$script_fulfill}; return false;`></a>";                $col_cogs     	= ($this->Flags['cogs'] == 'false')   ? ''    : "<a href=`#` class=`row_dollarsign` title=`Calculate COGS`  onclick=`{$script_cogs}`></a>";                $col_delete     = ($this->Flags['delete'] == 'false') ? ''    : "<a href=`#` class=`row_delete`     title=`Delete`          onclick=`{$script_delete}`></a>";                $col_files      = ($this->Flags['files'] == 'false')  ? ''    : "<a href=`#` class=`row_files`      title=`Upload Files`    onclick=`{$script_files}`></a>";                                //<td align=`center`>{$col_files}</td>                                    // ----- output the options                $this->Edit_Links_Count = '5';                $this->Edit_Links = qqn("                    <td align=`center`>{$col_edit}</td>					<td align=`center`>{$col_receive}</td>                    <td align=`center`>{$col_cogs}</td>                    <td align=`center`>{$col_delete}</td>                    ");            break;                        case 'COGS':                $Obj_Cogs                               = new Inventory_Valuation_SalesOrderCalculateCOGS();                $Obj_Cogs->Method                       = 'average';                $Obj_Cogs->Inventory_Sales_Orders_ID    = $id;                $Obj_Cogs->Execute(true);                           // true means to return the output instead of echo it                                $val_sent       = money_format("%n", $Obj_Cogs->COGS_Calculated_Sent_Inventory);                $val_unsent     = money_format("%n", $Obj_Cogs->COGS_Calculated_Unsent_Inventory);                $val_method     = $Obj_Cogs->Pricing_Method_Used;                                #$val_sent = 'S';                #$val_unsent = 'US';                #$val_method = 'M';                                $value          = "<b>Sent:</b> {$val_sent}</br><b>Unsent:</b> {$val_unsent}</br><b>Method:</b> {$val_method}";                                unset($Obj_Cogs);    // memory cleanup            break;                        case 'active':                // convert the "ACTIVE" field to a status                $value = $this->StatusSalesOrder(0, $id);                                switch ($value) {                    case 'open':                        $td_options = "style=\"background-color:#b2ffb2;\"";                    break;                    case 'partial':                        $td_options = "style=\"background-color:#ffff80;\"";                    break;                    case 'closed':                        $td_options = "style=\"background-color:#ffcccc;\"";                    break;                }                               break;                        case 'date_ship_delivery_request':            case 'date_purchase_order':            case 'date_ship_actual':            case 'date_ship_request':                $value = ($value == '0000-00-00') ? '' : $value;            break;                                    case 'production_status':                $color = (isset($this->Production_Status_Color[$value])) ? $this->Production_Status_Color[$value] : '';                $td_options = "style=\"background-color:{$color};\"";            break;                        case 'pipeline_status':                $color = (isset($this->Pipeline_Status_Color[$value])) ? $this->Pipeline_Status_Color[$value] : '';                $td_options = "style=\"background-color:{$color};\"";            break;                        case 'finance_status':                $color = (isset($this->Pipeline_Finance_Color[$value])) ? $this->Pipeline_Finance_Color[$value] : '';                $td_options = "style=\"background-color:{$color};\"";            break;                                }    }            private function GetRecordsForQuickAddTable_FromDatabase()    {        // ----- CREATE QUICK-ADD AREA        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_products',            'keys'  => 'barcode, retailer_code, salesorder_quickadd_title',            'where' => "status_show_salesorder_quickadd=1 AND active=1",            'order' => "salesorder_quickadd_title ASC",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);        //$this->EchoVar('records', $records);                return $records;    }        private function GetRecordsForQuickAddTable_FromRemaining()    {        # FUNCTION :: Create array of records that are in the database pipeline array but        #             aren't currently output to the screen (because set to not show)                $records = array();                // ----- Load values into the quick-add table        if (isset($_POST['FORM_pipeline_array'])) {                        // LOAD FROM DATABASE RECORD -----                        $pipeline_arr = unserialize($_POST['FORM_pipeline_array']);            if ($pipeline_arr != '') {                foreach ($pipeline_arr as $barcode => $arr) {                                        // ----- determine if the field in on the page                    if (!isset($this->Quickadd_Exist_Arr[$barcode])) {                                                $record = $this->SQL->GetRecord(array(                            'table' => 'inventory_products',                            'keys'  => 'retailer_code, salesorder_quickadd_title',                            'where' => "`barcode`='{$barcode}'",                        ));                                                $retailer_code                      = (isset($record['retailer_code'])) ? $record['retailer_code'] : '';                        $salesorder_quickadd_title          = (isset($record['salesorder_quickadd_title'])) ? $record['salesorder_quickadd_title'] : '';                        $title                              = ($salesorder_quickadd_title) ? $salesorder_quickadd_title : $retailer_code;                                                $arr['barcode']                     = $barcode;                        //$arr['retailer_code']               = $this->GetInventoryItemRetailerCodeFromBarcode($barcode);                        $arr['salesorder_quickadd_title']   = $title;                        $records[$barcode]                  = $arr;                                            }                }            }        }                return $records;    }        private function CreateQuickAddTable($records, $shorttable=false)    {                $quickadd_show_price    = true;        $quickadd_show_barcode  = true;                if ($records) {                        // ----- setup the rows and columns            $columns        = $this->Quickadd_Columns;            $count          = count($records);            $rows_per_col   = ceil($count / $columns);                        // ----- initialize variables            $col_content_arr    = array();            $col_current        = 0;            $row_current        = 0;                        // ----- process records            foreach ($records as $record) {                $row_current++;                                $field_start        = $this->Pipeline_Field_Start;                $barcode            = $record['barcode'];                $title              = ($record['salesorder_quickadd_title']) ? $record['salesorder_quickadd_title'] : $barcode;                $span_style         = "font-size:8px; color:#999;";                                $qty_input          = "<input id='{$field_start}qty_{$barcode}' name='{$field_start}qty_{$barcode}' size='1' maxlength='255' value='' type='text' />";                $price_input        = ($quickadd_show_price) ? "&nbsp;&nbsp;\$<input id='{$field_start}price_{$barcode}' name='{$field_start}price_{$barcode}' size='3' maxlength='255' value='' type='text' />" : '';                $barcode_display    = ($quickadd_show_barcode) ? "</br><span style='{$span_style}'>[{$barcode}]</span>" : '';                                $style_pad_top      = ($quickadd_show_barcode) ? "padding-top:2px;" : "padding-top:6px;";                                $display = "                    <div style='border-bottom:1px solid #ccc; margin-bottom:5px;'>                    <div style='float:left; {$style_pad_top}'><b>{$title}</b>: {$barcode_display}</div>                    <div style='float:right;'>{$qty_input}{$price_input}</div>                    <div class='clear'></div>                    </div>                    ";                                                                // ----- increment column                if ($row_current > $rows_per_col) {                    $row_current = 1;                    $col_current++;                }                                // ----- store content                $existing_content                   = (isset($col_content_arr[$col_current])) ? $col_content_arr[$col_current] : '';                $col_content_arr[$col_current]      = "{$existing_content}{$display}";                $this->Quickadd_Exist_Arr[$barcode] = $barcode;                            }                        // ----- create the output table            $count          = count($col_content_arr);            $col_content    = "";            foreach ($col_content_arr AS $id => $content) {                $col_content .= "<td valign='top'>{$content}</td>";                $col_content .= "<td style='border-right:1px solid blue;'></td>";                $col_content .= "<td style='padding-right:10px;'></td>";            }                        /*            // ----- add any extra columns (if needed)            $columns_total      = $this->Quickadd_Columns;            $columns_actual     = count($col_content_arr);            $columns_difference = $columns_total - $columns_actual;            for ($i=0; $i<$columns_difference; $i++) {                $col_content .= "<td valign='top'></td>";                $col_content .= "<td style='border-right:1px solid blue;'></td>";                $col_content .= "<td style='padding-right:10px;'></td>";            }            */                                    $style = (!$shorttable) ? "width='{$this->Pipeline_Table_Width}' style='width:{$this->Pipeline_Table_Width}px;'" : "";                         $output = "                <table border='0' {$style}>                <tr>{$col_content}</tr>                </table>                ";                    } else {            $output = 'No Quick Add Products';        }                return $output;    }        private function PopulateQuickAddTable()    {        // ----- Load values into the quick-add table        if (isset($_POST['FORM_pipeline_array'])) {                        // LOAD FROM DATABASE RECORD -----                        $pipeline_arr = unserialize($_POST['FORM_pipeline_array']);            if ($pipeline_arr != '') {                foreach ($pipeline_arr as $barcode => $arr) {                                        // ----- get values from array                    $field_start    = $this->Pipeline_Field_Start;                    $quantity       = (isset($arr['quantity'])) ? $arr['quantity'] : 0;                    $price          = (isset($arr['price'])) ? $arr['price'] : 0;                                        // ----- use jQuery to populate the form                    AddScriptOnReady("                        $('#{$field_start}qty_{$barcode}').val('{$quantity}');                        $('#{$field_start}price_{$barcode}').val('{$price}');                    ");                                                            // ----- determine if the field in on the page                    if (!isset($this->Quickadd_Exist_Arr[$barcode])) {                                                $arr['barcode'] = $barcode;                        $arr['retailer_code'] = 'temp retailer_code';                        $arr['salesorder_quickadd_title'] = 'temp salesorder_quickadd_title';                        $this->Quickadd_Not_Exist_Arr[$barcode] = $arr;                    }                }            }                                    // ----- handle the records that don't have populatable fields            /*            $extra_output   = '<div id="quickadd_noexist_products_header">ADDITIONAL PIPELINE ITEMS</div>';            $extra_output  .= '<div id="quickadd_noexist_products_subheader">(exist in record but not active quick-add items)</div>';            $extra_output  .= '<table id="quickadd_noexist_products_table">';            $extra_output  .= "<tr><td class=\"theader\">ITEM</td><td class=\"theader\">QUANTITY</td><td class=\"theader\">PRICE</td></tr>";            foreach ($this->Quickadd_Not_Exist_Arr AS $barcode => $arr) {                $info           = $this->GetInventoryItemDetailsFromBarcode($barcode);                $quantity       = (isset($arr['quantity'])) ? $arr['quantity'] : 0;                $price          = (isset($arr['price'])) ? $arr['price'] : 0;                $extra_output  .= "<tr><td class=\"tcontent\">{$info}</td><td class=\"tcontent\">{$quantity}</td><td class=\"tcontent\">\${$price}</td></tr>";            }            $extra_output .= '</table>';                        $extra_output   .= $this->CreateQuickAddTable($this->Quickadd_Not_Exist_Arr);                        AddScriptOnReady("                $('#quickadd_noexist_products').html('{$extra_output}');            ");                        AddStyle("                #quickadd_noexist_products_header {                    font-size:14px;                    font-weight:bold;                    color:blue;                    background-color:#ddd;                                    }                #quickadd_noexist_products_subheader {                    font-size:10px;                    color:blue;                    background-color:#ddd;                    border-bottom:1px solid blue;                }                #quickadd_noexist_products_table td.theader {                    background-color:#ddd;                    font-size:12px;                    font-weight:bold;                }                #quickadd_noexist_products_table td.tcontent {                    border-bottom:1px solid #ddd;                }            ");            */                                } else {                        // LOOP THROUGH _POST[] TO FIND VALUES                        $field_start = $this->Pipeline_Field_Start;            foreach ($_POST as $field => $value) {                //echo "</br>$field => $value";                $pos = strpos($field, $field_start);                        // check if fieldname were looking for is in array                if ($pos !== false) {                    //echo "<div style='color:red;'>$field => $value</div>";                    AddScriptOnReady("$('#{$field}').val('{$value}');");      // use jQuery to populate the form                }            }                    }    }        private function LoadNotesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the notes areas for this sales order                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                $output                                 = "";                                                                           // initialize variable                $Obj_Notes                              = new Inventory_InventorySalesOrderNotes(0, $this->Inventory_Sales_Orders_ID);  // instantiate class        $Obj_Notes->Inventory_Sales_Orders_Id   = $this->Inventory_Sales_Orders_ID;                                             // set sales order id to get notes for        $Obj_Notes->Table_Width                 = $this->Notes_Width;                                                           // set variable        $Obj_Notes->Notes_Font_Size             = $this->Notes_Font_Size;                                                       // set variable        $this->Existing_Notes_Count             = $Obj_Notes->GetExistingCount($this->Inventory_Sales_Orders_ID);               // get count of existing notes        $output                                .= $Obj_Notes->AddRecordText();                                                  // display ability to add a new note        $output                                .= "</br>";        $output                                .= $Obj_Notes->ViewAllRecords(true);                                             // get the existing records                        return $output;                                                                                                         // return the output    }        private function LoadFilesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the notes areas for this sales order                $bypass_adding_script = false;                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                        if (!$this->UID) {            $this->UID = $this->GetUIDFromISOID();        }                if (!$this->UID) {            $error = "Missing UID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output                                 = "";                                                                           // initialize variable                $Obj_Files                              = new Inventory_Uploadify_UploadedFiles();                                      // instantiate class        $Obj_Files->UID                         = $this->UID;                                                                   // set sales order id to get files for        $Obj_Files->Upload_Type                 = 'salesorder';                                                                 // set file type        $Obj_Files->Table_Width                 = $this->Files_Width;                                                           // set variable        $Obj_Files->Files_Font_Size             = $this->Files_Font_Size;                                                       // set variable        $Obj_Files->Files_Font_Size_2           = $this->Files_Font_Size_2;                                                     // set variable                $output                                .= "</br>";        $output                                .= $Obj_Files->ViewAllRecordsFromFolderWithDatabaseCrosscheck(true);             // get the existing records        $Obj_Files->AddScript();        $this->Existing_Files_Count             = $Obj_Files->Existing_Files_Count;                                             // get count of existing files                return $output;                                                                                                         // return the output    }        private function LoadFilesUploadArea()    {                        if (!$this->UID) {            $this->UID = $this->GetUIDFromISOID();        }                if (!$this->UID) {            $error = "Missing UID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                                $output = '';                $Obj_Files_Upload                       = new Inventory_Uploadify_UploadFile('salesorder', $this->UID);             // instantiate class        $Obj_Files_Upload->AddStyle();                                                                                      // add needed styles or stylesheet        $Obj_Files_Upload->AddScript();                                                                                     // add needed scripts        $output                                .= $Obj_Files_Upload->AddRecordText();                                       // display ability to add a new file                return $output;    }            private function ListTableHeader()    {        # FUNCTION :: Create header area above the table listing                $select         = $this->CreatePipelineStatusDropdown();        $sortlink       = $this->CreateSortLink();        $last_update    = $this->GetLastUpdateDate();        $gap            = "&nbsp;&nbsp;&nbsp;&nbsp;";                $output = "        <table class='pb_day_table'>            <tr>                <td valign='middle' width='100%'>                    <div style='font-size:13px; background-color:#efefef; padding:5px;'><b>Last Pipeline Update:</b> {$last_update}</div>                    </br></br>                    <span style='font-size:16px;'><b>Pipeline Status:</b></span> {$select} {$gap} {$sortlink}                    </br></br>                </td>            </tr>        </table></br>";                echo $output;    }        private function GetLastUpdateDate()    {        # FUNCTION :: Determine the last edit date for the pipeline                // ----- get the records        $where_pipeline = ($this->Pipeline_Status) ? " AND pipeline_status='{$this->Pipeline_Status}'" : '';        $record = $this->SQL->GetRecord(array(            'table' => $this->Table,            'keys'  => 'MAX(updated) AS MAXDATE',            'where' => "active=1 AND status_hide_from_pipeline=0 {$where_pipeline}",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, false);                                if (isset($record['MAXDATE'])) {            $date_current           = $record['MAXDATE'];            $timezone_database      = $this->Timezone_Database;     // timezone of database            $timezone_local         = $this->Timezone_Local;        // timezone of user            $output_format          = $this->Output_Format;         // output timestamp format 'Y-m-d H:i:s T'            $Obj_Date               = new DateTime($date_current, new DateTimeZone($timezone_database));            $Obj_Date->setTimezone(new DateTimeZone($timezone_local));          // set tiezone to local            $output                 = $Obj_Date->format($output_format);            // format and output date        } else {            $output = 'n/a';        }                return $output;    }        private function CreatePipelineStatusDropdown()    {        # FUNCTION :: Create a drop-down showing all the pipeline statuses - for above table listing                global $PAGE;                $select_options         = '';                                                       // initialize variable        $pagelink               = 'http://webmanager.whhub.com/office/class_execute';       // get page URL        $current_status         = $this->Pipeline_Status;                                   // get the current pipeline status        $pipeline_status_list   = $this->GetSetting('sales_order_pipeline_status');         // get values from inventory_settings table        $pipeline_parts         = explode('|', $pipeline_status_list);                // ----- default 'ALL' option        //$eq                     = EncryptQuery("class={$this->Classname}");        //$link                   = $pagelink . '?eq=' . $eq;        $item                   = "-- ALL --";        $selected               = ($current_status == $item) ? ' selected' : '';        $eq                     = EncryptQuery("class={$this->Classname};v1=;");        $action                 = (Get('action')) ? ";action=" . Get('action') : '';        $link_current           = $pagelink . '?eq=' . $eq . $action;        $link_sort_on           = $pagelink . '?eq=' . $eq . ';action=sort';        $link_sort_off          = $pagelink . '?eq=' . $eq;        $select_options        .= "<option value='' link_current='{$link_current}' link_sort_on='{$link_sort_on}' link_sort_off='{$link_sort_off}'>{$item}</option>";                // create the default "all" option                // ----- all of the other options        foreach ($pipeline_parts AS $item) {            $selected           = ($current_status == $item) ? ' selected' : '';            $eq                 = EncryptQuery("class={$this->Classname};v1={$item};");            $action             = (Get('action')) ? ";action=" . Get('action') : '';            $link_current       = $pagelink . '?eq=' . $eq . $action;            $link_sort_on       = $pagelink . '?eq=' . $eq . ';action=sort';            $link_sort_off      = $pagelink . '?eq=' . $eq;            $select_options    .= "<option value='{$item}' link_current='{$link_current}' link_sort_on='{$link_sort_on}' link_sort_off='{$link_sort_off}' {$selected}>{$item}</option>";        }                // ----- create the select dropdown        $select = "<select name='pipeline_status' id='pipeline_status'>{$select_options}</select>";                // ----- jquery for handling drop-down change        AddScriptOnReady("            $('#pipeline_status').change(function() {                var value   = $(this).attr('value');                var link    = $('option:selected', this).attr('link_current');                window.location = link;            });        ");                return $select;    }        private function CreateSortLink()    {        # FUNCTION :: Create sort enable/disable link                $text       = (Get('action') == 'sort') ? "COMPLETE SORT" : "ENABLE SORT";        $link       = (Get('action') == 'sort') ? "" : ";action=sort";                if (Get('action') == 'sort') {            $text       = "DISABLE SORT";            $link_use   = "link_sort_off";        } else {            $text       = "ENABLE SORT";            $link_use   = "link_sort_on";        }                $output     = "<span id='pipeline_sort_link' style='cursor:pointer; color:blue;'>{$text}</span>";                // ----- jquery for handling drop-down change        AddScriptOnReady("            $('#pipeline_sort_link').click(function() {                var value   = $('#pipeline_status').attr('value');                var link    = $('option:selected', '#pipeline_status').attr('{$link_use}');                window.location = link;            });        ");                return $output;    }        private function AddScriptSort()    {            # FUNCTION :: Scripts needed for re-sorting priority                AddScriptInclude("https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js");                $link   = getClassExecuteLink(EncryptQuery("class={$this->Classname};"));        $SCRIPT = <<<SCRIPT                        $("#sortable").sortable({                placeholder: 'ui-state-highlight',                stop: function(i) {                    placeholder: 'ui-state-highlight',                    $.ajax({                        type: "POST",                        url: "{$link};action=sort;",                        data: { order: $("#sortable").sortable("serialize") },                        success: function( result ) {                                if (result == 1) {                                    //alert('Instructors have been re-ordered');                                } else {                                    alert('Failed to re-order instructors');                                }                            }                    });                }            });            $("#sortable").disableSelection();SCRIPT;        AddScriptOnReady($SCRIPT);            }        public function AddStyleSort()    {        AddStyle("            #sortable, .TABLE_DISPLAY {                list-style-type: none;                margin: 0;                padding: 0;                /*width: 60%;*/            }            #sortable li, .TABLE_DISPLAY li {                margin: 0 3px 3px 3px;                padding: 0.4em;                padding-left: 1.5em;                font-size: 1.4em;                /*height: 18px;*/            }            #sortable li span, TABLE_DISPLAY li span {                position: absolute;                margin-left: -1.3em;            }        ");    }        private function GetAllSalesOrdersForSort()    {        # FUNCTION :: Get all sales orders from the database                $output = '';           // initialize variable                        // ----- get the records        $where_pipeline = ($this->Pipeline_Status) ? " AND pipeline_status='{$this->Pipeline_Status}'" : '';        $records = $this->SQL->GetArrayAll(array(            'table' => $this->Table,            'keys'  => 'inventory_sales_orders_id, universal_id, so_number, order_type, customer, date_created, date_ship_delivery_request, date_ship_actual, pipeline_status, production_status, finance_status',            'where' => "active=1 AND status_hide_from_pipeline=0 {$where_pipeline}",            'order' => '`priority_sort_order` ASC',        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, false);                        // ----- format the records        if ($records) {            $output .= '<ul id="sortable">';            foreach ($records AS $record) {                                $id = $record['inventory_sales_orders_id'];                $display = "                    <div class='col col_1'>                        ID: {$record['inventory_sales_orders_id']}</br>                        UID: <b>{$record['universal_id']}</b></br>                        SO#: {$record['so_number']}                    </div>                    <div class='col col_2'>                        Customer: <b>{$record['customer']}</b></br>                        Date Created: {$record['date_created']}</br>                        Delivery Date: {$record['date_ship_delivery_request']}</br>                        Shipped Date: {$record['date_ship_actual']}                    </div>                    <div class='col col_3'>                        Type: <b>{$record['order_type']}</b></br>                        Pipeline Status: <b>{$record['pipeline_status']}</b></br>                        Production Status: <b>{$record['production_status']}</b></br>                        Finance Status: <b>{$record['finance_status']}</b>                    </div>                    <div class='clear'></div>                ";                                $output    .= "<li id='item_{$id}' class='ui-state-default' style='min-width:200px;'><span class='ui-icon ui-icon-arrowthick-2-n-s'></span>{$display}</li>";            }            $output .= '</ul>';                                    // ----- add needed styles            AddStyle("                .col {  float:left; font-size:12px;}                .col_1 {                    width: 150px;                    border:0px solid red;                }                .col_2 {                    width: 300px;                    border:0px solid red;                }                .col_3 {                    width: 300px;                    border:0px solid red;                }            ");                    } else {            $output = 'NO RECORDS FOUND';        }                echo $output;            }            private function GetSalesOrderAssemblies()    {        # FUNCTION :: Get the sales order assemblies                $output = "";                // ----- get the records        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_sales_order_assemblies',            'keys'  => 'inventory_sales_order_assemblies_id, assembly_name',            'where' => 'active=1',        ));                // ----- format the records        if ($records) {                        $selected           = ''; //Get('status');            $select_options     = '';            foreach ($records AS $record) {                //$selected = (strtolower($status_item) == strtolower($status)) ? ' selected' : '';                $selected = "";                $select_options .= "<option value='{$record['inventory_sales_order_assemblies_id']}' {$selected}>{$record['assembly_name']}</option>";            }            $status_select = "<select id='quickadd_assembly_select'>{$select_options}</select> <span id='quickadd_assembly_select_add'>[Add]</span>";                                    $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                    AddScriptOnReady("                $('#quickadd_assembly_select_add').click(function() {                    var isoaid  = $('#quickadd_assembly_select').val();                    var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=sales_order_assembly_lookup;isoaid=' + isoaid;                    var data    = '';                                        $.get(url, data)                        .done(function(data) {                            //alert(data);                            var obj     = jQuery.parseJSON(data);                            var length  = obj.length;                            var i       = 0;                            for (i=0; i<length; i++){                                alert(obj[i].barcode + ' -- ' + obj[i].quantity);                            }                    }, 'json');                });            ");                        AddStyle("                #quickadd_assembly_select_add {                    color:blue;                    font-weight:bold;                    cursor:pointer;                }            ");        }                return $status_select;    }        private function MakeUniversalId()    {        # FUNCTION :: Create a unique universal ID                do {                        $code_format    = $this->GetSetting('universal_id_format');     // get setting from inventory_settings table            $letters        = "ABCDEFGHJKMNPQRTWXYZ";                       // what letters are allowed            $numbers        = "23456789";                                   // what numbers are allowed                        $code_len       = strlen ($code_format);                        // length of code            $letters_len    = strlen ($letters);                            // length of letters            $numbers_len    = strlen ($numbers);                            // length of numbers                        $code_output    = "";                                           // initialize variable                        for ($i=0; $i<$code_len; $i++) {                // loop through code formatting to create letters and numbers                switch($code_format[$i]) {                    case 'L':                    case 'l':                        // add a random letter to the output code                        $code_output .= $letters[mt_rand(0, $letters_len - 1)];                    break;                                        case 'N':                    case 'n':                        // add a random number to the output code                        $code_output .= $numbers[mt_rand(0, $numbers_len - 1)];                    break;                }            }                        // check if the created code is actually unique            $unique     = $this->SQL->IsUnique('inventory_sales_orders', 'universal_id', $code_output);                    } while (!$unique);                return $code_output;    }        private function LoadClassSettings()    {        // FUNCTION :: Load settings needed for the module                // ----- get production status colors        $p_status_colors            = $this->GetSetting('sales_order_production_status_color');        $p_status_colors_parts      = explode('|', $p_status_colors);        foreach ($p_status_colors_parts as $part) {            $p      = explode('=', $part);            if (isset($p[1]) && isset($p[0])) {                $title  = $p[0];                $color  = $p[1];                $this->Production_Status_Color[$title] = $color;            }        }                // ----- get pipeline status colors        $p_status_colors            = $this->GetSetting('sales_order_pipeline_status_color');        $p_status_colors_parts      = explode('|', $p_status_colors);        foreach ($p_status_colors_parts as $part) {            $p      = explode('=', $part);            if (isset($p[1]) && isset($p[0])) {                $title  = $p[0];                $color  = $p[1];                $this->Pipeline_Status_Color[$title] = $color;            }        }                // ----- get finance status colors        $p_status_colors            = $this->GetSetting('sales_order_finance_status_color');        $p_status_colors_parts      = explode('|', $p_status_colors);        foreach ($p_status_colors_parts as $part) {            $p      = explode('=', $part);            if (isset($p[1]) && isset($p[0])) {                $title  = $p[0];                $color  = $p[1];                $this->Pipeline_Finance_Color[$title] = $color;            }        }                        }    private function GetUIDFromISOID()    {        if (!$this->Inventory_Sales_Orders_ID) {            $error = "Missing Inventory_Sales_Orders_ID";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_sales_orders',            'keys'  => 'universal_id',            'where' => "`inventory_sales_orders_id`={$this->Inventory_Sales_Orders_ID}",        ));                if ($record) {            $output = $record['universal_id'];        } else {            $output = 0;        }                return $output;    }    }  // -------------- END CLASS --------------