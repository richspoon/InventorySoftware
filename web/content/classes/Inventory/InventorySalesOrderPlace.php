<?phpclass Inventory_InventorySalesOrderPlace extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Header_Row                  = "Barcode|APDM SKU|Description|QTY|Price (ea)|Price (total)|DEL";    public $Locked                      = false;    public $Inventory_Sales_Orders_ID 	= 0;		    public function  __construct()    {        parent::__construct();                $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-12',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-03-13',            'Filename'      => 'Inventory_InventorySalesOrderPlace',            'Version'       => '1.3',            'Description'   => 'Create a customer sales order - will draw down inventory',            'Update Log'    => Array(                '2012-11-30_1.1'  => "Added customer information field",                '2012-11-30_1.2'  => "Added new formatting and ability to calculate prices",				'2013-03-13_1.3'  => "Modified to support database change - track by id not SO#",            ),        );                        #$this->SetParameters(func_get_args());        #$this->Barcode          = $this->GetParameter(0);        #$this->Add_Record_Link  = HexDecodeString($this->GetParameter(1));        #$this->Retailer_Code    = $this->GetParameter(2);                $this->Table                = 'inventory_sales_orders';        $this->Index_Name           = 'inventory_sales_orders_id';        $this->Default_Sort         = 'so_number';      // field for default table sort                                                $this->Field_Titles = array(            "{$this->Table}.inventory_sales_orders_id"              => 'Inventory Sales Orders Id',                        "{$this->Table}.so_number"                              => 'SO Number',            "{$this->Table}.customer"                               => 'Customer',            "{$this->Table}.ref_document_url"                       => 'Ref URL',            "{$this->Table}.ref_document_number"                    => 'Ref Number',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.cost_shipping"                          => 'Cost (shipping)',            "{$this->Table}.cost_other"                             => 'Cost (other)',                                    "{$this->Table}.commission_paid"                        => 'Commission Paid',            "{$this->Table}.commission_date"                        => 'Commission Date',            "{$this->Table}.commission_amount"                      => 'Commission Amount',            "{$this->Table}.commission_cogs"                        => 'Commission COGS',            "{$this->Table}.commission_notes"                       => 'Commission Notes',                                    "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Status',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',                        "(SELECT SUM(`price_total`) AS EST_LINE_ITEM_COST FROM `inventory_sales_order_lines` WHERE `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number` AND `inventory_sales_order_lines`.active=1) AS EST_LINE_ITEM_COST" => 'Estimated Line Item Cost',        );                        $this->Join_Array = Array(            'inventory_counts'  => "LEFT OUTER JOIN `inventory_sales_order_lines` ON `inventory_sales_order_lines`.`so_number` = `inventory_sales_orders`.`so_number`",        );                $this->Default_Fields   = 'so_number, customer, date, EST_LINE_ITEM_COST, cost_shipping, cost_other, active';        $this->Unique_Fields    = 'so_number';                $this->Default_Values   = array(            'status'    => 'open',            'date'      => date('Y-m-d'),        );                        $this->Default_Where        = '';               // additional search conditions        $this->Add_Submit_Name      = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field          = $this->Index_Name;                        $this->Close_On_Success     = true;        $this->Edit_Links_Count     = '4';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                $this->AddRecord();            break;            			case 'delete':                // ----- special delete case because a lot of different records need to be modified                $this->DeleteSalesOrder();            break;			            case 'list':            default:                // ----- display list of all assemblies that can be built				$this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => ' inventory_products',                    'keys'  => 'description, retailer_code, barcode, status_retired',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%') AND active=1 AND status_hide_salesorder=0",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $retired = ($record['status_retired'] == 1) ? "[Retired] - " : "";                    $arr[] = array(                        'label'             => "{$record['barcode']} - {$retired}{$record['retailer_code']}",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;        }                echo $return;    }        private function JavascriptAutocomplete()    {        $eq = EncryptQuery('class=Inventory_InventorySalesOrderPlace');       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_0').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=autocomplete_inventory_lookup',                minChars        : 0,    // how many characters tot ype before starting function call                selectFirst     : true,                autoFocus       : true,                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_0" ).val( ui.item.label );                    $( "#FORM_temp_1" ).val( ui.item.barcode );                 // store Barcode                    $( "#FORM_temp_2" ).val( ui.item.sku );                     // store APDM SKU                    $( "#FORM_temp_4" ).val( ui.item.description );             // store Description                         return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + "<br>" + item.description + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        private function JavascriptCreateTable()    {        $this->ScriptJSONTableGeneric();                                // Add in the generic code held in the BaseClass        $this->ScriptCalculatePrice();                                  // Add in the generic code held in the BaseClass                $script = <<<SCRIPT                    // ===== USER DEFINED VARIABLES =====            var targetTextID        = "FORM_autotable_holder";          // defines hidden textarea that will hold the text array            var targetTableDivID    = "autotable_table_display";        // defines the div that wraps the created table            var requiredFieldArray  = ["FORM_temp_1","FORM_temp_5"];            var headerText          = "{$this->Header_Row}";                        var fieldQty            = "FORM_temp_5";                    // In form - field holding quantity            var priceEach           = "FORM_temp_6";                    // In form - field for price each            var priceTotal          = "FORM_temp_7";                    // In form - field for price total                                    function formTableRow() {                var delimiter       = "|";                var barcode         = $("#FORM_temp_1").val();                var sku             = $("#FORM_temp_2").val();                var description     = $("#FORM_temp_4").val();                var qty             = $("#FORM_temp_5").val();                var priceEach       = $("#FORM_temp_6").val();                var priceTotal      = $("#FORM_temp_7").val();                                // ----- create the string that will be added to table.                // ----- no starting or ending delimiter                // ----- action buttons will be added by other function                var output = barcode + delimiter + sku + delimiter + description + delimiter + qty + delimiter + priceEach + delimiter + priceTotal;                return output;            }                        function clearDataTextboxes() {                // -- clear the textboxes used to search on table data                $("#FORM_temp_0").val('');                $("#FORM_temp_1").val('');                $("#FORM_temp_2").val('');                $("#FORM_temp_4").val('');                $("#FORM_temp_5").val('');                $("#FORM_temp_6").val('');                $("#FORM_temp_7").val('');            }            SCRIPT;        AddScript($script);                AddScriptOnReady("            // -- call table creation function on load            // -- rebuilds table after coming back from form errors            var targetText          = $('#' + targetTextID);        // defines hidden textarea that will hold the text array            var targetTableDiv      = $('#' + targetTableDivID);    // defines the div that wraps the created table            createTableFromTextbox(targetText, targetTableDiv);        ");    }        public function GetLockedStatus($ID)    {        // ----- determine if sales order shold be locked        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_sales_order_sent",            'keys'      => "*",            'where'     => "inventory_sales_order_id='{$ID}' AND active=1",        ));        $this->EchoQuery();                $locked = ($records) ? true : false;                return $locked;    }        public function GetExistingRecords($ID)    {        // ----- get all records from the database        $so_number = $this->GetSalesOrderNumberFromID($this->Edit_Id);        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_sales_order_lines",            'keys'      => "inventory_sales_order_lines.*, inventory_products.description, inventory_products.retailer_code",            'where'     => "inventory_sales_order_id='{$ID}' AND `inventory_sales_order_lines`.`active`=1",            'joins'     => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_sales_order_lines`.`barcode`",        ));        $this->EchoQuery();                // ----- format records for output        $count = 1;        $table = $this->Header_Row . "\n";        foreach ($records as $record) {            $del            = ($this->Locked) ? "LOCKED" : "<div class='button_delete' id='row_1' onclick='tableDeleteRow(\" row_{$count} \")'>X</div>";            $price_total    = money_format("%n", $record['price_total']);            $price_each     = money_format("%n", ($record['price_total'] / $record['quantity']));                        $table .= "{$record['barcode']}|{$record['retailer_code']}|{$record['description']}|{$record['quantity']}|{$price_each}|{$price_total}|{$del}\n";            $count++;        }                // ----- put formatted records into POST array and add javascript to add extra needed line break        $_POST['FORM_autotable_holder'] = $table;        AddScriptOnReady('$("#FORM_autotable_holder").val($("#FORM_autotable_holder").val() + "\n");');    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                // ----- if editing record - need to get the records from database and put on the page        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                        $this->Inventory_Sales_Orders_ID  	= $this->Edit_Id;            $so_number 							= $this->GetSalesOrderNumberFromID($this->Inventory_Sales_Orders_ID);            $this->Locked 						= $this->GetLockedStatus($so_number);            $this->GetExistingRecords($this->Inventory_Sales_Orders_ID);                        if ($this->Locked) {                //echo "<h2>SALES ORDER IS LOCKED</h2>";                AddScriptOnReady("$('#FORM_so_number').val('{$so_number}');");                AddScriptOnReady("$('#temp_sonumber').html('{$so_number}');");                AddScriptOnReady("$('#FORM_temp_locked').val(1);");            }        }                        // ----- Javascript Functionality -----        $this->JavascriptDisplaySessionMessage();   // Display alert messages        $this->JavascriptAutocomplete();            // Javascript for autocomplete functionality        $this->JavascriptCreateTable();             // Javascript for creating table from array of data        $this->JavascriptToggleFunctionality();     // Javascript for taggling show/hide a div area                        $this->JavascriptDatepickerFunctionality(array('FORM_date','FORM_commission_date'));        $this->JavascriptDisableFunctionality(array('FORM_temp_1','FORM_temp_2','FORM_temp_4'));        $this->JavascriptInputNoBorder(array('FORM_temp_1','FORM_temp_2','FORM_temp_4'));                                $btn_add            = MakeButton('positive', 'ADD', '', '', 'btn_add', "addDataToTable()", 'button', 'btn_add');        $btn_clear          = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');                $adding             = ($this->Action == 'ADD') ? true : false;      // hold edit status                if (!$this->Locked) {            $base_array = array(                "form|$this->Action_Link|post|db_edit_form",                'hidden|inventory_sales_orders_id',                'hidden|temp_locked',                								"code|<div style='min-width:60px;'>&nbsp;</div>",                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">SALES ORDER INFORMATION</div>',                    'text|SO Number|so_number|Y|60|255',                    'text|Date|date|N|20|20',                    'text|Customer|customer|N|60|255',                    'text|Shipping Cost|cost_shipping|N|20|20',                    'text|Other Cost|cost_other|N|20|20',                    'textarea|Notes|notes|N|60|2',                'code|</div>',                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                                        "text|Search|temp_0|N|60|100",                    "text|Barcode|temp_1|N|60|100",                    "text|APDM SKU|temp_2|N|60|100",                    "text|Description|temp_4|N|60|100",                                        "titletemplate|{$this->title_template}",                    "infotemplate|{$this->info_template}",                                        "code|<div style='padding-left:120px;'><table><tr>",                    "code|<td>",                        "text|QTY|temp_5|N|10|100",                    "code|</td>",                    "code|<td>",                        "text|Price (ea)|temp_6|N|10|100",                    "code|</td>",                    "code|<td>",                        "text|Price (total)|temp_7|N|10|100",                    "code|</td>",                    "code|</tr></table></div>",                                        "titletemplate|STD",                    "infotemplate|STD",                                        "info||$btn_add &nbsp;&nbsp;&nbsp; $btn_clear",                                    "code|</div>",                'code|<br /><br />',                                                "code|<div id='autotable_table_display'></div>",                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">SALES COMMISSION <a class="toggle" href="#" id="menu_group_a"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_a">',                        'checkbox|Paid|commission_paid||1|0',                        'text|Date Paid|commission_date|N|20|20',                        'text|Amount|commission_amount|N|20|20',                        'text|COGS Calculated|commission_cogs|N|20|20',                        'textarea|Notes|commission_notes|N|60|2',                    'code|</div>',                'code|</div>',                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">REFERENCE INFORMATION <a class="toggle" href="#" id="menu_group_b"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_b">',                        'text|Ref. Document|ref_document_number|N|60|1024',                        'text|Ref. Document URL|ref_document_url|N|60|255',                    'code|</div>',                'code|</div>',                                                'code|<div style="display:none;">',                    'textarea|Temp 3|autotable_holder|N|60|4',                'code|</div>',            );                    } else {                    $base_array = array(                "form|$this->Action_Link|post|db_edit_form",                				#'text|ID|inventory_sales_orders_id|N|20|255',                'hidden|inventory_sales_orders_id',                'hidden|temp_locked',				                "code|<div style='font-size:16px; color:blue; padding:5px; background-color:#ccc;'>SO Number: <span id='temp_sonumber'></span></div><br />",                "code|<div class='shadow form_section_wrapper_error'>",                    "code|SALES ORDER IS LOCKED BECAUSE INVENTORY HAS ALREADY BEEN SENT. TO MAKE MODIFICATION YOU MUST DELETE THE SALES ORDER - WHICH WILL UNSEND ALL ITEMS.",                "code|</div>",                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">SALES ORDER INFORMATION</div>',                    'text|SO Number|so_number|Y|60|255',					'text|Date|date|N|20|20',                    'text|Customer|customer|N|60|255',                    'text|Shipping Cost|cost_shipping|N|20|20',                    'text|Other Cost|cost_other|N|20|20',                    'textarea|Notes|notes|N|60|2',                'code|</div>',                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">SALES COMMISSION <a class="toggle" href="#" id="menu_group_a"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_a">',                        'checkbox|Paid|commission_paid||1|0',                        'text|Date Paid|commission_date|N|20|20',                        'text|Amount|commission_amount|N|20|20',                        'text|COGS Calculated|commission_cogs|N|20|20',                        'textarea|Notes|commission_notes|N|60|2',                    'code|</div>',                'code|</div>',                'code|<br /><br />',                                                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">REFERENCE INFORMATION <a class="toggle" href="#" id="menu_group_b"><span class="updown">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:none;" id="div_menu_group_b">',                        'text|Ref. Document|ref_document_number|N|60|1024',                        'text|Ref. Document URL|ref_document_url|N|60|255',                    'code|</div>',                'code|</div>',                'code|<br /><br />',                                                "code|<div id='autotable_table_display'></div>",                                                'code|<div style="display:none;">',                    'textarea|Temp 3|autotable_holder|N|60|4',                    "text|Search|temp_0|N|60|100",                'code|</div>',            );                    }                if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {                /* ======================== PSEUDOCODE ========================                Check each inventory item to make sure they still exist (superfulous but do it)        Verify the PO number is unique        For each line set the sales line TOTAL (derived from qty and each price)                Start Transaction        Create the Sales Order entry        Create each Sales Order LINE entry        End Transaction                Clear out the entire array        Put a success message on the screen        Re-direct to the entry page                Note: This bypasses normal action of BaseClass doing the entry into database - but this is needed        because its a multi-table entry		        =============================================================== */                $delimiter              = '|';        $table_holder           = 'autotable_holder';        $field_kickout_string   = 'temp_';        $lines_array_add        = array();                                      // will hold lines being added        $lines_array_delete     = array();                                      // will hold lines being deleted        $passed                 = true;                                         // holds check-passed status        $adding                 = ($this->Action == 'ADD') ? true : false;      // hold edit status        $locked                 = (isset($FormArray['temp_locked']) && ($FormArray['temp_locked'] == 1)) ? true : false;                        // ----- if locked - the only thing we can do is modify the form        if ($locked) {            # ----- Create the Sales Order entry            $db_record = array(                'so_number'             => $FormArray['so_number'],                'ref_document_url'      => $FormArray['ref_document_url'],                'ref_document_number'   => $FormArray['ref_document_number'],                'date'                  => $FormArray['date'],                #'cost_shipping'         => $FormArray['cost_shipping'],                #'cost_other'            => $FormArray['cost_other'],                'notes'                 => $FormArray['notes'],            );            $where      = "`so_number`='{$FormArray['so_number']}' AND `active`=1";            $result     = $this->UpdateRecordLoc('inventory_sales_orders', $db_record, $where);            if ($this->Show_Query) { echo "<br /><br />Query ---> " . $this->SQL->Db_Last_Query; }                        if ($result) {                // ----- Do A force redirect to bypass BaseClass further procesing this                $link = $this->getPageURL();                $_SESSION['alert_message'] = "SALES ORDER UPDATED SUCESSFULLY";                header("Location: {$link}");            } else {                echo "ERROR :: Unable to update sales order.";                exit();            }        }                                // ----- remove any temp fields from the array so they don't get processed        // ----- NOTE :: WASTED STEP IF WE BLOW OUT ARRAY AT END OF FUNCTION        foreach ($FormArray as $field => $value) {            echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                //echo ArrayToStr($_POST);        //exit();                                        // ----- check for unique SO #        if ($adding) {            $unique = $this->SQL->IsUnique('inventory_sales_orders', 'so_number', $FormArray['so_number'], 'active=1');            if (!$unique) {                $this->Error .= "<br />ERROR :: Sales Order number is not unique. PO Number: {$FormArray['so_number']}";                $passed = false;            }        }                                        // ----- get the main table holder value to process        $table = $FormArray[$table_holder];                //echo "table ===> {$table}";                if ($table) {            $lines = explode("\n", $table);            $header_row = true;            #echo ArrayToStr($lines);                        foreach ($lines as $key => $line) {                                //echo "<br />line ===> $line";                if ($line) {                                        //echo ArrayToStr($line);                                    if ($header_row == false) {                        $parts          = explode($delimiter, $line);                                                #echo ArrayToStr($parts);                                                $barcode        = trim($parts[0]);                        $sku            = trim($parts[1]);                        $description    = trim($parts[2]);                        $quantity       = trim($parts[3]);                        $price_each     = trim($parts[4]);                        $price_total    = trim($parts[5]);                        $price          = ($price_total != '') ? $price_total : ($quantity * $price_each);                                                // ----- check that inventory still exists                        $exist = $this->StatusInventoryItemExist($barcode);                                                if (!$exist) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        } else {                                                        $lines_array_add[] = array(                                'so_number'      => $FormArray['so_number'],                                'barcode'        => $barcode,                                'quantity'       => $quantity,                                'price_total'    => $price,                                'status'         => 'open',                            );                                                    }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                                //$this->Error .= "<br />PURPOSFUL HALTING ERROR";                                                // ----- verify if any good lines made it to processing - we don't want to allow a 0-line PO        if (!$lines_array_add) {            $passed = false;            $this->Error .= "THIS SALES ORDER HAS NO VALID LINES TO PROCESS";        }        //exit();//$passed = false;                                // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed && $lines_array_add) {                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                        # ----- Create the Sales Order entry            $db_record = array(                'so_number'             => $FormArray['so_number'],                'customer'              => $FormArray['customer'],                'ref_document_url'      => $FormArray['ref_document_url'],                'ref_document_number'   => $FormArray['ref_document_number'],                'date'                  => $FormArray['date'],                'cost_shipping'         => $FormArray['cost_shipping'],                'cost_other'            => $FormArray['cost_other'],                'notes'                 => $FormArray['notes'],            );                        if ($adding) {                $result     = $this->AddRecordLoc('inventory_sales_orders', $db_record);                $passed     = (!$result) ? false : $passed;                $this->EchoQuery();            } else {                $where      = "`so_number`='{$FormArray['so_number']}' AND `active`=1";                //$where      = "`inventory_sales_orders_id`='{$FormArray['inventory_sales_orders_id']}' AND `active`=1";                $result     = $this->UpdateRecordLoc('inventory_sales_orders', $db_record, $where);                $passed     = (!$result) ? false : $passed;                $this->EchoQuery();            }                                                # ----- Delete old Sales Order LINES entry            // ---- currently this is the fastest way to deal with editing lines - because we don't need            //      to track the IDs in the on-screen table. Just deactivate lines and let them be added again.            if (!$adding) {                $db_record = array(                    'active'            => 0,                );                $where      = "`so_number`='{$FormArray['so_number']}' AND `active`=1";                $result     = $this->UpdateRecordLoc('inventory_sales_order_lines', $db_record, $where);                $passed     = (!$result) ? false : $passed;                if ($this->Show_Query) { echo "<br /><br />Query ---> " . $this->SQL->Db_Last_Query; }            }                                    # ----- Create the Sales Order LINES entry            foreach ($lines_array_add as $line) {                $db_record = array(                    'so_number'         => $line['so_number'],                    'barcode'           => $line['barcode'],                    'quantity'          => $line['quantity'],                    'price_total'       => $line['price_total']                );                                $result     = $this->AddRecordLoc('inventory_sales_order_lines', $db_record);                $passed     = (!$result) ? false : $passed;                if ($this->Show_Query) { echo "<br /><br />Query ---> " . $this->SQL->Db_Last_Query; }            }                                                                                                # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                // ----- Do A force redirect to bypass BaseClass further procesing this                $link = $this->getPageURL();                $_SESSION['alert_message'] = ($adding) ? "SALES ORDER ADDED SUCESSFULLY" : "SALES ORDER UPDATED SUCESSFULLY";                header("Location: {$link}");            }        } else {            // ----- return form array to process any legitimate errors            return $FormArray;        }    }    	public function DeleteSalesOrder()    {        /* ===== P-CODE =================                * -- Don't allow if inventory has been received - force person to un-receive inventory first                1. Delete the master record        2. Delete all the SO lines                ============================== */                if ($this->Inventory_Sales_Orders_ID) {                        $passed         = true; // initialize variable            $status         = $this->StatusPurchaseOrder(0, $this->Inventory_Sales_Orders_ID);                        if ($status != 'open') {                echo "Purchase order has recevied inventory - unreceive and try again.";                exit();            }                                    # ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                        // ----- de-activate the main record            $db_record  = array('active' => 0);            $where      = "`inventory_sales_orders_id`='{$this->Inventory_Sales_Orders_ID}'";            $result     = $this->UpdateRecordLoc('inventory_sales_orders', $db_record, $where);            $passed     = (!$result) ? false : $passed;            $this->EchoQuery();                        // ----- de-activate the sub-line records            $db_record  = array('active' => 0);            $where      = "`inventory_sales_orders_id`='{$this->Inventory_Sales_Orders_ID}'";            $result     = $this->UpdateRecordLoc('inventory_sales_order_lines', $db_record, $where);            $passed     = (!$result) ? false : $passed;            $this->EchoQuery();                        # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                echo "<br /><br /><h2>SUCCESSFULLY DELETED - REFRESH PARENT TABLE</h2>";            }                    } else {            echo "NO Inventory_Sales_Orders_ID passed in.";        }    }	    public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/class_execute';                				$eq_fulfill             = EncryptQuery("class=Inventory_InventorySalesOrderFulfill;v1={$id};");                $link_fulfill           = $CLASS_EXECUTE_LINK . '?eq=' . $eq_fulfill;                $script_fulfill         = "top.parent.appformCreate('Window', '{$link_fulfill}', 'apps'); return false;";                                $eq_cogs                = EncryptQuery("class=Inventory_InventorySalesOrderCalculateCOGS;v1={$id};");                $link_cogs              = $CLASS_EXECUTE_LINK . '?eq=' . $eq_cogs;                $script_cogs            = "top.parent.appformCreate('Window', '{$link_cogs}', 'apps'); return false;";                				$eq_delete              = EncryptQuery("class=Inventory_InventorySalesOrderPlace;v1={$id};PARENT_DIALOGID=$this->Dialogid_Id");                $link_delete            = $CLASS_EXECUTE_LINK . '?eq=' . $eq_delete . '&action=delete';                $script_delete          = "ConfirmDeleteAndOpenWindow('{$link_delete}'); return false;";                                				// ----- determine which options to show to user                //$col_view       = ($this->Flags['view'] == 'false')   ? ''    : "<a href=`#` class=`row_view`       title=`View`            onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                				$col_edit       = ($this->Flags['edit'] == 'false')   ? ''    : "<a href=`#` class=`row_edit`       title=`Edit`            onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_receive    = ($this->Flags['print'] == 'false')  ? ''    : "<a href=`#` class=`row_receive`    title=`Ship Items`  	onclick=`{$script_fulfill}; return false;`></a>";                $col_cogs     	= ($this->Flags['cogs'] == 'false')   ? ''    : "<a href=`#` class=`row_dollarsign` title=`Calculate COGS`  onclick=`{$script_cogs}`></a>";                $col_delete     = ($this->Flags['delete'] == 'false') ? ''    : "<a href=`#` class=`row_delete`     title=`Delete`          onclick=`{$script_delete}`></a>";                                // ----- output the options                $this->Edit_Links_Count = '4';                $this->Edit_Links = qqn("                    <td align=`center`>{$col_edit}</td>					<td align=`center`>{$col_receive}</td>                    <td align=`center`>{$col_cogs}</td>                    <td align=`center`>{$col_delete}</td>                    ");            break;                        case 'active':                // convert the "ACTIVE" field to a status                $value = $this->StatusSalesOrder(0, $id);                                switch ($value) {                    case 'open':                        $td_options = "style=\"background-color:#b2ffb2;\"";                    break;                    case 'partial':                        $td_options = "style=\"background-color:#ffff80;\"";                    break;                    case 'closed':                        $td_options = "style=\"background-color:#ffcccc;\"";                    break;                }                               break;        }    }    }  // -------------- END CLASS --------------