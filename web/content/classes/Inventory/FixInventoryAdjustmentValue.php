<?phpclass Inventory_FixInventoryAdjustmentValue extends Inventory_InventoryBase{    public $Show_Query                      = false;    public $Barcode                         = 0;    public $Execute_Fix_Query               = false;        public $Value_Array                     = array();    public $Price_Calculated_Each           = 0;    public $Price_Calculated_Shipping_Each  = 0;        public $Skip_Barcodes = array(        10085, 10086, 10087, 30297,        30329, 30330, 30331,        20001    );        public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-22',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Fix bad data -  all inventory adjustments - recalculate with average cost method.',            'Update Log'    => array(                '2013-01-22_001'    => "Module Created",            ),        );            } // -------------- END __construct --------------        public function Execute()    {        /* ===== P-CODE ===========================                1. Get all inventory_adjustments that haven't been processed        2. Recalculate value based on average costing method        3. Adjust the inventory_adjustments to correct information                ======================================== */                if (!$this->Execute_Fix_Query) {            echo "<h1><span style='color:red'>UPDATE QUERY NOT ACTIVE</span></h1>";        }                        $Obj_Adjustment                 = new Inventory_COGSAdjustment();           // Instantiate class        $Obj_Adjustment->COGS_Method    = 'total_average';                          // Set method for calculating COGS                        $records = $this->GetAllRecords();        //$this->EchoVar('records', $records);                        $passed = false;        # ===== START TRANSACTION ============================================================        $this->SQL->StartTransaction();                                if ($records){                    foreach ($records as $record) {                                $barcode = $record['barcode'];                $this->Barcode = $barcode;                                                if (!in_array($barcode, $this->Skip_Barcodes)) {                                                        $Obj_Adjustment->Barcode = $barcode;                                        $is_assembly    = $Obj_Adjustment->CheckIfSubAssembly($barcode);                                                            // ===== CALCULATE THE VALUE                     if ($is_assembly) {                        $build_record   = $record['build_record_array'];                        $result         = $this->CalculatePrice_Assembly_TotalAverage($barcode, $build_record);                    } else {                        $result = $this->CalculatePrice_Barcode_TotalAverage();                    }                                        // ===== OUTPUT THE INFORMATION FOR THE VALUE CALCULATION                    if ($result) {                                                $price_total    = ($this->Price_Calculated_Each * $record['quantity']);                        $ship_total     = ($this->Price_Calculated_Shipping_Each * $record['quantity']);                        $color          = ($record['price_total'] != $price_total) ? 'red' : '';                                            $this->EchoVar('', '<div style="border:1px solid blue; padding:10px; margin:10px;">');                        $this->EchoVar('inventory_adjustments_id', $record['inventory_adjustments_id']);                        $this->EchoVar('barcode', $barcode);                        $this->EchoVar('is_assembly', $is_assembly);                        $this->EchoVar('quantity', $record['quantity']);                        $this->EchoVar('', '');                        $this->EchoVar('OLD price_each', $record['price_each']);                        $this->EchoVar('NEW price_each', $this->Price_Calculated_Each);                        $this->EchoVar('', '');                        $this->EchoVar('OLD price_total', $record['price_total'], $color);                        $this->EchoVar('NEW price_total', $price_total, $color);                        $this->EchoVar('', '');                        $this->EchoVar('OLD shipping_each', $record['price_shipping_each']);                        $this->EchoVar('NEW shipping_each', $this->Price_Calculated_Shipping_Each);                        $this->EchoVar('', '');                        $this->EchoVar('OLD shipping_total', $record['price_shipping']);                        $this->EchoVar('NEW shipping_total', $ship_total);                        $this->EchoVar('', '');                        #$this->EchoVar('Value_Array', $this->Value_Array);                        #$this->EchoVar('record', $record);                        $this->EchoVar('', '</div>');                                                $runquery = true;                    } else {                        $this->EchoVar('ERROR', 'Unable to caculate value', 'red');                        $runquery = false;                    }                                                                                // ----- create the database information                    $date                       = date('Y-m-d');                    $notes                      = $record['notes'] . " Updated with new cost on $date.";                                                            $price_method               = 'Purchase Average - Infinity Days';                    $price_method_array         = serialize($this->Value_Array);                    $price_each_original        = $record['price_each'];                    $price_total_original       = $record['price_total'];                    $price_shipping_original    = $record['price_shipping'];                                        $db_record = array(                        'notes'                 => $notes,                        'price_method'          => $price_method,                        'price_method_array'    => $price_method_array,                        'price_each_old'        => $price_each_original,                        'price_total_old'       => $price_total_original,                        'price_shipping_old'    => $price_shipping_original,                        'price_approved'        => 1,                    );                                                                // ----- Update the inventory_assembly_build record -----                    if ($this->Execute_Fix_Query && $runquery) {                        $where          = "inventory_adjustments_id='{$record['inventory_adjustments_id']}'";                        $result         = $this->UpdateRecordLoc('inventory_adjustments', $db_record, $where);                        $showquery      = ($result) ? false : true;                        $this->EchoQuery($showquery);                    }                                } // end checking if in Skip_Barcodes                                            } // end foreach        } else {            echo "<h2>NO REOCRDS TO MODIFY</h2>";        } // end record check                        /*        if (!$passed) {            echo "<h2>QUERY FAILED - NOT PASSED</h2>";        }        */                $passed = true;        # ===== COMMIT TRANSACTION ============================================================        if ($passed) {            $this->SQL->TransactionCommit();        }    }          public function GetAllRecords()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_adjustments',            'keys'  => "*",            'where' => "price_each_old='' AND price_total_old='' AND active=1",        ));        $this->EchoQuery();        //$this->EchoVar('records', $records);                return $records;    }                public function CalculatePrice_Barcode_TotalAverage($barcode=0)    {        # FUNCTION :: Calculate the price for a new barcode item based on the logic of this function        #     NOTE :: Usually this is used when making an adjustment - to calculate value of each adjustment item        #   METHOD :: TotalAverage - Takes an average of all physical purchases (purchase orders) in the system - no date restriction                $barcode = ($barcode != 0) ? $barcode : $this->Barcode;                        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_counts',            'keys'  => 'inventory_counts.inventory_counts_id, inventory_counts.date AS IC_DATE, inventory_purchase_order_received.*',            'where' => "inventory_counts.barcode='{$barcode}' AND inventory_counts.qty_in > 0 AND inventory_counts.ref_purchase_orders_received_id != 0 AND inventory_counts.active=1",            'joins' => 'LEFT JOIN inventory_purchase_order_received ON inventory_purchase_order_received.inventory_purchase_order_received_id = inventory_counts.ref_purchase_orders_received_id',        ));        $this->EchoQuery();                                if (!$records) {            $this->EchoVar('ERROR', "{$this->Classname} :: CalculateCogs_TotalAverage :: No records found for barcode. Barcode: {$barcode}");            return 0;        }                $this->Value_Array                      = array();        $this->Price_Calculated_Each            = 0;        $this->Price_Calculated_Shipping_Each   = 0;        $cost_sum                               = 0;        $cost_shipping_sum                      = 0;        $quantity_sum                           = 0;                foreach ($records as $record) {                        // ----- initialize variables            $price_total            = 0;            $price_each             = 0;            $price_shipping_total   = 0;            $price_shipping_each    = 0;                                    $price_total            = $record['price_total'];            $price_each             = $record['price_each'];            $price_shipping_total   = $record['price_shipping'];            $price_shipping_each    = $record['price_shipping_each'];                                    // ----- calculate the actual price            $qty_total              = $record['quantity'];            $price_each             = ($price_each) ? $price_each : ($price_total / $qty_total);            $price_ship_each        = ($price_shipping_each) ? $price_shipping_each : ($price_shipping_total / $qty_total);            $cost_part_total        = ($price_each * $qty_total);            $cost_shipping_total    = ($price_shipping_each * $qty_total);                        // ----- store the information            $cost_sum           += $cost_part_total;            $cost_shipping_sum  += $cost_shipping_total;            $quantity_sum       += $qty_total;                        $this->Value_Array[] = array(                'inventory_counts_id'                   => $record['inventory_counts_id'],                'inventory_purchase_order_received_id'  => $record['inventory_purchase_order_received_id'],                'date'                                  => $record['IC_DATE'],                'quantity'                              => $qty_total,                'calculated_cost_part_total'            => $cost_part_total,                'calculated_cost_shipping_total'        => $cost_shipping_total,                'record_price_total'                    => $record['price_total'],                'record_price_each'                     => $record['price_each'],                'record_price_shipping_total'           => $record['price_shipping'],                'record_price_shipping_each'            => $record['price_shipping_each'],            );        }                        // ----- calculate the total average                $this->Price_Calculated_Each            = ($cost_sum / $quantity_sum);        $this->Price_Calculated_Shipping_Each   = ($cost_shipping_sum / $quantity_sum);                return 1;    }            public function CalculatePrice_Assembly_TotalAverage($barcode=0, $assembly_bom='')    {        # FUNCTION :: Calculate the price for a new assembly item based on the logic of this function        #     NOTE :: Usually this is used when making an adjustment - to calculate value of each adjustment item        #   METHOD :: TotalAverage - Takes an average of all physical purchases (purchase orders) in the system - no date restriction        #   P-CODE :: Break apart each assembly item to its raw inventory barcode - then calculate the average for each barcode                        $assy_barcode = ($barcode != 0) ? $barcode : $this->Barcode;        $return = 1;                        // ----- Check to see if we passed in a BOM or build record - use that        // ----- If no build record - get the default build record (by using the Inventory_AssemblyExplode Class)        if (!$assembly_bom) {            $Obj_Explode = new Inventory_AssemblyExplode();         // Instantiate the assembly explode class            $Obj_Explode->Barcode = $assy_barcode;                  // Set barcode for the assembly we want to explode            $Obj_Explode->Quantity = 1;                             // Set count for a single assembly            $Obj_Explode->Execute();                                // Run the function            $assembly_bom = $Obj_Explode->BOM;                      // Store the BOM for this assembly Array(barcode => quantity, barcode => quantity, etc...)        }                #$this->EchoVar('assembly_bom', $assembly_bom);        #exit();                $value_array_temp   = array();        $price_total_temp   = 0;        $ship_total_temp    = 0;                $sku = $this->GetInventoryItemRetailerCodeFromBarcode($assy_barcode);                $this->EchoVar('', '<div style="border:1px solid green; padding:10px; margin:10px;">');        $this->EchoVar('Notice', 'BEGINNING LOOP', 'blue');        $this->EchoVar('Master Barcode', $assy_barcode);        $this->EchoVar('sku', $sku);        $this->EchoVar('assembly_bom', $assembly_bom);                foreach ($assembly_bom as $barcode => $quantity) {                        $this->EchoVar('', '');            $this->EchoVar('barcode', $barcode);            $this->EchoVar('quantity', $quantity);                        $result = $this->CalculatePrice_Barcode_TotalAverage($barcode);         // Get the average cost for this barcode                        if (!$result) {                $this->EchoVar('Notice', 'Trying for default value', 'blue');                $result = $this->CalculatePrice_Barcode_DefaultCost($barcode);      // Get the default cost for this barcode                if ($result) {                    $this->EchoVar('Notice', 'Default Value Found');                }            }                        if ($result) {                                $price_total    = ($this->Price_Calculated_Each * $quantity);               // Calc total for this barcode given qty in assembly                $ship_total     = ($this->Price_Calculated_Shipping_Each * $quantity);      // Calc ship total for this barcode given qty in assembly                                $price_total_temp   += $price_total;                                        // Store value                $ship_total_temp    += $ship_total;                                         // Store value                $value_array_temp[$barcode] = $this->Value_Array;                           // Store the value_array for this barcode - shows how barcode cost was calculated                                $this->EchoVar('Price Each', $this->Price_Calculated_Each);                $this->EchoVar('Ship Each', $this->Price_Calculated_Shipping_Each);                $this->EchoVar('Price Total', $price_total);                $this->EchoVar('Ship Total', $ship_total);                            } else {                // ----- FAILED to get any cost for this barcode in assembly                $this->EchoVar('ERROR', "{$this->Classname} :: CalculatePrice_Assembly_TotalAverage :: Couldn't calculate average for barcode. Barcode: {$barcode} ", 'red');                $return = 0;    // any failure will cause this whole function to return FALSE (0)            }        }                $this->EchoVar('', '</div>');                $this->Price_Calculated_Each            = $price_total_temp;        $this->Price_Calculated_Shipping_Each   = $ship_total_temp;        $this->Value_Array                      = $value_array_temp;                return $return;    }        public function CalculatePrice_Barcode_DefaultCost($barcode=0)    {        # FUNCTION :: Calculate the price for a new barcode item based on the logic of this function        #     NOTE :: Usually this is used when making an adjustment - to calculate value of each adjustment item. This should be last resort.        #   METHOD :: DefaultCost - Use the default cost stored for this barcode.                        $barcode = ($barcode != 0) ? $barcode : $this->Barcode;        $return = 0;                if ($barcode) {            // ----- get default value from database            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => "part_cost",                'where' => "barcode='{$barcode}' AND active=1",            ));            $this->EchoQuery();                        if ($record) {                // ----- store the values -----                $this->Price_Calculated_Each            = $record['part_cost'];                $this->Price_Calculated_Shipping_Each   = 0;                $this->Value_Array[] = array(                    'default_cost'  => $record['part_cost'],                );                                $return = 1;            }        }                return $return;    }    }  // -------------- END CLASS --------------