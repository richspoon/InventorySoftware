<?phpclass Inventory_EconomicOrderQuantity extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Echo_Output                 = true;        public $Demand_Rate_Annual          = 0;    public $Order_Cost                  = 0;    public $Holding_Cost_Dollar         = 0;    public $Holding_Cost_Percentage     = 0;    public $Unit_Price                  = 0;    public $Daily_Demand_Rate           = 0;    public $Lead_Time_Days              = 0;    public $Range_Price_Array           = array();            public $Working_Days_Year           = 200;            public $Qstar                           = 0;    public $Orders_Annually                 = 0;    public $Annual_Ordering_Cost            = 0;    public $Average_Inventory               = 0;    public $Average_Inventory_Costs         = 0;    public $Annual_Holding_Cost             = 0;    public $Total_Annual_Inventory_Cost     = 0;    public $Reorder_Point                   = 0;            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-02-02',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Determine the economic order quantity',            'Update Log'    => array(                '2013-02-02_1.0'    => "Module Created",            ),        );            } // -------------- END __construct --------------        public function Execute()    {        $this->Fake_EOQValues();                                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Calculate_EOQ();                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Calculate_AnnualOrders();                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Calculate_AverageInventory();                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Calculate_AnnualOrderingCosts();                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Calculate_AnnualHoldingCosts();                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Calculate_AverageInventoryCosts();                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Calculate_TotalAnnualInventoryCosts();                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Calculate_ReorderPoint();                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Make_GoogleChart();                                if ($this->Echo_Output) { echo "<br /><br />"; }        $this->Fake_Range_EOQValues();        $this->Calculate_DiscountRange();    }            public function Calculate_EOQ()    {        # Formula:        # EOQ = sqrt(2 Demand Order_Cost / Holding_Cost)        # Q* = sqrt(2 D C_o / C_h)                // ----- setup equation variables        $D      = $this->Demand_Rate_Annual;        $Co     = $this->Order_Cost;        $Ch     = $this->Holding_Cost_Dollar;                // ----- solve and format equation        $Qstar              = sqrt ( (2 * $D * $Co) / ($Ch) );        $Qstar_formatted    = number_format($Qstar);        $this->Qstar        = $Qstar;                if ($this->Echo_Output) {            $this->EchoVar('Qstar', $Qstar, 'red');            echo "<br />You should order {$Qstar_formatted} of the inventory item at a time to minimize total inventory cost.";        }    }        public function Calculate_AnnualOrders()    {        # Formula:        # number of Orders = (Demand / economic_order_quantity)        # O = (D / Q*)                // ----- setup equation variables        $D      = $this->Demand_Rate_Annual;        $Qstar  = $this->Qstar;                // ----- solve and format equation        $O                      = ceil(($D / $Qstar));        $O_formatted            = number_format($O);        $this->Orders_Annually  = $O;                if ($this->Echo_Output) {            $this->EchoVar('Annual Orders', $O, 'red');            echo "<br />You should place {$O} orders each year.";        }    }        public function Calculate_AnnualOrderingCosts()    {        # Formula:        # annual ordering costs = (ordering_cost_per_order * (annual_demand / economic_ordering_quantity) )        # annual ordering costs = (ordering_cost_per_order * (number_of_orders) )        # AOC = (OC * AO)                // ----- setup equation variables        $OC     = $this->Order_Cost;        $AO     = $this->Orders_Annually;        $this->EchoVar('Orders_Annually', $AO);        // ----- solve and format equation        $AOC                            = ($OC * $AO);        $AOC_formatted                  = money_format("%n", $AOC);        $this->Annual_Ordering_Cost     = $AOC;                if ($this->Echo_Output) {            $this->EchoVar('Annual Ordering Cost', $AOC, 'red');            echo "<br />Annual ordering costs will be {$AOC_formatted}.";        }    }        public function Calculate_AverageInventory()    {        # Formula:        # average inventory = (economic_order_quantity / 2)        # AI = (Q* / 2)                // ----- setup equation variables        $Qstar  = $this->Qstar;                // ----- solve and format equation        $AI                         = ($Qstar / 2);        $AI_formatted               = number_format($AI);        $this->Average_Inventory    = $AI;                if ($this->Echo_Output) {            $this->EchoVar('Average Inventory', $AI, 'red');            echo "<br />Your average inventory level will be {$AI_formatted}.";        }    }        public function Calculate_AnnualHoldingCosts()    {        # Formula:        # annual holding costs = (order_quantity / 2) * holding_cost_per_unit_per_year        # annual holding costs = Average_inventory * holding_cost_per_unit_per_year        # AHC = (AI * HC)                // ----- setup equation variables        $AI     = $this->Average_Inventory;        $HC     = $this->Holding_Cost_Dollar;                // ----- solve and format equation        $AHC                            = ($AI *$HC);        $AHC_formatted                  = money_format("%n", $AHC);        $this->Annual_Holding_Cost     = $AHC;                if ($this->Echo_Output) {            $this->EchoVar('Annual Holding Cost', $AHC, 'red');            echo "<br />Annual holding costs will be {$AHC_formatted}.";        }    }        public function Calculate_AverageInventoryCosts()    {        # Formula:        # average inventory costs = ((economic_order_quantity * holding_cost) / 2 )        # AIC = ((Q* * h) / 2)                // ----- setup equation variables        $Qstar  = $this->Qstar;        $H      = $this->Holding_Cost_Dollar;                // ----- solve and format equation        $AIC                            = (($Qstar * $H) / 2);        $AIC_formatted                  = money_format("%n", $AIC);        $this->Average_Inventory_Costs  = $AIC;                if ($this->Echo_Output) {            $this->EchoVar('Average Inventory Costs (holding)', $AIC, 'red');            echo "<br />Your average inventory cost (due to holding) will be {$AIC_formatted}.";        }    }        public function Calculate_TotalAnnualInventoryCosts()    {        # Formula:        # total inventory costs = annual_ordering_cost + annual_holding_cost        # TAIC = (AOC + AHC)                // ----- setup equation variables        $AOC    = $this->Annual_Ordering_Cost;        $AHC    = $this->Annual_Holding_Cost;                // ----- solve and format equation        $TAIC                                   = ($AOC + $AHC);        $TAIC_formatted                         = money_format("%n", $TAIC);        $this->Total_Annual_Inventory_Cost      = $AHC;                if ($this->Echo_Output) {            $this->EchoVar('Total Annual Inventory Cost', $TAIC, 'red');            echo "<br />Total Annual inventory costs will be {$TAIC_formatted}.";        }    }        public function Calculate_ReorderPoint()    {        # Formula:        # reorder point = (annual_demand / working_days_year) * lead_time_in_days        # reorder point = demand_per_day * lead_time_in_days        # ROP = (d * L)                // ----- setup equation variables        $d    = ($this->Demand_Rate_Annual / $this->Working_Days_Year);        $L    = $this->Lead_Time_Days;                // ----- solve and format equation        $ROP                    = ($d * $L);        $ROP_formatted          = number_format($ROP);        $this->Reorder_Point    = $ROP;                if ($this->Echo_Output) {            $this->EchoVar('Reorder Point', $ROP, 'red');            echo "<br />Reorder point is {$ROP_formatted} units for a daily demand of {$d} units and a lead time of {$this->Lead_Time_Days} days.";        }    }        public function Calculate_DiscountRange()    {        $arr = array();                $minimum_cost = 0;        $optimal_order_quantity = 0;                foreach ($this->Range_Price_Array as $id => $record) {                        # Formula:            # total_cost = material_cost + ordering_cost + holding_cost            # TC = (annual_demand * cost_per_Unit) + (annual_demand/Qstar * ordering_cost_per_order) + (Qstar/2 * (holding_cost_percentage_of_cost * cost_per_unit))            # TC = MC + OC + HC                        $range_start    = $record['range_start'];            $range_end      = $record['range_end'];            $price          = $record['price'];                                    $flagged = 0;                                                // ----- set the unit_price for this discount level            $this->Unit_Price = $price;                                    // ----- EOQ for quantity has different calculation - recalculate for Qstar            $I      = $this->Holding_Cost_Percentage;            $C      = $this->Unit_Price;            $this->Holding_Cost_Dollar = ($I * $C);            $this->Calculate_EOQ();                        $Qstar_orig = $this->Qstar;                        // ----- make sure the Qstar is at least at the minimum oreder level for this range            $this->Qstar = ($this->Qstar < $range_start) ? $range_start : $this->Qstar;                                    // ----- MATERIAL COST (Unit Cost)            $MC = ($this->Demand_Rate_Annual * $this->Unit_Price);                        // ----- ORDERING COST            $OC = (($this->Demand_Rate_Annual / $this->Qstar) * $this->Order_Cost);                        // ----- HOLDING COST            $HC = (($this->Qstar / 2) * ($this->Holding_Cost_Percentage * $this->Unit_Price));                                    // ----- calculate total cost            $TC = $MC + $OC + $HC;            $TC_formatted = money_format('%n', $TC);                                    // ----- determine if this is the lowest cost found            // ----- note: force this to be lowest if first run through array            if ($TC < $minimum_cost || $id == 1) {                $minimum_cost = $TC;                $optimal_order_quantity = $this->Qstar;                $flagged = 1;            }                                                $arr[] = array(                'range_start'           => $range_start,                'range_end'             => $range_end,                'price'                 => $price,                'Qstar'                 => $Qstar_orig,                'order_quantity'        => $this->Qstar,                'holding_cost'          => $HC,                'order_cost'            => $OC,                'unit_costs'            => $MC,                'total_cost'            => $TC,                'total_cost_formatted'  => $TC_formatted,                'flagged'               => $flagged,            );                                            }                        #$this->EchoVar('minimum_cost', $minimum_cost);        #$this->EchoVar('optimal_order_quantity', $optimal_order_quantity);        //echo $this->ConvertArrayToTable($arr);        $this->Make_GoogleChart_DiscountRange("visualization_{$id}", $arr);    }                public function Make_GoogleChart_DiscountRange($div_id='visualization', $ARR)    {        # FUNCTION :: Take the calculated unit infomration and make a google chart                AddScriptInclude("https://www.google.com/jsapi");                $output = "            var data = new google.visualization.DataTable();            data.addColumn('number', 'X');                          // Implicit domain label col.            data.addColumn('number', 'Total');                      // Implicit series 1 data col.            data.addColumn({type:'boolean',role:'certainty'});      // certainty col.            data.addColumn({type:'string', role:'annotation'});     // annotation role col.            data.addColumn('number', 'EOQ / $');                    // Implicit series 1 data col.            data.addColumn({type:'boolean',role:'certainty'});      // certainty col.            data.addRows([            ";                                        #$this->EchoVar('ARR', $ARR);                $arr_temp = array();                $count_ranges   = count($ARR);        $base_inc       = $ARR[0]['Qstar'];                $total_minimum      = 10000000000;                $range_count = 0;       // how many times have we gotten data from this range        $range_index = 0;       // which range to pull details from                $other_count = 1;                $ranges = 4;        $data_points_x = 24;        $number_recs_per_range = $data_points_x / $ranges;        //6                        for ($i=1; $i<$data_points_x+1; $i++) {                        if ($range_count < $number_recs_per_range) {                $range_index    = $range_index;                $range_count    = $range_count + 1;                $newrange       = false;            } else {                $range_index    = $range_index + 1;                $range_count    = 0;                $newrange       = true;            }                        $unit_cost      = $ARR[$range_index]['price'];                                                            $q          = ($base_inc / 4) + $i * ($base_inc / 12);            $setup      = (($this->Demand_Rate_Annual * $this->Order_Cost) / $q);            $holding    = (($unit_cost * $this->Holding_Cost_Percentage * $q) / 2);            $unit       = ($this->Demand_Rate_Annual * $unit_cost);            $total      = $setup + $holding + $unit;            $certainty_1  = ($newrange) ? 'false' : 'true';                                    $total_cost = $total;                        if ($total_cost < $total_minimum) {                // -- total cost still decreasing                $total_minimum          = $total_cost;                $total_minimum_format   = money_format('%n', $total_minimum);                $total_minimum_text     = '@@MIN_TOTAL_COST@@';                $certainty              = 'false';                $annotation             = 'null';                $annotation_done        = false;            } else {                // -- total cost is increasing                $total_minimum          = $total_minimum;                $total_minimum_text     = '@@MIN_TOTAL_COST_ZERO@@';                $certainty              = 'true';                $annotation             = ($annotation_done) ? 'null' : "'EOQ: {$this->Qstar} Cost: {$total_minimum_format}'";                $annotation_done        = true;            }                                                            if ($total < 20550) {                $output .= "[{$q}, {$total}, {$certainty_1}, {$annotation}, {$total_minimum_text}, {$certainty}],";                                $arr_temp[] = array(                    'q'                 => $q,                    'unit_cost'         => $unit_cost,                    'setup_cost'        => $setup,                    'holding_cost'      => $holding,                    'total_unit_cost'   => $unit,                    'total_cost'        => $total,                );            }        }                        //echo $this->ConvertArrayToTable($arr_temp);                        $output = str_replace('@@MIN_TOTAL_COST@@', $total_minimum, $output);        $output = str_replace('@@MIN_TOTAL_COST_ZERO@@', 0, $output);                        $output = substr($output, 0, -1);       // trim off the trailing comma        $output .= "]);";                       // close the javascript array                $script = "";        $script .= "google.load('visualization', '1', {packages: ['corechart']});";        $script .= "function drawVisualization_{$div_id}() {";        $script .= $output;        $script .= "        new google.visualization.LineChart(document.getElementById('{$div_id}')).          draw(data, {                      //curveType: 'function',                      width: 600, height: 400,                      title: 'Cost Graph For Economic Order Quantity',                      titleTextStyle: {color: 'blue', fontSize: 18},                      vAxis: {title: 'COST', minValue:20250, maxValue:20750, viewWindowMode:'explicit', viewWindow: {max: 20550, min: 20400}},                      hAxis: {title: 'EOQ'},                      legend: {position: 'right'},                      backgroundColor: {stroke: '#000', strokeWidth: 3}                      }              );        ";                      $script .= "}";        AddScript($script);                                echo "<div id='{$div_id}' style='width: 700px; height: 450px; overflow:scroll; '></div>";        #echo "<div style='border:3px solid blue; padding:10px; margin:10px;'>";        #echo $output;        #echo "</div>";        AddScriptOnReady("drawVisualization_{$div_id}();");            }                public function Make_GoogleChart($div_id='visualization')    {        # FUNCTION :: Take the calculated unit infomration and make a google chart                AddScriptInclude("https://www.google.com/jsapi");                $output = "            var data = new google.visualization.DataTable();            data.addColumn('string', 'X');                          // Implicit domain label col.            data.addColumn('number', 'Ordering');                   // Implicit series 1 data col.            data.addColumn('number', 'Holding');                    // Implicit series 1 data col.            data.addColumn('number', 'Total');                      // Implicit series 1 data col.            data.addColumn({type:'string', role:'annotation'});     // annotation role col.            data.addColumn('number', 'EOQ / $');                    // Implicit series 1 data col.            data.addColumn({type:'boolean',role:'certainty'});      // certainty col.            data.addRows([            ";                $annotation_done    = false;        $total_minimum      = 10000000000;                $start              = ($this->Qstar / 4);       // values taken from Excel QM        $increment          = ($this->Qstar / 12);      // values taken from Excel QM        $loops              = 24;                       // values taken from Excel QM        $increment_2        = 100;                       // data points - smaller = more points                for ($i=$start; $i<($increment * $loops); $i=$i+$increment_2) {                        $qstar          = $i;            $i_rnd          = round($qstar, 0);            $order_cost     = (($this->Demand_Rate_Annual * $this->Order_Cost) / $qstar);            $holding_cost   = (($this->Holding_Cost_Dollar * $qstar) / 2);            $total_cost     = $order_cost + $holding_cost;                                    if ($total_cost < $total_minimum) {                // -- total cost still decreasing                $total_minimum          = $total_cost;                $total_minimum_format   = money_format('%n', $total_minimum);                $total_minimum_text     = '@@MIN_TOTAL_COST@@';                $certainty              = 'false';                $annotation             = 'null';            } else {                // -- total cost is increasing                $total_minimum          = $total_minimum;                $total_minimum_text     = '@@MIN_TOTAL_COST_ZERO@@';                $certainty              = 'true';                $annotation             = ($annotation_done) ? 'null' : "'EOQ: {$this->Qstar} Cost: {$total_minimum_format}'";                $annotation_done        = true;            }                                    $order_cost     = round($order_cost, 0);            $holding_cost   = round($holding_cost, 0);            $total_cost     = round($total_cost, 0);                        $output .= "['{$i_rnd}', {$order_cost}, {$holding_cost}, {$total_cost}, {$annotation}, {$total_minimum_text}, {$certainty}],";        }                $output = substr($output, 0, -1);       // trim off the trailing comma        $output .= "]);";                       // close the javascript array                $output = str_replace('@@MIN_TOTAL_COST@@', $total_minimum, $output);        $output = str_replace('@@MIN_TOTAL_COST_ZERO@@', 0, $output);                                $script = "";        $script .= "google.load('visualization', '1', {packages: ['corechart']});";        $script .= "function drawVisualization_{$div_id}() {";        $script .= $output;        $script .= "        new google.visualization.LineChart(document.getElementById('{$div_id}')).          draw(data, {                      //curveType: 'function',                      width: 600, height: 400,                      title: 'Cost Graph For Economic Order Quantity',                      titleTextStyle: {color: 'blue', fontSize: 18},                      vAxis: {title: 'COST', minValue:0},                      hAxis: {title: 'EOQ'},                      legend: {position: 'right'},                      backgroundColor: {stroke: '#000', strokeWidth: 3}                      }              );        ";                      $script .= "}";        //$script .= "google.setOnLoadCallback(drawVisualization);";        AddScript($script);                                echo "<div id='{$div_id}' style='width: 700px; height: 450px; overflow:scroll; '></div>";        #echo "<div style='border:3px solid blue; padding:10px; margin:10px;'>";        #echo $output;        #echo "</div>";        AddScriptOnReady("drawVisualization_{$div_id}();");            }            public function Fake_EOQValues()    {        $this->Demand_Rate_Annual          = 100000;        $this->Order_Cost                  = 10;        $this->Holding_Cost_Dollar         = 0.005;        $this->Holding_Cost_Percentage     = 0.2;        $this->Unit_Price                  = 0;        $this->Daily_Demand_Rate           = 0;        $this->Lead_Time_Days              = 7;                                /*        $this->EchoVar('Demand_Rate_Annual', $this->Demand_Rate_Annual);        $this->EchoVar('Order_Cost', $this->Order_Cost);        $this->EchoVar('Holding_Cost_Dollar', $this->Holding_Cost_Dollar);        $this->EchoVar('Holding_Cost_Percentage', $this->Holding_Cost_Percentage);        $this->EchoVar('Unit_Price', $this->Unit_Price);        $this->EchoVar('Daily_Demand_Rate', $this->Daily_Demand_Rate);        $this->EchoVar('Lead_Time_Days', $this->Lead_Time_Days);        */    }        public function Fake_Range_EOQValues()    {        $this->Demand_Rate_Annual          = 2000;        $this->Order_Cost                  = 50;        $this->Holding_Cost_Percentage     = 0.1;        $this->Range_Price_Array = array(            1 => array('range_start' => 1,      'range_end' => 500,     'price'     => 10),            2 => array('range_start' => 501,    'range_end' => 1000,    'price'     => 9.99),            3 => array('range_start' => 1001,   'range_end' => 1499,    'price'     => 9.98),            4 => array('range_start' => 1500,   'range_end' => 10000,   'price'     => 9.97),        );                /*                $this->Demand_Rate_Annual          = 2000;        $this->Order_Cost                  = 50;        $this->Holding_Cost_Percentage     = 0.1;        $this->Range_Price_Array = array(            1 => array('range_start' => 1,      'range_end' => 500,     'price'     => 10),            2 => array('range_start' => 501,    'range_end' => 1000,    'price'     => 9.99),            3 => array('range_start' => 1001,   'range_end' => 1499,    'price'     => 9.98),            4 => array('range_start' => 1500,   'range_end' => 10000,   'price'     => 9.97),        );                range_start	    range_end	price	total_cost        -----------------------------------------------------        1	            500	        10	    $20,316.23        501	            1000	    9.99	$20,330.05        1001	        1499	    9.98	$20,509.45        1500	        10000	    9.97	$20,721.08        */            }    }  // -------------- END CLASS --------------