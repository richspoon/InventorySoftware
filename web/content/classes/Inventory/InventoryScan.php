<?php// ========================================================================================// FILE: Inventory_InventoryScan.php// Used to scan barcode products into the database// ========================================================================================class Inventory_InventoryScan extends Inventory_InventoryBase{    public $Page_Location                   = "/office/command_central/inventory_scan";    public $Page_Location_Get               = '';    public $Page_Link_Add_Inventory         = '';    public $Page_Link_Success               = '';    public $Page_Link_Remove_Holds          = '';    public $Success_Redirect                = '';    public $Show_Query                      = true;    public $Table_Inventory_Products        = 'inventory_products';        public function  __construct()    {        parent::__construct();                $this->Add_Submit_Name  = 'INVENTORY_PRODUCTS_SCAN_SUBMIT_ADD';        $this->Table            = 'inventory_counts';        $this->Index_Name       = 'inventory_counts_id';                $this->Default_Values   = array(            'speedscan'         => Get('speedscan'),            'multiple_entry'    => Get('multiple_entry'),        );            } // -------------- END __construct --------------    public function Execute()    {        $this->InventoryMenu('SCANS');                AddScriptOnReady("            $('#FORM_barcode').focus();                                    $('#btn_count_in').click(function() {                countIn();            });                        $('#btn_count_out').click(function() {                countOut();            });                        $('#btn_count_physical').click(function() {                countPhysical();            });                        $('#btn_count_reset').click(function() {                countReset();            });                        function countIn() {                $('#FORM_check_count_in').val('1');                $('#FORM_check_count_out').val('0');                $('#FORM_check_count_physical').val('0');                                $('#form_wrap').addClass('form_wrapper_count_in').removeClass('form_wrapper_count_out').removeClass('form_wrapper_count_physical').removeClass('hidden');                $('#btn_reset').addClass('display').removeClass('hidden');                $('#FORM_barcode').focus();            };                        function countOut() {                $('#FORM_check_count_in').val('0');                $('#FORM_check_count_out').val('1');                $('#FORM_check_count_physical').val('0');                                $('#form_wrap').removeClass('form_wrapper_count_in').addClass('form_wrapper_count_out').removeClass('form_wrapper_count_physical').removeClass('hidden');                $('#btn_reset').addClass('display').removeClass('hidden');                $('#FORM_barcode').focus();            };                        function countPhysical() {                $('#FORM_check_count_in').val('0');                $('#FORM_check_count_out').val('0');                $('#FORM_check_count_physical').val('1');                                $('#form_wrap').removeClass('form_wrapper_count_in').removeClass('form_wrapper_count_out').addClass('form_wrapper_count_physical').removeClass('hidden');                $('#btn_reset').addClass('display').removeClass('hidden');                $('#FORM_barcode').focus();            };                                    function countReset() {                $('#FORM_multiple_entry').attr('checked', false);                                $('#FORM_check_count_in').val('0');                $('#FORM_check_count_out').val('0');                                $('#FORM_barcode').val('');                $('#FORM_quantity').val('');                                $('#form_wrap').removeClass('form_wrapper_count_in').removeClass('form_wrapper_count_out').addClass('hidden');                $('#btn_reset').addClass('hidden').removeClass('display');                $('#FORM_barcode').focus();            };        ");                                $method = Get('method');        if ($method == 'in') AddScriptOnReady("countIn();");        if ($method == 'out') AddScriptOnReady("countOut();");        if ($method == 'physical') AddScriptOnReady("countPhysical();");                        $this->AddRecord();                                if (Session('RESET_FORM_SCAN')) {            switch(Session('RESET_FORM_SCAN')) {                case 'in':                    $script = "countIn();";                break;                                case 'out':                    $script = "countOut();";                break;                                case 'physical':                    $script = "countPhysical();";                break;            }            unset($_SESSION['RESET_FORM_SCAN']);            AddScriptOnReady($script);        }    }        public function SetFormArrays()    {        AddStyle("            #btn_count_in {                width:140px; height:50px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:left;                background-color:#0F63A5; color:#fff;            }            #btn_count_out {                width:140px; height:50px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:left;                background-color:#CC2A21; color:#fff;            }            #btn_count_physical {                width:140px; height:50px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:left;                background-color:#FFA011; color:#fff;            }            #btn_count_reset {                width:100px; height:20px; border:1px solid #ccc;                 font-size:20px; padding:10px; text-align:center; float:right;                background-color:#2FB406; color:#fff;            }            .hidden {                display:none;            }            .display {                display:visible;            }            .form_wrapper_count_in {                background-color:#0F63A5; color:#fff;                display:visible;            }            .form_wrapper_count_out {                background-color:#CC2A21; color:#fff;                display:visible;            }            .form_wrapper_count_physical {                background-color:#FFA011; color:#fff;                display:visible;            }                    ");            $action_msg = "<div id='checkin_msg' style=''>msgh here</div>";        $buttons = "            <div id='btn_count_in'>Check IN</div>&nbsp;&nbsp;&nbsp;            <div id='btn_count_out'>Check OUT</div>            <div id='btn_count_physical'>Physical Count</div>            <div class='clear'></div>            ";        $btn_reset = "            <div id='btn_count_reset'>RESET</div>            <div class='clear'></div>            ";                        $message = Session('scan_message');        AddFlash($message);        unset ($_SESSION['scan_message']);                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",            "code|<div style='min-width:500px; min-height:500px;'>",                        'hidden|check_count_in',            'hidden|check_count_out',            'hidden|check_count_physical',                        #"info||$message<br /><br />",                        "code|$buttons",            "code|<div id='form_wrap' class='hidden'>",                'code|<br />',                                'text|BARCODE|barcode|Y|40|255',                'text|QTY|quantity|N|10|10',                                'checkbox|MULTIPLE ENTRY|multiple_entry||1|0',                'checkbox|SKIP INVENTORY|speedscan||1|0',                "submit|Add Record|$this->Add_Submit_Name",            "code|</div>",            "code|$btn_reset",                        "code|</div>",            'endform',        );                $this->Form_Data_Array_Add = $base_array;    }            public function PostProcessFormValues($FormArray)    {        #echo ArrayToStr($FormArray);        #exit();                        # DON'T CONTINUE IF THERE ARE EXISTING FORM ERRORS        # ==========================================================        if ($this->Error) {            return false;        }                        # HANDLE FORM INFORMATION        # ============================================================        $multiple_entry                     = ($FormArray['multiple_entry'] == 1 )      ? true : false;        $speedscan                          = ($FormArray['speedscan'] == 1 )           ? true : false;        $quantity                           = ($FormArray['quantity'] != '' )           ? $FormArray['quantity'] : 1;                $qty_count_in                       = ($FormArray['check_count_in'] == 1)       ? $quantity : 0;        $qty_count_out                      = ($FormArray['check_count_out'] == 1)      ? $quantity : 0;        $qty_count_physical                 = ($FormArray['check_count_physical'] == 1) ? $quantity : 0;                $FormArray['barcode']               = $FormArray['barcode'];        $FormArray['qty_in']                = $qty_count_in;        $FormArray['qty_out']               = $qty_count_out;        $FormArray['qty_physical']          = $qty_count_physical;                        if ($qty_count_in > 0) {            $_SESSION['scan_message']           = "CHECKING PRODUCT IN";            $method                             = "in";        }        if ($qty_count_out > 0) {            $_SESSION['scan_message']           = "CHECKING PRODUCT OUT";            $method                             = "out";        }        if ($qty_count_physical > 0) {            $_SESSION['scan_message']           = "ADJUSTING PHYSICAL INVENTORY";            $method                             = "physical";        }                        # CREATE LINK FOR PAGE SUCCESSFULY ADDING        # ============================================================        $method_link                = ($multiple_entry) ? $method : '';        $this->Page_Location_Get    = ";multiple_entry={$multiple_entry};speedscan={$speedscan};method={$method_link}";        $this->Page_Link_Success    = "{$this->Page_Location}{$this->Page_Location_Get}";        $this->Success_Redirect     = $this->Page_Link_Success;                        # CREATE LINK FOR ADDING INVENTORY TO SYSTEM        # ============================================================        $barcode                        = isset($FormArray['barcode']) ? $FormArray['barcode'] : '';        $retailer_code                  = isset($FormArray['retailer_code']) ? $FormArray['retailer_code'] : '';        $post_add_link                  = HexEncodeString("{$this->Page_Location}{$this->Page_Location_Get}");        $link                           = getClassExecuteLinkNoAjax(EncryptQuery("class=Inventory_InventoryProducts;v1={$barcode};v2={$post_add_link};v3={$retailer_code}"));        $link                          .= ";action=add";        $this->Page_Link_Add_Inventory  = $link;                        # CREATE LINK FOR REMOVING PRODUCT HOLD        # ============================================================        $link                           = getClassExecuteLinkNoAjax(EncryptQuery("class=Inventory_InventoryHold;v1={$FormArray['barcode']};v2={$post_add_link}"));        $link                          .= ";action=hold_table";        $this->Page_Link_Remove_Holds   = $link;                                if (!$speedscan) {            # VERIFY IF WE HAVE THIS PRODUCT IN INVENTORY            # ============================================================            $record = $this->SQL->GetRecord(array(                'table' => 'inventory_products',                'keys'  => '*',                'where' => "`barcode`={$FormArray['barcode']} AND `active`=1",            ));            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                        if (!$record) {                echo "<br /><br />UNABLE TO LOCATE PRODUCT ININVENTORY. <br /><a href='#'>Would you like to add inventory details?</a>";                $this->Success_Redirect = $this->Page_Link_Add_Inventory;            }        }                                # OUT -> CHECK TO SEE IF THERE ARE ANY PRODUCTS IN INVENTORY TO CHECK OUT        # ==========================================================================        if ($qty_count_out > 0) {                        $record = $this->SQL->GetCustomRecord("                SELECT (SUM(`qty_in`) - SUM(`qty_out`)) AS TOTAL_QTY                 FROM {$this->Table}                WHERE `barcode`={$FormArray['barcode']} AND `active`=1            ");            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                                    $check_value = (isset($record['TOTAL_QTY'])) ? $record['TOTAL_QTY'] : 0;                        if ($qty_count_out > $check_value) {                $this->Error = "There are not enough products in inventory. You must add them to inventory before checking them out. <b>Current in Inventory = {$check_value}.</b> Cancelling transaction.";                $_SESSION['RESET_FORM_SCAN'] = 'out';            } else {                                                                # CHECK TO SEE IF THERE ARE ANY HOLDS TO BE RELEASED                # ============================================================                $record = $this->SQL->GetCustomRecord("                    SELECT (SUM(`qty_hold`) - SUM(`qty_release`)) AS TOTAL_ON_HOLD                     FROM `inventory_holds`                     WHERE `barcode`={$FormArray['barcode']} AND `active`=1                ");                if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                                $check_value = (isset($record['TOTAL_ON_HOLD'])) ? $record['TOTAL_ON_HOLD'] : 0;                                if ($check_value != 0) {                    # THERE ARE HOLDS TO MAYBE BE CANCELLED                    $this->Success_Redirect = $this->Page_Link_Remove_Holds;                }            }        }                        # PHYSICAL -> DO A PHYSICAL ADJUSTMENT TO THE (IN/OUT)        # ==========================================================================        if ($qty_count_physical > 0) {                                    # DETERMINE CURRENT INVENTORY LEVEL IN SYSTEM            $record1 = $this->SQL->GetCustomRecord("                SELECT (SUM(`qty_in`) - SUM(`qty_out`)) AS TOTAL_QTY                 FROM {$this->Table}                WHERE `barcode`={$FormArray['barcode']} AND `active`=1            ");            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                                    # DETERMINE INVENTORY HOLDS            $record2 = $this->SQL->GetCustomRecord("                    SELECT (SUM(`qty_hold`) - SUM(`qty_release`)) AS TOTAL_ON_HOLD                     FROM `inventory_holds`                     WHERE `barcode`={$FormArray['barcode']} AND `active`=1                ");            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                                    # CALCUALTE ACTUAL INVENTORY COUNT            $total_qty          = (isset($record1['TOTAL_QTY'])) ? $record1['TOTAL_QTY'] : 0;            $total_hold         = 0; //(isset($record2['TOTAL_ON_HOLD'])) ? $record2['TOTAL_ON_HOLD'] : 0;            $actual_inventory   = $total_qty - $total_hold;                        //echo "<br />actual - {}";            //echo "<br />actual - {}";                        # DETERMINE IN or OUT ACTION            $target_inventory   = $FormArray['qty_physical'];                        if ($target_inventory > $actual_inventory) {                # - add inventory                $difference_adjust          = $target_inventory - $actual_inventory;    // determine adjustment amount                $FormArray['qty_in']        = $difference_adjust;                       // adjust product in                $FormArray['qty_out']       = 0;                                        // adjust product out                $FormArray['adjustment']    = 1;                                        // mark this as an adjustment            } elseif ($target_inventory < $actual_inventory) {                # - remove inventory                $difference_adjust          = $actual_inventory - $target_inventory;    // determine adjustment amount                $FormArray['qty_in']        = 0;                                        // adjust product in                $FormArray['qty_out']       = $difference_adjust;                       // adjust product out                $FormArray['adjustment']    = 1;                                        // mark this as an adjustment            } else {                # - inventory at correct level - no adjustment                $FormArray['qty_in']        = 0;                $FormArray['qty_out']       = 0;                $FormArray['adjustment']    = 0;                                        // mark this as an adjustment            }                        # ADJUST THE INVENTORY PRODUCTS WITH A CHECKED DATE            $date = date("Y-m-d H:i:s"); //0000-00-00 00:00:00            $result = $this->SQL->UpdateRecord(array(                'table'         => $this->Table_Inventory_Products,                'key_values'    => "`date_last_checked`='{$date}'",                'where'         => "`barcode`='{$FormArray['barcode']}' AND `active`=1",            ));            if ($this->Show_Query) echo "<br /><br />LAST QUERY = " . $this->SQL->Db_Last_Query;                        #echo ArrayToStr($FormArray);            #exit();        }                                #echo "<br />record ===> $record";        #echo "<br />qty_count_out ===> $qty_count_out";        #echo "<br />check_value ===> $check_value";        #exit();                        # RETURN THE FORM ARRAY FOR DATABASE ENTRY        # ============================================================        unset($FormArray['quantity']);        unset($FormArray['check_count_in']);        unset($FormArray['check_count_out']);        unset($FormArray['check_count_physical']);        unset($FormArray['speedscan']);        unset($FormArray['multiple_entry']);        unset($FormArray['qty_physical']);                //echo ArrayToStr($FormArray);        //exit();                return $FormArray;    }        }  // -------------- END CLASS --------------