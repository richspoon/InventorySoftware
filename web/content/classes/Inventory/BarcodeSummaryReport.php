<?phpclass Inventory_BarcodeSummaryReport extends Inventory_InventoryBase{    public $Show_Query                  = false;    public $Barcode                     = 0;            // will hold the barcode to generate a report for    public $Date                        = '';           // will hold the date to generate a report for        public function  __construct()    {        parent::__construct();                $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-11',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-02-21',            'Filename'      => 'Inventory_BarcodeSummaryReport',            'Version'       => '1.1',            'Description'   => 'Create a summary report of COGS and inventory movements for a given Barcode.',            'Update Log'    => array(                '2013-01-11_1.0'    => 'Module created.',                '2013-02-21_1.1'  => 'Modified GetInventoryMovements() to support new database fields',            ),        );            } // -------------- END __construct --------------        public function Execute()    {        echo $this->GetInventoryInOutPriceReport();    }                    public function GetInventoryInOutPriceReport($BARCODE='', $DATE='')    {        # FUNCTION :: Get all the inventory INs and OUTs and what the price must be for those                // ----- INITIALIZE VARIABLES -----        $qty_rolling_sum = 0;                                // ----- GET ALL RECORDS RELATED TO THIS BARCODE -----        $records = $this->GetInventoryMovements();        $have_records = ($records) ? true : false;                if(!$have_records) {            return "ERROR :: Inventory_BarcodeSummaryReport :: GetInventoryInOutPriceReport() :: No records found";        }                                // ----- Start the output table -----        $report = "<table border='1' id='jsonTable'>";        $report .= "            <tr>                <th>Inventory Counts ID</th>                <th>Date</th>                <th>QTY In</th>                <th>QTY Out</th>                <th>(qty sum)</th>                <th>Adjustment</th>                <th>PRICE Ea</th>                <th>Price Total</th>                <th>Price Source Type</th>                <th>Price Source ID</th>                <th>Record Active</th>                <th>Notes</th>            </tr>";                                        // ----- PROCESS THE RECORDS -----        //$records = $this->ModifyDatesForSort($records);       // special sort function (only if normal sort not functioning)        $records = $this->orderBy($records, "date", "ASC");     // sort the records by date        $this->EchoVar('records', $records);                                foreach ($records as $record) {            //$this->EchoVar('records', $records);                        // ----- determine the actual cost for this item            $cost_each_default  = $record['DEFAULT_PRICE_EACH'];            $cost_total_sum     = $record['IN_PRICE_TOTAL'] + $record['IN_PRICE_SHIPPING'] + $record['ADJ_PRICE_TOTAL'] + $record['ADJ_PRICE_SHIPPING'] + $record['ASSY_PRICE_TOTAL'];            $cost_each_sum      = ($cost_total_sum / ($record['qty_in'] + $record['qty_out']));            $cost_each          = ($cost_total_sum == 0) ? $cost_each_default : $cost_each_sum;                        // ----- determine the method the inventory change was made with            $method             = 'default';            $method             = (isset($record['IN_DATE']))   ? "purchase order received<br />(PO#: {$record['IN_REF_NUMBER']})"  : $method;            $method             = (isset($record['ADJ_DATE']))  ? 'inventory adjustment'                                            : $method;            $method             = (isset($record['ASSY_DATE'])) ? 'assembly build'                                                  : $method;            $method             = (isset($record['OUT_DATE']))  ? "sales order sent<br />(SO#: {$record['OUT_REF_NUMBER']})"        : $method;                        // ----- determine the method ID the inventory change was made with            $method_id          = '';            $method_id          = (isset($record['IN_DATE']))   ? $record['IN_REF_ID']      : $method_id;            $method_id          = (isset($record['ADJ_DATE']))  ? $record['ADJ_REF_ID']     : $method_id;            $method_id          = (isset($record['ASSY_DATE'])) ? $record['ASSY_REF_ID']    : $method_id;            $method_id          = (isset($record['OUT_DATE']))  ? $record['OUT_SO_REF_ID']  : $method_id;                        // ----- determine the date the inventory change was made with            $date               = '';            $date               = (isset($record['IN_DATE']))   ? $record['IN_DATE']        : $date;            $date               = (isset($record['ADJ_DATE']))  ? $record['ADJ_DATE']       : $date;            $date               = (isset($record['ASSY_DATE'])) ? $record['ASSY_DATE']      : $date;            $date               = (isset($record['OUT_DATE']))  ? $record['OUT_DATE']       : $date;            $date_parts         = explode(" ", $date);  // trim off the time            $date               = $date_parts[0];       // trim off the time                        $price_total        = '';            $price_total        = (isset($record['IN_PRICE_TOTAL']))    ? $record['IN_PRICE_TOTAL']         : $price_total;            $price_total        = (isset($record['ADJ_PRICE_TOTAL']))   ? $record['ADJ_PRICE_TOTAL']        : $price_total;            $price_total        = (isset($record['ASSY_PRICE_TOTAL']))  ? $record['ASSY_PRICE_TOTAL']       : $price_total;            $price_total        = (isset($record['OUT_DATE']))          ? 'n/a'                             : $price_total;                                    $price_each         = '';            $price_each         = (isset($record['IN_PRICE_EACH']))     ? $record['IN_PRICE_EACH']          : $price_each;            $price_each         = (isset($record['ADJ_PRICE_EACH']))    ? $record['ADJ_PRICE_EACH']         : $price_each;            $price_each         = (isset($record['ASSY_PRICE_EACH']))   ? $record['ASSY_PRICE_EACH']        : $price_each;            $price_each         = (isset($record['OUT_DATE']))          ? 'n/a'                             : $price_each;                                    $price_shipping     = '';            $price_shipping     = (isset($record['IN_PRICE_SHIPPING']))     ? $record['IN_PRICE_SHIPPING']  : $price_shipping;            $price_shipping     = (isset($record['ADJ_PRICE_SHIPPING']))    ? $record['ADJ_PRICE_SHIPPING'] : $price_shipping;            $price_shipping     = (isset($record['ASSY_PRICE_EACH']))       ? 'n/a'                         : $price_shipping;            $price_shipping     = (isset($record['OUT_DATE']))              ? 'n/a'                         : $price_shipping;                                                $active             = '';            $active             = (isset($record['IN_ACTIVE']))     ? $record['IN_ACTIVE']          : $active;            $active             = (isset($record['ADJ_ACTIVE']))    ? $record['ADJ_ACTIVE']         : $active;            $active             = (isset($record['ASSY_ACTIVE']))   ? $record['ASSY_ACTIVE']        : $active;            $active             = (isset($record['OUT_ACTIVE']))    ? $record['OUT_ACTIVE']         : $active;                        $notes              = $record['notes'];            $notes              = (isset($record['IN_NOTES']))     ? $record['IN_NOTES']          : $notes;            $notes              = (isset($record['ADJ_NOTES']))    ? $record['ADJ_NOTES']         : $notes;            $notes              = (isset($record['ASSY_NOTES']))   ? $record['ASSY_NOTES']        : $notes;            $notes              = (isset($record['OUT_NOTES']))    ? $record['OUT_NOTES']         : $notes;                                                                        $id                     = $record['inventory_counts_id'];            $adjustment             = ($record['adjustment'] == 1) ? 'y' : '';            $date                   = $date;            $qty_in                 = ($record['qty_in'] > 0) ? $record['qty_in'] : '';            $qty_out                = ($record['qty_out'] > 0) ? $record['qty_out'] : '';            $qty                    = $qty_in + $qty_out;            $qty_rolling_sum        = $qty_rolling_sum + $qty_in - $qty_out;            $qty_rolling_sum_style  = ($qty_rolling_sum < 0) ? "style='background-color:red; color:white;'" : '';                        $price_each             = round($price_each, 3);            $price_total            = round($price_total, 3);                        $price_each             = ($price_each) ? "$" . $price_each : "[$" . ($price_total/$qty) . "]";            $price_total            = ($price_total) ? "$" . $price_total : "[$" . ($price_each*$qty) . "]";                        $price_source_type      = $method;            $price_source_id        = $method_id;            $active_text            = ($active == 1) ? 'YES' : 'NO';                                                            if ($record['status_use_assembly_pricing'] == 1) {                $status_assembly_pricing    = true;                $inventory_assemblies_id    = $record['inventory_assemblies_id'];                $default_price              = $this->CalculateAssemblyValue($inventory_assemblies_id);                $price_reference = "                            <div style='font-size:14px; font-weight:bold;'>Default Price: \${$default_price}</div>                            <div style='font-size:10px;'>                                price_reference_source: ASSEMBLY PRICE<br />                            </div>";            } else {                $status_assembly_pricing = false;                $default_price      = (isset($record['DEFAULT_PRICE_EACH'])) ? $record['DEFAULT_PRICE_EACH'] : 'ERR :: No default price';                $price_reference = "                            <div style='font-size:14px; font-weight:bold;'>Default Price: \${$default_price}</div>                            <div style='font-size:10px;'>                                price_reference_source: {$record['price_reference_source']}<br />                                price_reference_number: {$record['price_reference_number']}<br />                                price_reference_date: {$record['price_reference_date']}<br />                                price_reference_url: {$record['price_reference_url']}<br />                                price_reference_price: {$record['price_reference_price']}<br />                                price_reference_quantity: {$record['price_reference_quantity']}                            </div>";            }                                                                        if ($active) {                $report .= "                    <tr>                        <td>{$id}</td>                        <td>{$date}</td>                        <td>{$qty_in}</td>                        <td>{$qty_out}</td>                        <td {$qty_rolling_sum_style}>{$qty_rolling_sum}</td>                        <td>{$adjustment}</td>                        <td>{$price_each}</td>                        <td>{$price_total}</td>                        <td>{$price_source_type}</td>                        <td>{$price_source_id}</td>                        <td>{$active_text}</td>                        <td>{$notes}</td>                    </tr>";            } else {                $report .= "                    <tr>                        <td>{$id}</td>                        <td>{$date}</td>                        <td>{$qty_in}</td>                        <td>{$qty_out}</td>                        <td {$qty_rolling_sum_style}>{$qty_rolling_sum}</td>                        <td>{$adjustment}</td>                        <td colspan='5' bgcolor='pink'>ERROR :: No reference for this record. Error will cause inventory levels to be incorrect. Run Database Integrity Check to resolve.</td>                        <td>{$notes}</td>                    </tr>";            }                    } // end record loop                if (!$have_records) {            $report .= "<tr><td colspan='11'>NO RECORDS FOUND</td></tr>";        }                $report .= "</table>";                        $price_reference    = (isset($price_reference)) ? $price_reference : "<div style='font-size:14px; font-weight:bold;'>Default Price: N/A</div>";        $description        = $this->GetInventoryItemDetailsFromBarcode($this->Barcode);        $cogs               = $this->InventoryItemLastCost($this->Barcode);        $inventory_count    = $this->InventoryItemQuantityAvailable($this->Barcode, $this->Date);        $cogs_total         = $this->CalculateInventoryValue($this->Barcode, $this->Date);        $output             = "                             <div style='border:1px solid #000; padding:10px; margin:10px;'>                            <table cellpadding='5'>                            <tr>                                <td valign='top' bgcolor='#ccc'><div style='font-size:14px; font-weight:bold;'>{$description}</div></td>                                <td valign='top'>                                    <div style='font-size:14px; font-weight:bold;'>Single Item COGS: \${$cogs}</div>                                    <br /><br />                                    <div style='font-size:14px; font-weight:bold;'>Total Inventory: {$inventory_count}</div>                                    <br /><br />                                    <div style='font-size:14px; font-weight:bold;'>Total Inventory COGS: {$cogs_total}</div>                                </td>                                <td valign='top'><div>{$price_reference}</div></td>                            </tr>                            </table>                            </div>                            <br />                            {$report}";                return $output;    }            public function GetInventoryMovements($BARCODE='', $DATE='')    {        # FUNCTION :: Get all the inventory INs and OUTs related to a specified barcode                $wheredate = ($this->Date) ? " AND inventory_counts.date <= '{$this->Date}' " : "";                $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_counts',            'keys'  => "    inventory_counts.*,                             `inventory_purchase_order_received`.`price_total`                               AS IN_PRICE_TOTAL,                            `inventory_purchase_order_received`.`price_each`                                AS IN_PRICE_EACH,                            `inventory_purchase_order_received`.`price_shipping`                            AS IN_PRICE_SHIPPING,                            `inventory_purchase_order_received`.`date`                                      AS IN_DATE,                            `inventory_purchase_order_received`.`inventory_purchase_order_received_id`      AS IN_REF_ID,                            `inventory_purchase_order_received`.`po_number`                                 AS IN_REF_NUMBER,                            `inventory_purchase_order_received`.`active`                                    AS IN_ACTIVE,                            `inventory_purchase_order_received`.`notes`                                     AS IN_NOTES,                                                        `inventory_adjustments`.`price_total`                                           AS ADJ_PRICE_TOTAL,                            `inventory_adjustments`.`price_each`                                            AS ADJ_PRICE_EACH,                            `inventory_adjustments`.`price_shipping_each`                                   AS ADJ_PRICE_SHIPPING_EACH,                            `inventory_adjustments`.`price_shipping_total`                                  AS ADJ_PRICE_SHIPPING_TOTAL,                                                        `inventory_adjustments`.`date`                                                  AS ADJ_DATE,                            `inventory_adjustments`.`inventory_adjustments_id`                              AS ADJ_REF_ID,                            `inventory_adjustments`.`active`                                                AS ADJ_ACTIVE,                            `inventory_adjustments`.`notes`                                                 AS ADJ_NOTES,                                                        `inventory_assembly_build`.`price_total`                                        AS ASSY_PRICE_TOTAL,                            `inventory_assembly_build`.`price_each`                                         AS ASSY_PRICE_EACH,                            `inventory_assembly_build`.`date`                                               AS ASSY_DATE,                            `inventory_assembly_build`.`inventory_assembly_build_id`                        AS ASSY_REF_ID,                            `inventory_assembly_build`.`active`                                             AS ASSY_ACTIVE,                            `inventory_assembly_build`.`notes`                                              AS ASSY_NOTES,                                                        `inventory_sales_order_sent`.`date`                                             AS OUT_DATE,                            `inventory_sales_order_sent`.`so_number`                                        AS OUT_SO_NUMBER,                            `inventory_sales_order_sent`.`inventory_sales_order_sent_id`                    AS OUT_SO_REF_ID,                            `inventory_sales_order_sent`.`so_number`                                        AS OUT_REF_NUMBER,                            `inventory_sales_order_sent`.`active`                                           AS OUT_ACTIVE,                            `inventory_sales_order_sent`.`notes`                                            AS OUT_NOTES,                                                        `inventory_products`.`part_cost`                                                AS DEFAULT_PRICE_EACH,                            `inventory_products`.`description`                                              AS description,                            `inventory_products`.`retailer_code`                                            AS retailer_code,                            `inventory_products`.`price_reference_source`,                            `inventory_products`.`price_reference_number`,                            `inventory_products`.`price_reference_date`,                            `inventory_products`.`price_reference_url`,                            `inventory_products`.`price_reference_price`,                            `inventory_products`.`price_reference_quantity`,                            `inventory_products`.`status_use_assembly_pricing`,                            `inventory_products`.`inventory_assemblies_id`            ",            'where' => "`inventory_counts`.`barcode`='{$this->Barcode}' {$wheredate} AND                                 (                `inventory_counts`.`active`=1 OR                 `inventory_purchase_order_received`.`active`=1 OR                 `inventory_adjustments`.`active`=1 OR                `inventory_assembly_build`.`active`=1  OR                 `inventory_sales_order_sent`.`active`=1                  ) AND                                 (                `inventory_counts`.`qty_in` > 0 OR                 `inventory_counts`.`qty_out` > 0                 ) AND                                 `inventory_counts`.`active` = 1            ",            'joins' => "                        LEFT JOIN `inventory_purchase_order_received`   ON `inventory_purchase_order_received`.`inventory_purchase_order_received_id`   = `inventory_counts`.`ref_purchase_orders_received_id`                         LEFT JOIN `inventory_adjustments`               ON `inventory_adjustments`.`inventory_adjustments_id`                           = `inventory_counts`.`ref_adjustment_id`                         LEFT JOIN `inventory_assembly_build`            ON `inventory_assembly_build`.`inventory_assembly_build_id`                     = `inventory_counts`.`ref_assembly_build_id`                         LEFT JOIN `inventory_sales_order_sent`          ON `inventory_sales_order_sent`.`inventory_sales_order_sent_id`                 = `inventory_counts`.`ref_sales_order_sent_id`                         LEFT JOIN `inventory_products`                  ON `inventory_products`.`barcode`                                               = `inventory_counts`.`barcode`            ",            'order' => "`inventory_counts`.`date` ASC",        ));        $this->EchoQuery();        //$this->EchoVar('records', $records);                return $records;    }            public function ModifyDatesForSort($records)    {        foreach ($records as $id => $record) {            //$records[$id]['date_unix'] = strtotime($record['date']);                                    // ----- determine the date the inventory change was made with            $date               = '';            $date               = (isset($record['IN_DATE']))   ? $record['IN_DATE']        : $date;            $date               = (isset($record['ADJ_DATE']))  ? $record['ADJ_DATE']       : $date;            $date               = (isset($record['ASSY_DATE'])) ? $record['ASSY_DATE']      : $date;            $date               = (isset($record['OUT_DATE']))  ? $record['OUT_DATE']       : $date;            $date_parts         = explode(" ", $date);  // trim off the time            $date               = $date_parts[0];       // trim off the time                        $records[$id]['date_unix']  = strtotime($date);     // create UNIX timestamp for sorting            $records[$id]['date']       = $date;            $records[$id]['date_orig']  = $record['date'];                    }                return $records;    }            }  // -------------- END CLASS --------------