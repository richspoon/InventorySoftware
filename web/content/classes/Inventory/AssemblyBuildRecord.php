<?phpclass Inventory_AssemblyBuildRecord extends Inventory_InventoryBase{    public $Show_Query                          = false;            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-02-28',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Handle creation, explosions, and modification of assembly build records - for DB',            'Update Log'    => array(                '2013-02-28_1.0'    => "Module Created",            ),        );            } // -------------- END __construct --------------        public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                [DESCRIPTION:]        Handle all actions related to creating a build record for database storage                [ARRAY DESCRIPTIONS:]                build_record_array = This is the list of barcodes and quantities used to build up an assembly. What is stored in the database is only the used inventory. Stored as a serialized array.        Once unserialized it will look like this:        OLD (WRONG) STYLE        Array        (            [30031] => 1            [10117] => 1            [30299] => 4            [30300] => 6        )        NEW (CORRECT) STYLE        Array        (            [0] => Array                (                    [barcode] => 10068                    [quantity_out] => 0                    [quantity_in] => 1                )            [1] => Array                (                    [barcode] => 30021                    [quantity_out] => 1                    [quantity_in] => 0                )            [2] => Array                (                    [barcode] => 10176                    [quantity_out] => 0                    [quantity_in] => 0                )            [3] => Array                (                    [barcode] => 10078                    [quantity_out] => 0                    [quantity_in] => 0                )            [4] => Array                (                    [barcode] => 10077                    [quantity_out] => 0                    [quantity_in] => 0                )            [5] => Array                (                    [barcode] => 10076                    [quantity_out] => 0                    [quantity_in] => 0                )            [6] => Array                (                    [barcode] => 30298                    [quantity_out] => 0                    [quantity_in] => 0                )        )        ";                $output = $this->PseudocodeFormat($output);        return $output;    }        public function CreateBuildRecord($ARR)    {        // ----- CREATE A BUILD RECORD - SHOWS WHAT INVENTORY ITEMS AND QTYs WERE USED -----        // ----- This is used to caluclate proper price of assembly later on -----                //$this->EchoVar('records_assembly_lines', $ARR);                if (!is_array($ARR))    {            $error = "No array passed into function";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        $build_record_array = array();                          // initialize array                foreach ($ARR AS $record) {                             // store values into array            $build_record_array[] = array(                'barcode'       => $record['barcode'],                'quantity_out'  => $record['quantity_out'],                'quantity_in'   => $record['quantity_in'],            );        }                return $build_record_array;                             // return serialize array    }        public function ConvertBuildRecord_OldToNew($ARR_OLD, $BARCODE_CREATED)    {        # FUNCTION :: Convert an old-style build record to new style                $TEMP_ARR = array();                // ----- make part of the array for the barcode being created        $TEMP_ARR[] = array(            'barcode'       => $BARCODE_CREATED,            'quantity_in'   => 1,            'quantity_out'  => 0,        );                // ----- make part of array for barcodes used in assembly        foreach ($ARR_OLD as $barcode => $quantity) {            $TEMP_ARR[] = array(                'barcode'       => $barcode,                'quantity_in'   => 0,                'quantity_out'  => $quantity,            );        }                // ----- send created array into main build record function        $build_record_array = $this->CreateBuildRecord($TEMP_ARR);        return $build_record_array;    }        public function Check_BuildRecord_IsOldStyle($array)    {        # FUNCTION :: Determine if a build record is old-style (single dimensional)                if (is_array(reset($array))) {            $dimensions = $this->Check_BuildRecord_IsOldStyle(reset($array)) + 1;        } else {            $dimensions = 1;        }                $oldversion = ($dimensions == 1) ? 1 : 0;        return $oldversion;    }        }  // -------------- END CLASS --------------