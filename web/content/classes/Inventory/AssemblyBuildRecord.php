<?phpclass Inventory_AssemblyBuildRecord extends Inventory_InventoryBase{    public $Show_Query                          = false;        // ----- INPUT VARIABLES -----    public $Barcode                             = 0;        // ----- OUTPUT VARIABLES -----    public $Barcode_Created                     = 0;            // will hold the barcode being created (might be what was passed in as INPUT variable)            // ----- OTHER VARIABLES -----    public $Record_Assembly_Master              = array();      // will hold the lines used for build record - made public so calling class can access later    public $Records_Assembly_Lines              = array();      // will hold the lines used for build record - made public so calling class can access later            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-02-28',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Handle creation, explosions, and modification of assembly build records - for DB',            'Update Log'    => array(                '2013-02-28_1.0'    => "Module Created",            ),        );            } // -------------- END __construct --------------        public function Pseudocode()    {        # FUNCTION :: Pseudocode for this class. Returned here as a variable so it can be dumped to the screen for review.                $output = "        ==========================================================================        [$this->Classname :: Pseudocode()]        ==========================================================================                [DESCRIPTION:]        Handle all actions related to creating a build record for database storage                [ARRAY DESCRIPTIONS:]                build_record_array = This is the list of barcodes and quantities used to build up an assembly. What is stored in the database is only the used inventory. Stored as a serialized array.        Once unserialized it will look like this:        OLD (WRONG) STYLE        Array        (            [30031] => 1            [10117] => 1            [30299] => 4            [30300] => 6        )        NEW (CORRECT) STYLE        Array        (            [0] => Array                (                    [barcode] => 10068                    [quantity_out] => 0                    [quantity_in] => 1                )            [1] => Array                (                    [barcode] => 30021                    [quantity_out] => 1                    [quantity_in] => 0                )            [2] => Array                (                    [barcode] => 10176                    [quantity_out] => 0                    [quantity_in] => 0                )            [3] => Array                (                    [barcode] => 10078                    [quantity_out] => 0                    [quantity_in] => 0                )            [4] => Array                (                    [barcode] => 10077                    [quantity_out] => 0                    [quantity_in] => 0                )            [5] => Array                (                    [barcode] => 10076                    [quantity_out] => 0                    [quantity_in] => 0                )            [6] => Array                (                    [barcode] => 30298                    [quantity_out] => 0                    [quantity_in] => 0                )        )        ";                $output = $this->PseudocodeFormat($output);        return $output;    }            public function CreateBuildRecord_FromInventoryAssembliesId($inventory_assemblies_id)    {        // ========== GET DETAILS FOR THIS ASSEMBLY - ITEMS IN & ITEMS OUT ==========                        if (!$inventory_assemblies_id)   {            $error = "Missing inventory_assemblies_id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- get master assembly record        $this->Record_Assembly_Master = $this->GetInventoryAssemblies($inventory_assemblies_id);        if (!$this->Record_Assembly_Master) {            $error = "Unable to get master assembly record";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                        // ----- get assembly lines records        $this->Records_Assembly_Lines = $this->GetInventoryAssemblyLines($inventory_assemblies_id);        if (!$this->Records_Assembly_Lines) {            $error = "Unable to get assembly record lines";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                // ----- get the master barcode being created        $master_barcode = $this->Record_Assembly_Master['barcode'];                // ----- add master barcode being created to build record - as the first record        array_unshift ($this->Records_Assembly_Lines, array(            'barcode'       => $this->Record_Assembly_Master['barcode'],             'quantity_out'  => 0,             'quantity_in'   => $this->Record_Assembly_Master['quantity'])            );                //$this->EchoVar('this->Record_Assembly_Master', $this->Record_Assembly_Master);                        // ----- create a build record of what was used (ins and outs)        $build_record_array = $this->CreateBuildRecord($this->Records_Assembly_Lines);                              // ----- store the barcode being created (might be needed by calling class)        // ----- MUST be done last or it can get overwritten by sub-assembly processing        $this->Barcode_Created = $master_barcode;                        // ----- return complete build record        return $build_record_array;    }                public function CreateBuildRecord($ARR)    {        // ----- CREATE A BUILD RECORD - SHOWS WHAT INVENTORY ITEMS AND QTYs WERE USED -----        // ----- This is used to caluclate proper price of assembly later on -----                //$this->EchoVar('records_assembly_lines', $ARR);                if (!is_array($ARR))    {            $error = "No array passed into function";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                // ----- loop for sub-assemblies in the build record        $ARR = $this->ProcessBuildRecord_FindSubAssemblies($ARR);                        $build_record_array = array();                          // initialize array        foreach ($ARR AS $record) {                             // store values into array                        $is_assembly    = (isset($record['is_assembly']))   ? $record['is_assembly']    : 0;            $build_record   = (isset($record['build_record']))  ? $record['build_record']   : null;                        $build_record_array[] = array(                'barcode'       => $record['barcode'],                'quantity_out'  => $record['quantity_out'],                'quantity_in'   => $record['quantity_in'],                'is_assembly'   => $is_assembly,                'build_record'  => $build_record,            );        }                return $build_record_array;                             // return serialize array    }        public function ProcessBuildRecord_FindSubAssemblies($ARR)    {        # FUNCTION :: Process the build record and look for barcodes that are themselves assemblies        #             If found - swap those out for the barcodes in that assembly - trying to create        #             a pure list of all barcodes.        #        # INPUT :: Take in array by reference so we can modify it                        $sub_build_record = array();        foreach ($ARR AS $id => $record) {                        // ----- don't process the inbound (created) inventory item or you'll infinately loop            if ($record['quantity_in'] == 0) {                            $barcode = $record['barcode'];                //$this->EchoVar('barcode', $barcode);                                // ----- check if this barcode is itself an assembly                $is_assembly = $this->CheckIfSubAssembly($barcode);                //$this->EchoVar('is_assembly', $is_assembly);                                                if ($is_assembly) {                                        // ----- this is an assembly so get its build record                    //$Obj_BuildRecord            = new Inventory_AssemblyBuildRecord();                    //$Obj_BuildRecord->Barcode   = $barcode;                    //$sub_build_record           = $Obj_BuildRecord->CreateBuildRecord_FromBarcode();                                        $this->Barcode              = $barcode;                    $sub_build_record           = $this->CreateBuildRecord_FromBarcode();                    $sub_build_record           = $this->ProcessBuildRecord_FindSubAssemblies($sub_build_record);                                        // ----- add the information for this sub-assembly into the build record                                        // ----- remove the (searched on) barcode from the build record                    $ARR[$id]['is_assembly']    = true;                    $ARR[$id]['build_record']   = $sub_build_record;                }                                            }        }                return $ARR;    }        public function ConvertBuildRecord_OldToNew($ARR_OLD, $BARCODE_CREATED)    {        # FUNCTION :: Convert an old-style build record to new style                $TEMP_ARR = array();                // ----- make part of the array for the barcode being created        $TEMP_ARR[] = array(            'barcode'       => $BARCODE_CREATED,            'quantity_in'   => 1,            'quantity_out'  => 0,        );                // ----- make part of array for barcodes used in assembly        foreach ($ARR_OLD as $barcode => $quantity) {            $TEMP_ARR[] = array(                'barcode'       => $barcode,                'quantity_in'   => 0,                'quantity_out'  => $quantity,            );        }                // ----- send created array into main build record function        $build_record_array = $this->CreateBuildRecord($TEMP_ARR);        return $build_record_array;    }        public function Check_BuildRecord_IsOldStyle($array)    {        # FUNCTION :: Determine if a build record is old-style (single dimensional)                if (is_array(reset($array))) {            $dimensions = $this->Check_BuildRecord_IsOldStyle(reset($array)) + 1;        } else {            $dimensions = 1;        }                $oldversion = ($dimensions == 1) ? 1 : 0;        return $oldversion;    }                public function CreateBuildRecord_FromBarcode()    {        # FUNCTION :: Take in a barcode and determine what its default build record should be - then return that build record                if (!$this->Barcode) {            $error = "No barcode";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                // ----- get the default build record ID        $record = $this->SQL->GetRecord(array(            'table' => 'inventory_products',            'keys'  => 'inventory_assemblies_id',            'where' => "barcode='{$this->Barcode}' AND active=1",        ));        $this->EchoQuery();                // ----- get the actual build record        if ($record['inventory_assemblies_id']) {            $build_record_array = $this->CreateBuildRecord_FromInventoryAssembliesId($record['inventory_assemblies_id']);        } else {            $build_record_array = array('ERROR' => "NO BUILD RECORD FOUND FOR BARCODE #{$this->Barcode}. You may not have set barcode to use assembly pricing.");        }                // ----- return complete build record        return $build_record_array;    }                    public function GetInventoryAssemblies($inventory_assemblies_id)    {        // ----- get master assembly record        $record = $this->SQL->GetRecord(array(            'table' => "inventory_assemblies",            'keys'  => "*",            'where' => "`inventory_assemblies_id`='{$inventory_assemblies_id}' AND active=1",        ));        $this->EchoQuery();                $return = ($record) ? $record : 0;        return $return;    }        public function GetInventoryAssemblyLines($inventory_assemblies_id)    {        // ----- get assembly lines records        $records = $this->SQL->GetArrayAll(array(            'table' => " inventory_assembly_lines",            'keys'  => "*",            'where' => "`inventory_assemblies_id`='{$inventory_assemblies_id}' AND active=1",        ));        $this->EchoQuery();                $return = ($records) ? $records : 0;        return $return;    }        public function CheckIfSubAssembly($barcode)    {        // Check if this item is a sub-assembly                $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_assemblies',            'keys'  => 'inventory_assemblies_id',            'where' => "barcode='{$barcode}' AND active=1"        ));        $this->EchoQuery();                $is_subassembly = ($records) ? 1 : 0;        return $is_subassembly;    }    }  // -------------- END CLASS --------------