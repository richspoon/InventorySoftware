<?phpclass Inventory_ProductionWhitesheet extends Inventory_InventoryBase{    public $Show_Query                                  = false;    // (false) TRUE = display database queries used in this class            // ----- INPUT VARIABLES -----    public $Inventory_Production_Board_Whitesheet_Id    = 0;    public $Inventory_Production_Board_Id               = 0;            // ----- OUTPUT VARIABLES -----	        // ----- OTHER VARIABLES -----    public $Type_List = array('Build', 'Ship', 'Receive', 'Request', 'Other');	        public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-03-15',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Electronic Whitesheet',            'Update Log'    => array(                '2013-03-15_1.0'    => "Module Created",            ),        );                        // ----- Process any parameters sent in construct        $this->SetParameters(func_get_args());        $this->Inventory_Production_Board_Whitesheet_Id = $this->GetParameter(0);        $this->Inventory_Production_Board_Id            = $this->GetParameter(1);                        // ----- Configuration for database table        $this->Table                = 'inventory_production_whitesheet';                // database table        $this->Add_Submit_Name      = "{$this->Table}_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_EDIT";        $this->Index_Name           = 'inventory_production_whitesheet_id';             // index field for database table        $this->Flash_Field          = 'inventory_production_whitesheet_id';        $this->Default_Where        = '';                                               // additional search conditions        $this->Default_Sort         = '';                                               // field for default table sort                $this->Field_Titles = array(            "{$this->Table}.inventory_production_whitesheet_id"     => 'Notes ID',            "{$this->Table}.inventory_production_board_id"          => 'Board ID',            "{$this->Table}.type"                                   => 'Type',            "{$this->Table}.user"                                   => 'User',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.duration"                               => 'Duration',            "{$this->Table}.description"                            => 'Description',            "{$this->Table}.quantity"                               => 'Quantity',                        "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                $this->Join_Array           = Array();        $this->Group_By             = "";        $this->Default_Fields       = 'type, user, date, duration, description, quantity';        $this->Edit_Links_Count     = 3;        $this->Unique_Fields        = '';                $this->Default_Values   = array(            'date'                          => date('Y-m-d'),            'inventory_production_board_id' => $this->Inventory_Production_Board_Id,        );                $this->Use_Selection_Tab    = true;         // (TRUE) false = hide the search tab on the table        $this->Default_List_Size    = 20;           // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window            } // -------------- END __construct --------------    public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                        $action = Get('action');        switch ($action) {            case 'add':                // ----- add a new record                $this->AddRecord();            break;                        case 'edit':                // ----- add a new record                $this->EditRecord($this->Inventory_Production_Board_Whitesheet_Id);            break;                        case 'viewall':                // ----- view all records tied to a specific production_board_id                $this->ViewAllRecords();            break;                        case 'list':            default:                // ----- list all existing records                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {            default:            break;        }                echo $return;    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                        // ----- required javascript functions        $this->JavascriptDatepickerFunctionality(array('FORM_date'));       // date-picker functionality        $this->JavascriptTimepickerFunctionality(array('FORM_duration'));   // time-picker functionality                        // ----- create lists from existing database fields        $user_list              = Form_ArrayToList($this->SQL->GetFieldValues($this->Table, 'user', "user != ''"));        $type_list              = Form_ArrayToList($this->Type_List);                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">BASIC DETAILS</div>',                                #'text|production board ID|inventory_production_board_id|N|60|255',                'hidden|inventory_production_board_id',                                "select|Type|type|N|40|{$type_list}",                "selecttext|User|user|N|40|80||{$user_list}",                'text|Date|date|N|20|255',                'text|Duration|duration|N|20|255',                'text|Quantity|quantity|N|20|255',                'textarea|Description|description|N|30|2',                            'code|</div>',        );        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function ViewAllRecords()    {        # FUNCTION :: View all the records tied to a specific Inventory_Production_Board_Id                if (!$this->Inventory_Production_Board_Id) {            $error = "Missing Inventory_Production_Board_Id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $records = $this->GetExisting($this->Inventory_Production_Board_Id);        $output = '';                if ($records) {            foreach ($records as $id => $record) {                $output .= $this->FormatRecordForOutput($record);            }        }                echo $output;    }        public function FormatRecordForOutput($RECORD)    {        # FUNCTION :: Format a record for output to the screen                $output = '';        if (is_array($RECORD)) {                        $parts      = explode(':', $RECORD['duration']);            $duration   = "{$parts[0]}:{$parts[1]}";                        $output = "                <div class='pb_day_data' style='width: 400px;'>                    <div class='pb_day_data_title'><b>{$RECORD['user']}</b> ({$RECORD['date']})</div>                    <table width='100%' class='pb_day_data_hr'>                    <tr>                        <td><b>Type:</b> {$RECORD['type']}</td>                        <td><b>Quantity:</b> {$RECORD['quantity']}</td>                        <td><b>Duration:</b> {$duration}</td>                    </tr>                    </table>                    <br />                    <div class='pb_day_data_description'>{$RECORD['description']}</div>                </div>                ";        }                return $output;    }        public function GetExisting($ID)    {        $records = $this->SQL->GetArrayAll(array(            'table' => $this->Table,            'keys'  => '*',            'where' => "inventory_production_board_id='{$ID}' AND active=1",        ));                return $records;    }        public function GetExistingCount($ID)    {        $count = $this->SQL->Count(array(            'table' => $this->Table,            'where' => "inventory_production_board_id='{$ID}' AND active=1",        ));                return $count;    }            }  // -------------- END CLASS --------------