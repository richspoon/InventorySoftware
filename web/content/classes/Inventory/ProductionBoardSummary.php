<?phpclass Inventory_ProductionBoardSummary extends Inventory_InventoryBase{    public $Show_Query                          = false;    // (false) TRUE = display database queries used in this class            // ----- INPUT VARIABLES -----            // ----- OUTPUT VARIABLES -----	        // ----- OTHER VARIABLES -----	            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-06-13',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-06-26',            'Filename'      => $this->Classname,            'Version'       => '1.1.0',            'Description'   => 'Summary of production',            'Update Log'    => array(                '2013-06-13_1.0.0'    => "Module Created",                '2013-06-26_1.1.0'    => "Changes to support piped table format",            ),        );                        // ----- Process any parameters sent in construct        //$this->SetParameters(func_get_args());        //$this->Inventory_Production_Board_Notes_Id      = $this->GetParameter(0);        //$this->Inventory_Production_Board_Id            = $this->GetParameter(1);                                // ----- Configuration for database table        $this->Table                = 'inventory_production_summary';               // database table        $this->Add_Submit_Name      = "{$this->Table}_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_EDIT";        $this->Index_Name           = 'inventory_production_summary_id';            // index field for database table        $this->Flash_Field          = 'inventory_production_summary_id';        $this->Default_Where        = '';                                               // additional search conditions        $this->Default_Sort         = '';                                               // field for default table sort                $this->Field_Titles = array(            "{$this->Table}.inventory_production_summary"           => 'Summary ID',            "{$this->Table}.title"                                  => 'Title',            "{$this->Table}.description"                            => 'Description',            "{$this->Table}.sort_order"                             => 'Sort Order',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.format_table"                                   => 'Table',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                $this->Join_Array           = Array();        $this->Group_By             = "";        $this->Default_Fields       = 'title, description, date, sort_order';        $this->Edit_Links_Count     = 3;        $this->Unique_Fields        = '';                $this->Default_Values   = array(            'date' => date('Y-m-d'),        );                $this->Use_Selection_Tab    = true;         // (TRUE) false = hide the search tab on the table        $this->Default_List_Size    = 20;           // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = true;         // (TRUE) true = after editing a recod - close the edit window            } // -------------- END __construct --------------    public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                        $action = Get('action');        switch ($action) {            case 'add':                // ----- add a new record                $this->AddRecord();            break;                        case 'edit':                // ----- add a new record                $this->EditRecord();            break;                        case 'viewall':                // ----- view all records tied to a specific production_board_id                $this->ViewAllRecords();            break;                        case 'list':            default:                // ----- list all existing records                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {            default:            break;        }                echo $return;    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                        // ----- required javascript functions        $this->JavascriptDatepickerFunctionality(array('FORM_date'));       // date-picker functionality                // ----- create lists from existing database fields        //$user_list              = Form_ArrayToList($this->SQL->GetFieldValues($this->Table, 'user', "user != ''"));                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        "code|<div class='shadow form_section_wrapper'>",                'hidden|inventory_production_summary_id',                'text|Title|title|Y|20|255',                'html|Description|description|Y|30|6',                'text|Sort Order|sort_order|N|3|255',                'text|Date|date|N|20|255',                'checkbox|Table Format|format_table||1|0',            'code|</div>',        );        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }            public function ViewAllRecords()    {        # FUNCTION :: View all the records tied to a specific Inventory_Production_Board_Id                /*        if (!$this->Inventory_Production_Board_Id) {            $error = "Missing Inventory_Production_Board_Id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }        */                $records = $this->GetExisting();        $output = '';                if ($records) {            foreach ($records as $id => $record) {                $output .= $this->FormatRecordForOutput($record);            }        }                return $output;    }            public function FormatRecordForOutput($RECORD)    {        # FUNCTION :: Format a record for output to the screen                $output = '';        if (is_array($RECORD)) {                        $description = $RECORD['description'];                        if ($RECORD['format_table'] == 1) {                $description = $this->ConvertPipedTableToTable($description);            }                        $output = "                <div class='pb_day_data' style='width: 400px;'>                    <div class='pb_day_data_title'><b>{$RECORD['title']}</b> ({$RECORD['date']})</div>                    <div class='pb_day_data_description'>{$description}</div>                </div>                ";        }                return $output;    }        public function GetExisting()    {        $records = $this->SQL->GetArrayAll(array(            'table' => $this->Table,            'keys'  => '*',            'where' => "active=1",        ));                return $records;    }            public function ViewRecord($id, $field_list='', $field='')    {        # FUNCTION :: function to view a record                        // ----- get original record from database -----        $record = $this->SQL->GetRecord(array(            'table' => $this->Table,            'keys'  => "*",            'where' => "{$this->Index_Name}={$id}",        ));        $this->EchoQuery();                        // ----- output the content -----        $output = "            <div class='vr_header'>{$record['retailer_code']}</div>            <div class='vr_header_barcode'>{$record['barcode']}</div>            <br /><br />            <div class='vr_header'>COGS: {$cogs}</div>            <div class='__vr_header_barcode'>Default Cost: {$default_cost}</div>            <br /><br />                        {$general}            {$vendor}            {$assembly}            {$price_reference}            ";        echo $output;            }        public function ConvertPipedTableToTable($CONTENT)    {        $output         = '';       // initialize variable        $td_content     = '';       // initialize variable        $tr_content     = '';       // initialize variable        $colspan_max    = 0;        // initialize variable        $colspan_curr   = 0;        // initialize variable                $CONTENT    = str_replace(array("\n\r", "\r\n"), "\n", $CONTENT);   // replace all line returns        $lines      = explode("\n", $CONTENT);                              // explode on new lines                foreach ($lines as $line) {            $td_content     = '';           // reset variable            $colspan_curr   = 0;            // reset variable            $td_style       = '';           // reset variable                        // ----- determine if single or multiple cells in this row            $pos = strpos($line, '|');            if ($pos === false) {                // only one cell in this row                $content        = ($line == "") ? "</br>" : $line;                                $pos = strpos($content, '{c}');                if ($pos !== false) {                    $content    = str_replace('{c}', '', $content);                    $td_style   = "text-align:center;";                }                                $td_content    .= "<td style='{$td_style}' colspan='[[colspan_max]]'>{$content}</td>";                $colspan_curr++;            } else {                // multiple cells in this row                $parts = explode('|', $line);                                foreach ($parts as $part) {                    $content        = trim($part);                    $content        = ($content == "") ? "</br>" : $content;                                        $pos = strpos($content, '{c}');                    if ($pos !== false) {                        $content    = str_replace('{c}', '', $content);                        $td_style   = "text-align:center;";                    }                                    $td_content    .= "<td style='{$td_style}'>{$content}</td>";                    $colspan_curr++;                }            }                        $colspan_max    = ($colspan_curr > $colspan_max) ? $colspan_curr : $colspan_max;            $tr_content    .= "<tr>{$td_content}</tr>";        }                $tr_content     = str_replace("[[colspan_max]]", $colspan_max, $tr_content);        $output         = "<table border='0' style='font-size:14px''>{$tr_content}</table>";                return $output;    }}  // -------------- END CLASS --------------