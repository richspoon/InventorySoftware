<?phpclass Inventory_Fix_PODeactivatedLinesAcivate extends Inventory_InventoryBase{    public $Show_Query                  = true;    // TRUE = show the database queries    public $Run_Fix                     = true;    // TRUE = run the actual database updates            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-03-06',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Fix bad data -  purchase orders - incorectly deactivated records.',            'Update Log'    => array(                '2013-03-06_1.0'    => "Module Created",            ),        );            } // -------------- END __construct --------------        public function Execute()    {        /* ===== P-CODE ===========================                ======================================== */                        // ----- GET ALL THE DATABASE RECORDS        #$records_po         = $this->GetAllRecords_InventoryPurchaseOrders();        #$records_lines      = $this->GetAllRecords_InventoryPurchaseOrderLines();        $records_received   = $this->GetAllRecords_InventoryPurchaseOrderReceived();                                                        $passed = true;        # ===== START TRANSACTION ============================================================        $this->SQL->StartTransaction();                                        // ----- LOOP THROUGH EACH RECEIVED RECORD - AND UPDATE ITS PARENT LINE (if it was received and active - its parent must be active)        foreach ($records_received as $record) {                        $inventory_purchase_order_received_id   = $record['inventory_purchase_order_received_id'];            $inventory_purchase_orders_id           = $record['inventory_purchase_orders_id'];            $inventory_purchase_order_lines_id      = $record['inventory_purchase_order_lines_id'];                                    // ----- RE-ACTIVE THE line            $db_record = array(                'active'    => 1,            );                        // ----- Update the inventory_assembly_build record -----            if ($this->Run_Fix) {                $where      = "inventory_purchase_order_lines_id='{$inventory_purchase_order_lines_id}'";                $result     = $this->UpdateRecordLoc('inventory_purchase_order_lines', $db_record, $where);                $passed     = (!$result) ? false : $result;                $this->EchoQuery();            } else {                $this->EchoVar('<br />UPDATE QUERY NOT ACTIVE', '&nbsp;', 'red');                $this->EchoVar('db_record', $db_record);            }                    }                        # ===== COMMIT TRANSACTION ============================================================        if ($passed && $this->Run_Fix) {            $this->SQL->TransactionCommit();        }    }          public function GetAllRecords_InventoryPurchaseOrders()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_purchase_orders',            'keys'  => '*',            'where' => "",        ));        $this->EchoQuery();                return $records;    }        public function GetAllRecords_InventoryPurchaseOrderLines()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_purchase_order_lines',            'keys'  => '*',            'where' => "(inventory_purchase_orders_id='' OR inventory_purchase_orders_id=0)", // AND active=1        ));        $this->EchoQuery();                return $records;    }        public function GetAllRecords_InventoryPurchaseOrderReceived()    {         $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_purchase_order_received',            'keys'  => '*',            'where' => "active=1",        ));        $this->EchoQuery();                return $records;    }        }  // -------------- END CLASS --------------