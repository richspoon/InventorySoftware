<?phpclass Inventory_Fix_NoUID extends Inventory_InventoryBase{    public $Show_Query                  = false;            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-08-14',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Fix bad data - inventory_sales_orders with in UID.',            'Update Log'    => array(                '2012-12-11_1.0'    => 'Module Created',            ),        );            } // -------------- END __construct --------------        public function Execute()    {        /* ===== P-CODE ===========================                1. Get all inventory_counts with a date 0000-00-00        2. Determine the actual date based on the record its tied to        3. Adjust the inventory_counts to correct date                ======================================== */                        $records = $this->GetAllRecords();        $this->EchoVar('records', $records);                        $passed = false;        # ===== START TRANSACTION ============================================================        $this->SQL->StartTransaction();                $OBJ_SO = new Inventory_InventorySalesOrderPlace();                if ($records){        foreach ($records as $record) {                        $inventory_sales_orders_id  = $record['inventory_sales_orders_id'];            $uid                        = $OBJ_SO->MakeUniversalId();                        if (true) {                // ----- Update the inventory_counts record -----                $db_record = array(                    'universal_id' => $uid,                );                                $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_sales_orders',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_sales_orders_id`='{$inventory_sales_orders_id}'",                ));                $passed = (!$result) ? false : $passed;                $this->EchoQuery(true);            }                    } // end foreach        } else {            echo "<h2>NO REOCRDS TO MODIFY</h2>";        } // end record check                        /*        if (!$passed) {            echo "<h2>QUERY FAILED - NOT PASSED</h2>";        }        */                $passed = true;        # ===== COMMIT TRANSACTION ============================================================        if ($passed) {            $this->SQL->TransactionCommit();            // save the database transactions to database        } else {            $this->SQL->Rollback();                     // remove all the database transactions from the database        }    }          public function GetAllRecords()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_sales_orders',            'keys'  => "*",            'where' => "`universal_id` = ''",        ));        $this->EchoQuery();        //$this->EchoVar('records', $records);                return $records;            }            }  // -------------- END CLASS --------------