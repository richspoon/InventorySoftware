<?phpclass Inventory_Fix_ZeroDollarInventoryAdjustment extends Inventory_InventoryBase{    public $Show_Query                  = false;            public function  __construct()    {        parent::__construct();                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-12-04',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => $this->Classname,            'Version'       => '1.0',            'Description'   => 'Fix bad data - invnetory adjustments worth $0.',            'Update Log'    => array(                '2012-12-04_1.0'    => 'Module Created',            ),        );            } // -------------- END __construct --------------        public function Execute()    {        /* ===== P-CODE ===========================                1. Get all inventory_counts with an adjustment that worth $0        2. Determine the actual adjustment price based on default value        3. Adjust the invnetory adjustment to correct value        4. Modify the notes on the adjustment        5. update the main record                ======================================== */                        $records = $this->GetAllRecords();        //$this->EchoVar('records', $records);                        $passed = false;        # ===== START TRANSACTION ============================================================        $this->SQL->StartTransaction();                                if ($records){        foreach ($records as $record) {                        if ($this->StatusInventoryItemExist($record['barcode'])) {                                echo "<br /><br />";                $quantity_main       = ($record['qty_in'] + $record['qty_out']);                if ($quantity_main != $record['quantity']) {                    echo "<br /><div style='color:red; font-weight:bold;'>ERROR ON QUANTITY</div>";                }                                                                $this->EchoVar('barcode', $record['barcode']);                $this->EchoVar('part_cost', $record['part_cost']);                $this->EchoVar('quantity', $record['quantity']);                $this->EchoVar('quantity_main', $quantity_main);                                                                                if ($quantity_main == 0 && $record['quantity'] == 0) {                                    // ===== DEACTIVATE 0-QTY RECORDS =====                    $this->DeactivateZeroQuantityRecords($record);                                    } else {                                        $quantity       = $quantity_main; //$record['quantity'];                    $price_each     = $record['part_cost'];                    $price_total    = $quantity * $price_each;                    $notes          = $record['notes'] . " Modifed to eliminate $0 inventory adjustment (RAW 12-4-12).";                                        if ($price_each > 0) {                        // ----- Update the inventory_adjustments record -----                        $db_record = array(                            'quantity'          => $quantity_main,                            'price_each'        => $price_each,                            'price_total'       => $price_total,                            //'notes'             => $notes,                        );                                                $where                      = "inventory_adjustments_id='{$record['inventory_adjustments_id']}'";                        $result                     = $this->UpdateRecordLoc('inventory_adjustments', $db_record, $where);                        $this->EchoQuery(true);                    } else {                        echo "<div style='color:red;'>NO PRICE INFORMATION</div>";                    }                                        if (false) {                        // ----- Update the inventory_counts record -----                        $db_record = array(                            'notes'             => $notes,                        );                                                $where                      = "inventory_counts_id='{$record['inventory_counts_id']}'";                        $result                     = $this->UpdateRecordLoc('inventory_counts', $db_record, $where);                        $this->EchoQuery(true);                    }                } // end qty_main == 0                            } // end active check                    } // end foreach        } else {            echo "<h2>NO REOCRDS TO MODIFY</h2>";        } // end record check                        /*        if (!$passed) {            echo "<h2>QUERY FAILED - NOT PASSED</h2>";        }        */                $passed = true;        # ===== COMMIT TRANSACTION ============================================================        if ($passed) {            $this->SQL->TransactionCommit();        }    }          public function GetAllRecords()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_counts',            'keys'  => 'inventory_counts.*, inventory_products.part_cost, inventory_adjustments.inventory_adjustments_id, inventory_adjustments.quantity, inventory_products.retailer_code, inventory_products.description',            'where' => "inventory_adjustments.price_each=0 && inventory_adjustments.price_total=0 AND status_allow_zerocost=0 AND inventory_counts.active=1",            'joins' => "                LEFT JOIN inventory_products ON inventory_products.barcode = inventory_counts.barcode                LEFT JOIN inventory_adjustments ON inventory_adjustments.inventory_adjustments_id = inventory_counts.ref_adjustment_id            ",        ));                if ($records) {            $this->EchoQuery();            return $records;        } else {            echo "<h2>ERROR IN QUERY</h2>";            $this->EchoQuery();        }    }          public function DeactivateZeroQuantityRecords($record)    {        # FUNCTION :: Deactivate 0-QTY Records                // ----- Update the inventory_adjustments record -----        $db_record                  = array('active' => 0,);        $where                      = "inventory_adjustments_id='{$record['inventory_adjustments_id']}'";        $result                     = $this->UpdateRecordLoc('inventory_adjustments', $db_record, $where);        $this->EchoQuery(true);                        // ----- Update the inventory_counts record -----        $db_record                  = array('active' => 0,);        $where                      = "inventory_counts_id='{$record['inventory_counts_id']}'";        $result                     = $this->UpdateRecordLoc('inventory_counts', $db_record, $where);        $this->EchoQuery(true);    }                /*UPDATE `inventory_counts` SET`notes`="Original inventory count. Price based on default price. Modifed to eliminate $0 inventory adjustment (RAW 12-4-12)."WHERE `notes`="Original inventory count. Price based on default price. Modifed to eliminate $0 inventory adjustment (RAW 12-4-12). Modifed to eliminate $0 inventory adjustment (RAW 12-4-12). Modifed to eliminate $0 inventory adjustment (RAW 12-4-12).";UPDATE `inventory_adjustments` SET`notes`="Original inventory count. Price based on default price. Modifed to eliminate $0 inventory adjustment (RAW 12-4-12)."WHERE `notes`="Original inventory count. Price based on default price. Modifed to eliminate $0 inventory adjustment (RAW 12-4-12). Modifed to eliminate $0 inventory adjustment (RAW 12-4-12). Modifed to eliminate $0 inventory adjustment (RAW 12-4-12).";*/    }  // -------------- END CLASS --------------