<?phpclass Inventory_InventoryPurchaseOrderPlace extends Inventory_InventoryBase{    public $Show_Query                      = false;    public $Locked                          = false;    public $Inventory_Purchase_Orders_Id    = 0;    public $Module_Offline                  = false;                        // (false) TRUE = dispaly offline message to users        private $PO_Date_Format                 = "";    private $Allow_Zero_Line_PO             = true;                         // (true) TRUE = allow POs to bre created without any inventory lines    public $Show_Template_Swap_Name         = false;                        // (false) true = show the swap value name for template system        //private $Module_Help_Instructions_Id    = 1;                            // what Help_Instructions_Id to use for this module    //private $Module_Help_Page_Title         = "PURCHASE ORDERS";            // ----- AUTOTABLE VARIABLES -----    private $Table_Header_Row               = "ID|Barcode|APDM SKU|Manufacturer SKU|Description|QTY|Price (ea)|Price (total)|DEL";    private $Table_Holder_DIV               = "autotable_holder";               // defines hidden textarea that will hold the text array    private $Table_Display_DIV              = "autotable_table_display";        // defines the div that wraps the created table    private $Table_Delimiter                = '|';        // ----- FILE UPLOAD VARIABLES -----    private $Window_Width               = 820;                          // needs to be larger than Pipeline_Table_Width    private $Files_Width                = 800;                          // files area - width     private $Files_Font_Size            = 13;                           // files area - font size    private $Files_Font_Size_2          = 10;                           // files area - font size (file details)    private $Files_Area_Wrapper_Id      = "file_add_record_wrapper";    // files area - wrapper id    public $Existing_Files_Count        = 0;                            // will hold count of files uploaded    public $Files_Upload_Type           = 'purchaseorder';              // type of file being uploaded        // ----- FORM ARRAY VARIABLES    private $Show_PO_Details            = true;                         // (true) TRUE = turn on form array section    private $Show_Reference             = false;                        // (true) TRUE = turn on form array section    private $Show_Order_Table           = true;                         // (true) TRUE = turn on form array section    private $Show_Files                 = true;                         // (true) TRUE = turn on form array section    private $Show_Notes                 = true;                         // (true) TRUE = turn on form array section        // ----- NOTES VARIABLES -----    private $Existing_Notes_Count       = 0;                            // will hold the number of notes for this sales order    private $Notes_Width                = 800;                          // notes area - width     private $Notes_Font_Size            = 14;                           // notes area - font size    private $Note_Area_Wrapper_Id       = "note_add_record_wrapper";    // notes area - wrapper id        // ----- OTHER VARIABLES    private $Color_Status_Open          = "#b2ffb2";    private $Color_Status_Partial       = "#ffff80;";    private $Color_Status_Closed        = "#ffcccc";    private $Color_Status_Force_Closed  = "#ffcccc";            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-11-05',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-09-30',            'Filename'      => $this->Classname,            'Version'       => '1.12',            'Description'   => 'Create a purchase order',            'Update Log'    => Array(                '2012-11-30_001'    => "Added vendor information field",                '2012-11-30_002'    => "Added new formatting and ability to calculate prices",                '2013-01-02_001'    => "Added code for editing an existing PO",                '2013-01-03_001'    => "Added code for collapsing divs",                '2013-01-08_001'    => "Modified PostProcess() to clean the dollar sign off of price - otherwise won't save correctly",                '2013-03-06_1.6'    => "Various code restructuring for access control. Switched method of tracking PO to using the database ID and not the PO#",                '2013-06-03_1.7'    => "Bug fix date not showing correctly in table view",                '2013-07-15_1.8.0'  => "Upgrade to support uploading files",                '2013-07-23_1.8.1'  => "Added manufacturer sku to table",                '2013-07-25_1.9.0'  => "Upgrade to support partial modification even after inventory received",                '2013-08-06_1.9.1'  => "Upgrade to PostProcessFormValues() success processing",                '2013-08-17_1.10.0' => "Adding notes and template swaps. And ability to force close",                '2013-09-16_1.11.0' => "New viewing option for remaining inventory value - and status searching. Moved status colors to variables.",                '2013-09-30_1.12'   => "Changed default view settings.",            ),        );                $this->SetParameters(func_get_args());        $this->Inventory_Purchase_Orders_Id          = $this->GetParameter(0);                        $this->PO_Date_Format   = $this->GetSetting('purchase_order_date_format');     // get setting from inventory_settings table                        $this->Table            = 'inventory_purchase_orders';        $this->Index_Name       = 'inventory_purchase_orders_id';                $this->Default_Where    = '';               // additional search conditions        $this->Default_Sort     = 'date DESC';      // field for default table sort                $this->Add_Submit_Name  = "{$this->Table}_SUBMIT_ADD";        $this->Edit_Submit_Name = "{$this->Table}_SUBMIT_EDIT";        $this->Flash_Field      = $this->Index_Name;                $this->Field_Titles = array(            "{$this->Table}.inventory_purchase_orders_id"           => 'Inventory Purchase Orders Id',                        "{$this->Table}.po_number"                              => 'PO Number',            "{$this->Table}.vendor"                                 => 'Vendor',            //"{$this->Table}.ref_document_url"                       => 'Ref URL',            //"{$this->Table}.ref_document_number"                    => 'Ref Number',            "{$this->Table}.date"                                   => 'Date',            "{$this->Table}.cost_shipping"                          => 'Cost (shipping)',            "{$this->Table}.cost_other"                             => 'Cost (other)',                        "{$this->Table}.active AS STATUS"                       => 'Status',                        "(if(            (            (ifnull((SELECT SUM(`quantity`)  FROM `inventory_purchase_order_lines`       WHERE `inventory_purchase_order_lines`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id` AND `inventory_purchase_order_lines`.active=1),0)) -             (ifnull((SELECT SUM(`quantity`)  FROM `inventory_purchase_order_received`    WHERE `inventory_purchase_order_received`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id` AND `inventory_purchase_order_received`.active=1),0))            )>0 AND status_force_closed=0,'open','closed')) AS SPECIAL_STATUS" => 'Special Status ',                        "{$this->Table}.status_force_closed"                    => 'Status FORCE',                        "(SELECT SUM(`price_total`) AS EST_LINE_ITEM_COST       FROM `inventory_purchase_order_lines`       WHERE `inventory_purchase_order_lines`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id` AND `inventory_purchase_order_lines`.active=1) AS EST_LINE_ITEM_COST" => 'Estimated Line Item Cost',            "(SELECT SUM(`price_total`) AS RCVD_LINE_ITEM_COST      FROM `inventory_purchase_order_received`    WHERE `inventory_purchase_order_received`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id` AND `inventory_purchase_order_received`.active=1) AS RCVD_LINE_ITEM_COST" => 'Received Line Item Cost',                        "(            (ifnull((SELECT SUM(`price_total`)  FROM `inventory_purchase_order_lines`       WHERE `inventory_purchase_order_lines`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id` AND `inventory_purchase_order_lines`.active=1),0)) -             (ifnull((SELECT SUM(`price_total`)  FROM `inventory_purchase_order_received`    WHERE `inventory_purchase_order_received`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id` AND `inventory_purchase_order_received`.active=1),0))            ) AS REMAINING_LINE_ITEM_COST" => 'Remaining Line Item Cost',                                                "(            (ifnull((SELECT SUM(`quantity`)  FROM `inventory_purchase_order_lines`       WHERE `inventory_purchase_order_lines`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id` AND `inventory_purchase_order_lines`.active=1),0)) -             (ifnull((SELECT SUM(`quantity`)  FROM `inventory_purchase_order_received`    WHERE `inventory_purchase_order_received`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id` AND `inventory_purchase_order_received`.active=1),0))            ) AS REMAINING_LINE_ITEM_NUMBER" => 'Remaining Line Item QTY',                                                "{$this->Table}.notes"                                  => 'Notes',            "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                $this->Join_Array = Array(            'inventory_counts'  => "LEFT OUTER JOIN `inventory_purchase_order_lines` ON `inventory_purchase_order_lines`.`inventory_purchase_orders_id` = `inventory_purchase_orders`.`inventory_purchase_orders_id`",        );                $this->Default_Fields   = 'po_number, vendor, date, EST_LINE_ITEM_COST, cost_shipping, cost_other, STATUS';        $this->Unique_Fields    = '';                $this->Default_Values   = array(            'status'    => 'open',            'date'      => date('Y-m-d'),        );                $this->Close_On_Success = true;        $this->Default_List_Size    = 500;         // how many records to show when table initially loads (higher = slower performance but better user experience)                                //$this->Edit_Links_Count = '4';        //$this->Use_Selection_Tab    = false;        // false = hide the search tab on the table                    } // -------------- END __construct --------------        public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                $this->ModuleOfflineMessage();                      // show module offline essage - if activated        $this->JavascriptConfirmDeleteAndOpenWindow();      // Javascript needed for deleting records from table with confirmation                $action = Get('action');        switch ($action) {            case 'add':                // ----- Adding a new record                #$this->Default_Values['barcode'] = $this->Barcode;                $this->AddRecord();            break;                        case 'delete':                // ----- special delete case because a lot of different records need to be modified                $this->DeletePurchaseOrder();            break;                                    case 'force_close':                $this->PO_ForceCloseStatus(1);            break;            case 'force_open':                $this->PO_ForceCloseStatus(0);            break;                                    case 'list':            default:                // ----- display table list of records                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'autocomplete_inventory_lookup':                                // LOOK UP ALL ACTIVE INVENTORY ITEMS                                // query database for records                $query = Get('term');                $records = $this->SQL->GetArrayAll(array(                    'table' => ' inventory_products',                    'keys'  => 'description, retailer_code, barcode, manufacturer_code, status_retired',                    'where' => "(description LIKE '%{$query}%' OR barcode LIKE '%{$query}%' OR retailer_code LIKE '%{$query}%' OR manufacturer_code LIKE '%{$query}%') AND active=1",                ));                                // for records into array format for JSON                $arr = array();                foreach ($records as $record) {                    $retired = ($record['status_retired'] == 1) ? "[Retired] -" : "";                    $arr[] = array(                        'label'             => "{$record['barcode']} - {$retired} {$record['retailer_code']} - ({$record['manufacturer_code']})",                        'description'       => $record['description'],                        'sku'               => $record['retailer_code'],                        'barcode'           => $record['barcode'],                        'manufacturer_code' => $record['manufacturer_code'],                    );                }                                // convert to JSON format                echo json_encode($arr);     // echo out in JSON form                 $return = '';               // clear return value or it will output and screw up return            break;                        case 'load_files':                $this->Inventory_Purchase_Orders_Id     = Get('ipoid');                $return                                 = $this->LoadFilesArea(true);            break;                        case 'load_notes':                $this->Inventory_Purchase_Orders_Id = Get('poid');                $return = $this->LoadNotesArea(true);            break;        }                echo $return;    }        private function JavascriptAutocomplete()    {        $eq = EncryptQuery('class=Inventory_InventoryPurchaseOrderPlace');       // Class the autocomplete should call (ideally this class)                $script = <<<SCRIPT                        // ----- autocomplete -----            var termTemplate = "<span class='ui-autocomplete-term'>%s</span>";                        $('#FORM_temp_0').autocomplete({                                 source          : 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq=$eq;action=autocomplete_inventory_lookup',                minChars        : 0,        // how many characters tot ype before starting function call                selectFirst     : true,     // allows tab to select the top option in returned values                autoFocus       : true,                                // where do we stick the returned results                select: function( event, ui ) {                    $( "#FORM_temp_0" ).val( ui.item.label );                    $( "#FORM_temp_1" ).val( ui.item.barcode );                 // store Barcode                    $( "#FORM_temp_2" ).val( ui.item.sku );                     // store APDM SKU                    $( "#FORM_temp_4" ).val( ui.item.description );             // store Description                    $( "#FORM_temp_8" ).val( ui.item.manufacturer_code );       // store Manufacturer Code                         return false;                },                                // format the matched text in search terms                // NOTE/BUG :: Currently case sensitive so doesn't highlight non-case-matching results                open: function(e,ui) {                    var                        acData = $(this).data('autocomplete'),                        styledTerm = termTemplate.replace('%s', acData.term);                    acData                        .menu                        .element                        .find('a')                        .each(function() {                            var me = $(this);                            me.html( me.text().replace(acData.term, styledTerm) );                        });                }            })                        // format the display of the data in the autocomplete (should probably be a custom function on this class)            // (everything else should be in the base class)            .data( "autocomplete" )._renderItem = function( ul, item ) {                return $( "<li>" )                    .data( "item.autocomplete", item )                    .append( "<a>" + item.label + " <br>" + item.description + "</a>" )                    .appendTo( ul );            };            SCRIPT;        AddScriptOnReady($script);    }        private function JavascriptCreateTable()    {        $this->ScriptJSONTableGeneric();                                // Add in the generic code held in the BaseClass        $this->ScriptCalculatePrice();                                  // Javascript for autocompleting price textboxes                $script = <<<SCRIPT                    // ===== USER DEFINED VARIABLES =====            var targetTextID        = "FORM_{$this->Table_Holder_DIV}";     // defines hidden textarea that will hold the text array            var targetTableDivID    = "{$this->Table_Display_DIV}";            // defines the div that wraps the created table            var requiredFieldArray  = ["FORM_temp_1","FORM_temp_5"];            var headerText          = "{$this->Table_Header_Row}";                                    var fieldQty            = "FORM_temp_5";                    // In form - field holding quantity -- defined here for function ScriptCalculatePrice()            var priceEach           = "FORM_temp_6";                    // In form - field for price each -- defined here for function ScriptCalculatePrice()            var priceTotal          = "FORM_temp_7";                    // In form - field for price total -- defined here for function ScriptCalculatePrice()                                    function formTableRow() {                var delimiter           = "{$this->Table_Delimiter}";                var id                  = "";                var barcode             = $("#FORM_temp_1").val();                var sku                 = $("#FORM_temp_2").val();                var manufacturer_sku    = $("#FORM_temp_8").val();                var description         = $("#FORM_temp_4").val();                var qty                 = $("#FORM_temp_5").val();                var priceEach           = $("#FORM_temp_6").val();                var priceTotal          = $("#FORM_temp_7").val();                                // ----- create the string that will be added to table.                // ----- no starting or ending delimiter                // ----- action buttons will be added by other function                var output = id + delimiter + barcode + delimiter + sku + delimiter + manufacturer_sku + delimiter + description + delimiter + qty + delimiter + priceEach + delimiter + priceTotal;                return output;            }                        function clearDataTextboxes() {                // -- clear the textboxes used to search on table data                $("#FORM_temp_0").val('');                $("#FORM_temp_1").val('');                $("#FORM_temp_2").val('');                $("#FORM_temp_4").val('');                $("#FORM_temp_5").val('');                $("#FORM_temp_6").val('');                $("#FORM_temp_7").val('');                $("#FORM_temp_8").val('');                            }SCRIPT;        AddScript($script);                $script = <<<SCRIPT            // -- call table creation function on load            // -- rebuilds table after coming back from form errors            var targetText          = $("#" + targetTextID);      // defines hidden textarea that will hold the text array            var targetTableDiv      = $("#" + targetTableDivID);    // defines the div that wraps the created table            createTableFromTextbox(targetText, targetTableDiv);SCRIPT;        AddScriptOnReady($script);    }        public function GetLockedStatus($ID)    {        // ----- determine if purchase order should be locked        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_purchase_order_received",            'keys'      => "*",            'where'     => "`inventory_purchase_orders_id`='{$ID}' AND active=1",        ));        $this->EchoQuery();                $locked = ($records) ? true : false;                return $locked;    }        public function GetExistingRecords($ID)    {        // ----- get all records from the database        $records = $this->SQL->GetArrayAll(array(            'table'     => "inventory_purchase_order_lines",            'keys'      => "inventory_purchase_order_lines.*, inventory_products.description, inventory_products.retailer_code, inventory_products.manufacturer_code,                             (SELECT SUM(`quantity`) FROM `inventory_purchase_order_received` WHERE `inventory_purchase_order_received`.`inventory_purchase_order_lines_id`=`inventory_purchase_order_lines`.`inventory_purchase_order_lines_id` AND `inventory_purchase_order_received`.active=1) AS QTY_RECEIVED            ",            'where'     => "`inventory_purchase_orders_id`='{$ID}' and `inventory_purchase_order_lines`.`active`=1",            'joins'     => "LEFT JOIN `inventory_products` ON `inventory_products`.`barcode` = `inventory_purchase_order_lines`.`barcode`",         ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                // ----- format records for output        $count = 1;        $table = $this->Table_Header_Row . "\n";        foreach ($records as $record) {            $locked         = ($record['QTY_RECEIVED'] > 0) ? true : false;            $del            = ($locked) ? "[LOCKED]" : "<div class='button_delete' id='row_1' onclick='tableDeleteRow(\" row_{$count} \")'>X</div>";            $price_total    = money_format("%n", $record['price_total']);            $price_each     = ($record['quantity'] > 0) ? money_format("%n", ($record['price_total'] / $record['quantity'])) : money_format("%n", 0);            $delimiter      = $this->Table_Delimiter;            $table         .= "{$record['inventory_purchase_order_lines_id']}{$delimiter}{$record['barcode']}{$delimiter}{$record['retailer_code']}{$delimiter}{$record['manufacturer_code']}{$delimiter}{$record['description']}{$delimiter}{$record['quantity']}{$delimiter}{$price_each}{$delimiter}{$price_total}{$delimiter}{$del}\n";            $count++;        }                                // ----- put formatted records into POST array and add javascript to add extra needed line break        $_POST["FORM_{$this->Table_Holder_DIV}"] = $table;        AddScriptOnReady('$("#FORM_'.$this->Table_Holder_DIV.'").val($("#FORM_'.$this->Table_Holder_DIV.'").val() + "\n");');    }            public function AddScript_TemplateSwap()    {        # FUNCTION :: Add information for creating swap template files                global $FormPrefix;        if ($this->Show_Template_Swap_Name) {            $script = <<<SCRIPT                        // ----- PERFORM THE BASIC SWAPS -----            $("[id^='{$FormPrefix}']").each(function() {                    var id          = this.id;                                          // get ID of field were looking at                var idDisplay   = '[[' + id.replace("{$FormPrefix}", "") + ']]';    // trim off the form prefix                //$("#" + id).before(idDisplay);                                    // display the ID                //$("#" + id).replaceWith('');                                      // hide the element                $("#" + id).replaceWith(idDisplay);                                 // hide the element and replace with ID            });                        // ----- PERFORM ADVANCED SWAPS -----            $("#temp_uid").replaceWith('[[universal_id]]');            $("#checklist_wrapper").replaceWith('[[checklist]]');            $("#solines_wrapper").replaceWith('[[order_lines]]');                        // ----- SHOW DOWN ARROW ON ALL AREAS -----            $("[class^='updown']").each(function() {                    var id          = this.id;                                          // get ID of field were looking at                $("#" + id).addClass('updown_down');                                // hide the element and replace with ID            });                        // ----- EXPAND ALL AREAS -----            $("[class^='menu_group']").each(function() {                    var id          = this.id;                                          // get ID of field were looking at                $("#" + id).css({ "display": ''});                                  // hide the element and replace with ID            });                        SCRIPT;        AddScriptOnReady($script);        }    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                        $swap = $this->Show_Template_Swap_Name;             // set if we are performing template swap        $this->AddScript_TemplateSwap();                    // script for template swap information        $this->AddScript_NotesArea();                       // script for loading/re-loading notes area                // ----- if editing record - need to get the records from database and put on the page        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                        $this->Inventory_Purchase_Orders_Id     = $this->Edit_Id;            $po_number                              = $this->GetPurchaseOrderNumberFromID($this->Inventory_Purchase_Orders_Id);            //$this->Locked                           = $this->GetLockedStatus($this->Inventory_Purchase_Orders_Id);            $this->Locked                           = false;            $this->GetExistingRecords($this->Inventory_Purchase_Orders_Id);                        if ($this->Locked) {                AddScriptOnReady("$('#FORM_po_number').val('{$po_number}');");                AddScriptOnReady("$('#temp_ponumber').html('{$po_number}');");                AddScriptOnReady("$('#FORM_temp_locked').val(1);");            }        }                                // ----- Javascript Functionality -----        $this->JavascriptDisplaySessionMessage();   // Display alert messages        $this->JavascriptAutocomplete();            // Javascript for autocomplete functionality        $this->JavascriptCreateTable();             // Javascript for creating table from array of data        $this->JavascriptToggleFunctionality();     // Javascript for toggling div areas                $this->JavascriptDatepickerFunctionality(array('FORM_date'));        $this->JavascriptDisableFunctionality(array('FORM_temp_1','FORM_temp_2','FORM_temp_4','FORM_temp_8'));      // don't allow user to change values on these fields        $this->JavascriptInputNoBorder(array('FORM_temp_1','FORM_temp_2','FORM_temp_4','FORM_temp_8'));             // don't show form border on these fields                                $btn_add        = MakeButton('positive', 'ADD', '', '', 'btn_add', "addDataToTable('FORM_temp_0')", 'button', 'btn_add');        $btn_clear      = MakeButton('negative', 'CLEAR', '', '', 'btn_clear', "clearDataTextboxes()", 'button', 'btn_clear');        $R              = 'N';                        $CLASS_EXECUTE_LINK     = '/office/class_execute';        $eq_receive             = EncryptQuery("class=Inventory_InventoryProducts;v1=;");        $link_receive           = $CLASS_EXECUTE_LINK . '?eq=' . $eq_receive . '&action=add';        $script_receive         = "top.parent.appformCreate('Window', '{$link_receive}', 'apps'); return false;"; //top.        $btn_add_inventory      = ''; //MakeButton('positive', 'ADD INVENTORY ITEM', '', '', 'btn_add_inventory', "{$script_receive}", 'button', 'btn_add_inventory');                                // ----- GET NOTES FOR SALES ORDER (ONLY IF EDITING)        if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {            $notes_area = $this->LoadNotesArea();           // get notes for sales order        } else {            // don't load notes area if we're submitting an add/edit record            $notes_area = "<div style='color:red;'>UNABLE TO ADD NOTES. CAN ONLY ADD NOTES WHEN EDITING AN EXISTING RECORD</div>";        }                                // ----- create list of all previously entered vendors        $vendors        = $this->SQL->GetFieldValues($this->Table, 'vendor', "vendor != ''");        $vendor_list    = Form_ArrayToList($vendors);                                        $base_array = array(            "form|$this->Action_Link|post|db_edit_form",                        'hidden|inventory_purchase_orders_id',            'hidden|temp_locked',                        'code|<div style="display:none;">',            'textarea|Temp 3|autotable_holder|N|60|4',            'code|</div>',        );                        if ($this->Show_PO_Details) {            $FORM_ref_document_url      = Post('FORM_ref_document_url');            $FORM_ref_document_number   = Post('FORM_ref_document_number');            $FORM_notes                 = Post('FORM_notes');                        $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">PURCHASE ORDER INFORMATION</div>',                'text|PO Number|po_number|N|60|255',                'text|Date|date|N|20|255',                "selecttext|Vendor|vendor|N|40|80||$vendor_list",                'text|Estimated Shipping Cost|cost_shipping|N|20|255',                'text|Estimated Other Cost|cost_other|N|20|255',                                                "info|Notes|{$FORM_notes}",                "info|Document URL|{$FORM_ref_document_url}",                "info|Document #|{$FORM_ref_document_number}",            'code|</div>',            'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);        }                        if ($this->Locked) {            $temp_array = array(            "code|<div class='shadow form_section_wrapper_error'>",                    "code|PURCHASE ORDER IS LOCKED BECAUSE INVENTORY HAS ALREADY BEEN RECEIVED. TO MAKE MODIFICATION YOU MUST DELETE THE PURCHASE ORDER - WHICH WILL UN-RECEIVE ALL ITEMS.",                "code|</div>",                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        if ($this->Show_Order_Table) {            if (!$this->Locked) {                $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                                        "text|Search|temp_0|$R|60|100",                    "text|Barcode|temp_1|$R|60|100",                    "text|APDM SKU|temp_2|$R|60|100",                    "text|Manufacturer SKU|temp_8|$R|60|100",                    "text|Description|temp_4|$R|60|100",                                        "titletemplate|{$this->title_template}",                    "infotemplate|{$this->info_template}",                                        "code|<div style='padding-left:120px;'><table><tr>",                    "code|<td>",                        "text|QTY|temp_5|$R|10|100",                    "code|</td>",                    "code|<td>",                        "text|Price (ea)|temp_6|$R|10|100",                    "code|</td>",                    "code|<td>",                        "text|Price (total)|temp_7|$R|10|100",                    "code|</td>",                    "code|</tr></table></div>",                                        "titletemplate|STD",                    "infotemplate|STD",                                        "info||$btn_add      &nbsp;&nbsp;&nbsp;    $btn_clear     &nbsp;&nbsp;&nbsp;     $btn_add_inventory",                                    "code|</div>",                'code|<br /><br />',                );                $base_array = array_merge ($base_array, $temp_array);            } else {                $temp_array = array(                'code|<div style="display:none;">',                    'text|Search|temp_0|N|60|100',                    'textarea|Temp 3|autotable_holder|N|60|4',                'code|</div>',                );                $base_array = array_merge ($base_array, $temp_array);            }                                    $temp_array = array(                "code|<div id='autotable_table_display'></div>",                'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);        }                        // ========== NOTES ==========        if ($this->Show_Notes && !$swap) {            $temp_array = array(                "code|<div class='shadow form_section_wrapper'>",                    'code|<div class="form_section_header">NOTES ('.$this->Existing_Notes_Count.') <a class="toggle" href="#" id="menu_group_notes"><span class="updown updown_down">&nbsp;</span></a></div>',                    'code|<div class="menu_group" style="display:_none;" id="div_menu_group_notes">',                                                "code|<div style='padding:10px;' id='{$this->Note_Area_Wrapper_Id}'>",                        "code|{$notes_area}",                        "code|</div>",                                            'code|</div>',                'code|</div>',                'code|</br></br>',            );            $base_array = array_merge ($base_array, $temp_array);           }                        if ($this->Show_Reference) {            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">REFERENCE INFORMATION <a class="toggle" href="#" id="menu_group_a"><span class="updown">&nbsp;</span></a></div>',                'code|<div class="menu_group" style="display:none;" id="div_menu_group_a">',                    'text|Ref. Document|ref_document_number|N|60|1024',                    'text|Ref. Document URL|ref_document_url|N|60|255',                'code|</div>',            'code|</div>',            'code|<br /><br />',            );            $base_array = array_merge ($base_array, $temp_array);                    }                        if ($this->Show_Files) {            // ----- GET FILES FOR SALES ORDER (ONLY IF EDITING)            if (($this->Action == 'EDIT') && (!havesubmit($this->Add_Submit_Name)) && (!havesubmit($this->Edit_Submit_Name))) {                $this->Inventory_Purchase_Orders_Id     = Post('FORM_inventory_purchase_orders_id');                $files_area_upload                      = ($this->Show_Files) ? $this->LoadFilesUploadArea() : '';          // get files for sales order                $files_area                             = ($this->Show_Files) ? $this->LoadFilesArea() : '';                // get files for sales order            } else {                // don't load notes area if we're submitting an add/edit record                $files_area_upload  = "";                $files_area         = "<div style='color:red;'>UNABLE TO ADD FILES. CAN ONLY ADD FILES WHEN EDITING AN EXISTING RECORD</div>";            }                        // ----- ADD SCRIPTS            $this->AddScript_FileUpload();                        // ----- ADD FORM ARRAY            $temp_array = array(            "code|<div class='shadow form_section_wrapper'>",                'code|<div class="form_section_header">FILES ('.$this->Existing_Files_Count.') <a class="toggle" href="#" id="menu_group_files"><span class="updown">&nbsp;</span></a></div>',                'code|<div class="menu_group" style="display:none;" id="div_menu_group_files">',                                        "code|{$files_area_upload}",                                        "code|<div style='padding:10px;' id='{$this->Files_Area_Wrapper_Id}'>",                    "code|{$files_area}",                    "code|</div>",                                    'code|</div>',            'code|</div>',            "code|<div style='width:{$this->Window_Width}px; border:0px solid blue;'>&nbsp;</div>",            );            $base_array = array_merge ($base_array, $temp_array);                            }                        if ($this->Action == 'ADD') {            $base_array[] = "submit|Add Record|$this->Add_Submit_Name";            $base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';                        if (!$this->Locked) {                $base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            }            $base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function PostProcessFormValues($FormArray)     {        # FUNCTION :: Process the form array to save information to database                $lines_array                    = array();                                                  // initialize variable        $passed                         = true;                                                     // initialize variable        $adding                         = ($this->Action == 'ADD') ? true : false;                  // hold add/edit status        $inventory_purchase_orders_id   = $FormArray['inventory_purchase_orders_id'];               // initialize value - if present        $lines_array                    = $this->FormArray_ConvertTableToLinesArray($FormArray);    // convert the table to a lines array        $FormArray                      = $this->FormArray_CleanUp($FormArray);                     // clean up the excess form array                                if (false) {            $this->EchoVar('FormArray', $FormArray);            $this->EchoVar('Action', $this->Action);            $this->EchoVar('adding', $adding);            $this->EchoVar('locked', $locked);            $this->EchoVar('inventory_purchase_orders_id', $inventory_purchase_orders_id);            #exit();        }                                // ----- verify if any good lines made it to processing - we don't want to allow a 0-line PO        if (!$lines_array && !$this->Allow_Zero_Line_PO) {            $this->Error .= "THIS PURCHASE ORDER HAS NO VALID LINES TO PROCESS";            $passed = false;        }                                // ----- if all checks have passed and this isn't a blank invoice after processing        if ($passed) {            			# ===== START TRANSACTION ============================================================            $this->SQL->StartTransaction();                        # ----- Create the Purchase Order entry            $db_record = array(                'po_number'             => $FormArray['po_number'],                'vendor'                => $FormArray['vendor'],                'date'                  => $FormArray['date'],                'cost_shipping'         => $FormArray['cost_shipping'],                'cost_other'            => $FormArray['cost_other'],                //'notes'                 => $FormArray['notes'],            );                                    if ($adding) {                            $result = $this->SQL->AddRecord(array(                    'table'     => 'inventory_purchase_orders',                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                $inventory_purchase_orders_id   = $this->SQL->Last_Insert_Id;                $passed                         = (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                            } else {                            $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_purchase_orders',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_purchase_orders_id`='{$inventory_purchase_orders_id}' AND `active`=1",                ));                $passed     = (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                            }                                                // ----- error if we don't have an ID            if ($inventory_purchase_orders_id == 0) {                $this->Error .= "NO inventory_purchase_orders_id";                $passed = false;            }                                                // ========== PROCESS PURCHASE ORDER LINES ==========                        // ----- get existing lines            $records = $this->SQL->GetArrayAll(array(                'table'     => "inventory_purchase_order_lines",                'keys'      => "inventory_purchase_order_lines_id",                'where'     => "`inventory_purchase_orders_id`='{$inventory_purchase_orders_id}' AND `active`=1",            ));            $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                        $original_ipolid_arr = array();            if ($records) {                foreach ($records AS $record) {                    $original_ipolid_arr[$record['inventory_purchase_order_lines_id']] = 0;                }            }                                                // ----- Create the Purchase Order LINES entry            if ($lines_array) {                foreach ($lines_array as $line) {                                        $line['inventory_purchase_orders_id']   = $inventory_purchase_orders_id;                // tie this to the correct PO record                    $inventory_purchase_order_lines_id      = $line['inventory_purchase_order_lines_id'];   // store the lines_id                    $db_record                              = $line;                                        // store the record into new variable                    unset($original_ipolid_arr[$inventory_purchase_order_lines_id]);                        // remove it from the existing lines array                                        if ($inventory_purchase_order_lines_id != 0) {                        // ----- EDITING RECORD -----                        $result = $this->SQL->UpdateRecord(array(                            'table'         => 'inventory_purchase_order_lines',                            'key_values'    => $this->SQL->KeyValues($db_record),                            'where'         => "`inventory_purchase_order_lines_id`='{$inventory_purchase_order_lines_id}' AND `active`=1",                        ));                        $passed = (!$result) ? false : $passed;                        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                    } else {                        // ----- ADDING RECORD -----                        $result = $this->SQL->AddRecord(array(                            'table'     => 'inventory_purchase_order_lines',                            'keys'      => $this->SQL->Keys($db_record),                            'values'    => $this->SQL->Values($db_record),                        ));                        $passed = (!$result) ? false : $passed;                        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                    }                }            }                                                // ----- delete any rows remaining from original and not found in the table now            foreach ($original_ipolid_arr AS $inventory_purchase_order_lines_id => $zero) {                // ----- DELETING RECORD -----                $db_record = array('active' => 0,);                $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_purchase_order_lines',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_purchase_order_lines_id`='{$inventory_purchase_order_lines_id}' AND `active`=1",                ));                $passed = (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);            }                                    if (false) {                $this->Error .= "<br />PURPOSFUL HALTING ERROR";                $passed = false;                exit();            }                                    # ===== COMMIT TRANSACTION ============================================================            if ($passed) {                $this->SQL->TransactionCommit();                                                // save the database transactions to database                                // ----- trigger a success message                if ($adding) {                    $this->Bypass_Form_Processing = true;                                       // stop the form from being processed by the rest of base class                    $this->SuccessfulAddRecord();                                               // close the window and output success message                } else {                    $this->Bypass_Form_Processing = true;                                       // stop the form from being processed by the rest of base class                    $this->SuccessfulEditRecord($this->Idx, $this->Idx, $this->Index_Name);     // close the window and output success message                }                            } else {                $this->SQL->Rollback();                                                         // remove all the database transactions from the database                $this->Error .= "UNABLE TO PROCESS DATABASE TRANSACTIONS";                return $FormArray;            }                } else {            // ----- return form array to process any legitimate errors            return $FormArray;        }                    }        public function DeletePurchaseOrder()    {        /* ===== P-CODE =================                * -- Don't allow if inventory has been received - force person to un-receive inventory first                1. Delete the master record        2. Delete all the PO lines                ============================== */                if ($this->Inventory_Purchase_Orders_Id) {                        $passed         = true; // initialize variable            $status         = $this->StatusPurchaseOrder(0, $this->Inventory_Purchase_Orders_Id);                        if ($status != 'open') {                                $output = "";                $output .= "<div class='shadow form_section_wrapper_error'>";                $output .= "<div class='form_section_header_white'>UNABLE TO DELETE RECORD</div>";                $output .= "<div style='font-size:12px; padding:5px; min-width:300px;'>";                $output .= "There has already been inventory received against this PO so it cannot be deleted. Unreceive all inventory and then record can be deleted.";                $output .= "</div>";                $output .= "</div>";                $output .= "</div>";                                echo $output;                //exit();            } else {                                            # ===== START TRANSACTION ============================================================                $this->SQL->StartTransaction();                                // ----- de-activate the main record                $db_record  = array('active' => 0);                $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_purchase_orders',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_purchase_orders_id`='{$this->Inventory_Purchase_Orders_Id}'",                ));                $passed = (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                                // ----- de-activate the sub-line records                $db_record  = array('active' => 0);                $result = $this->SQL->UpdateRecord(array(                    'table'         => 'inventory_purchase_order_lines',                    'key_values'    => $this->SQL->KeyValues($db_record),                    'where'         => "`inventory_purchase_orders_id`='{$this->Inventory_Purchase_Orders_Id}'",                ));                $passed = (!$result) ? false : $passed;                $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                                                $passed = true;                                # ===== COMMIT TRANSACTION ============================================================                if ($passed) {                    $this->SQL->TransactionCommit();            // save the database transactions to database                                        echo "<br /><br /><h2>SUCCESSFULLY DELETED - REFRESH PARENT TABLE</h2>";                    //$this->Bypass_Form_Processing = true;                                       // stop the form from being processed by the rest of base class                    //                    $idx        = Get('idx');                    $value      = Get('value');                    $parent_id  = Get('PARENT_DIALOGID');                    $eq2        = Get('eq2');                    $dialog        = Get('dialog');                    $dialog_id        = Get('dialog_id');                                        $parent_id = $dialog_id;                    /*                    $this->EchoVar('parent_id', $parent_id);                    $this->EchoVar('dialog', $dialog);                    $this->EchoVar('dialog_id', $dialog_id);                                        $this->EchoVar('idx', $idx);                    $this->EchoVar('value', $value);                    $this->EchoVar('eq2', $eq2);                    */                                        AddScript("tableDeleteFadeOut($parent_id, $idx, $value);");                    //$this->SuccessfulDeleteRecord();                        // close the window and output sucess message                                                } else {                    $this->SQL->Rollback();                     // remove all the database transactions from the database                }            }        } else {            echo "NO inventory_purchase_orders_id passed in.";        }    }        public function PO_ForceCloseStatus($STATUS)    {        # FUNCTION :: Set the status_force_closed status on a record                if (!$this->Inventory_Purchase_Orders_Id) {            echo "ERROR :: No Inventory_Purchase_Orders_Id";            exit();        }                        // ----- de-activate the sub-line records        $db_record  = array('status_force_closed' => $STATUS);        $result = $this->SQL->UpdateRecord(array(            'table'         => 'inventory_purchase_orders',            'key_values'    => $this->SQL->KeyValues($db_record),            'where'         => "`inventory_purchase_orders_id`='{$this->Inventory_Purchase_Orders_Id}'",        ));        $passed = (!$result) ? false : true;        $this->SQL->EchoQuery($this->Classname, __FUNCTION__);                if ($result) {            echo "<br /><br /><h2>SUCCESSFULLY UPDATED STATUS - REFRESH PARENT TABLE</h2>";        } else {            echo "<br /><br /><h2>ERROR :: FAILED TO UPDATE STATUS</h2>";        }    }        public function StatusForceClosed($ID)    {        # FUNCTION :: Determine if PO has been force closed                $output = 0;                $record = $this->SQL->GetRecord(array(            'table' => 'inventory_purchase_orders',            'keys'  => 'status_force_closed',            'where' => "inventory_purchase_orders_id={$ID}",        ));                if ($record) {            $output = $record['status_force_closed'];        }                return $output;    }        public function ProcessTableCell($field, &$value, &$td_options, $id='')    {        # ============ WHEN VIEWING A TABLE ============                parent::ProcessTableCell($field, $value, $td_options, $id);        switch ($field) {            default:                // ----- MODIFY THE OPTIONS IN THE MAIN TABLE DISPLAY -----                $CLASS_EXECUTE_LINK     = '/office/class_execute';                                $eq_receive             = EncryptQuery("class=Inventory_InventoryPurchaseOrderReceive;v1={$id};");                $link_receive           = $CLASS_EXECUTE_LINK . '?eq=' . $eq_receive;                $script_receive         = "top.parent.appformCreate('Window', '{$link_receive}', 'apps'); return false;";                                $dialog_id = $this->GetEqValue('dialog');                $eq_delete              = EncryptQuery("class=Inventory_InventoryPurchaseOrderPlace;v1={$id};PARENT_DIALOGID=$this->Dialogid_Id");                $link_delete            = $CLASS_EXECUTE_LINK . '?eq=' . $eq_delete . "&action=delete&idx=@IDX@;&value=@VALUE@&dialog=@DIALOGID@&dialog_id={$dialog_id}&eq2=@EQ@";                $script_delete          = "ConfirmDeleteAndOpenWindow('{$link_delete}'); return false;";                                // ----- determine which options to show to user                $col_view       = ($this->Flags['view'] == 'false')   ? ''    : "<a href=`#` class=`row_view`       title=`View`            onclick=`tableViewClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_edit       = ($this->Flags['edit'] == 'false')   ? ''    : "<a href=`#` class=`row_edit`       title=`Edit`            onclick=`tableEditClick('@IDX@','@VALUE@','@EQ@', '@TITLE@'); return false;`></a>";                $col_delete     = ($this->Flags['delete'] == 'false') ? ''    : "<a href=`#` class=`row_delete`     title=`Delete`          onclick=`{$script_delete}`></a>";                $col_receive    = ($this->Flags['print'] == 'false')  ? ''    : "<a href=`#` class=`row_receive`    title=`Receive Inventory`  onclick=`{$script_receive}; return false;`></a>";                                // ----- output the options                $this->Edit_Links_Count = '3';                $this->Edit_Links = qqn("                    <td align=`center`>{$col_edit}</td>                    <td align=`center`>{$col_delete}</td>                    <td align=`center`>{$col_receive}</td>                    ");                                        //<td align=`center`><a href=`#` class=`row_viewline` title=`View Lines`  onclick=`{$script2}; return false;`></a></td>            break;                        case 'date':                $format     = $this->PO_Date_Format;                $value      = date($format, strtotime($value));            break;                        case 'cost_shipping':            case 'cost_other':            case 'EST_LINE_ITEM_COST':            case 'RCVD_LINE_ITEM_COST':            case 'REMAINING_LINE_ITEM_COST':                $value = money_format('%n', $value);            break;                        case 'STATUS':                $value          = $this->StatusPurchaseOrder(0, $id);                                switch ($value) {                    case 'open':                        if ($this->StatusForceClosed($id) == 1) {                       // done here to minimize function calls                            $value      = 'closed</br>(forced)';                             $td_options = "style=\"background-color:{$this->Color_Status_Force_Closed};\"";                        } else {                            $td_options = "style=\"background-color:{$this->Color_Status_Open};\"";                        }                    break;                    case 'partial':                        if ($this->StatusForceClosed($id) == 1) {                       // done here to minimize function calls                            $value      = 'closed</br>(forced)';                             $td_options = "style=\"background-color:{$this->Color_Status_Force_Closed};\"";                        } else {                            $td_options = "style=\"background-color:{$this->Color_Status_Partial};\"";                        }                    break;                    case 'closed':                        $td_options = "style=\"background-color:{$this->Color_Status_Closed};\"";                    break;                }            break;                        case 'SPECIAL_STATUS':                switch ($value) {                    case 'open':                        $td_options = "style=\"background-color:{$this->Color_Status_Open};\"";                    break;                    case 'closed':                        $td_options = "style=\"background-color:{$this->Color_Status_Closed};\"";                    break;                }            break;                        case 'status_force_closed':                                $value_status       = $value;                $value_calculated   = $this->StatusPurchaseOrder(0, $id);                                $CLASS_EXECUTE_LINK     = '/office/class_execute';                $dialog_id              = $this->GetEqValue('dialog');                $eq                     = EncryptQuery("class={$this->Classname};v1={$id};PARENT_DIALOGID={$this->Dialogid_Id}");                                switch ($value_calculated) {                    case 'open':                    case 'partial':                        if ($value_status == 0) {                            $link_close = $CLASS_EXECUTE_LINK . '?eq=' . $eq . "&action=force_close&idx=@IDX@;&value=@VALUE@&dialog=@DIALOGID@&dialog_id={$dialog_id}&eq2=@EQ@";                            $message    = "Are you sure you want to FORCE CLOSE this purchase order?";                            $script     = "ConfirmMessageAndOpenWindow('{$link_close}', '{$message}'); return false;";                            $value      = "<a href='#'      title='Force CLOSE'          onclick=\"{$script}\">FORCE CLOSE</a>";                        } else {                            $link_open  = $CLASS_EXECUTE_LINK . '?eq=' . $eq . "&action=force_open&idx=@IDX@;&value=@VALUE@&dialog=@DIALOGID@&dialog_id={$dialog_id}&eq2=@EQ@";                            $message    = "Are you sure you want to RE-OPEN this purchase order?";                            $script     = "ConfirmMessageAndOpenWindow('{$link_open}', '{$message}'); return false;";                            $value      = "<a href='#' title='Force OPEN'          onclick=\"{$script}\">FORCE OPEN</a>";                        }                    break;                    case 'closed':                        $value = '';                    break;                }                            break;        }    }                        private function FormArray_CleanUp($FormArray)    {        $field_kickout_string           = 'temp_';                // ----- remove any temp fields from the array so they don't get processed        // ----- NOTE :: WASTED STEP IF WE BLOW OUT ARRAY AT END OF FUNCTION        foreach ($FormArray as $field => $value) {            //echo "{$field} => {$value} <br />";            $pos = strpos($field, $field_kickout_string);            if ($pos !== false) {                unset($FormArray[$field]);    //remove the field            }        }                unset($FormArray["{$this->Table_Holder_DIV}"]);           // remove the table holder            return $FormArray;    }        private function FormArray_ConvertTableToLinesArray($FormArray)    {                $lines_array = array();                                      // initialize variable                        // ----- get the main table holder value to process        $table = $FormArray[$this->Table_Holder_DIV];        if ($table) {            $lines          = explode("\n", $table);            $header_row     = true;                        foreach ($lines as $key => $line) {                if ($line) {                    if ($header_row == false) {                        $parts          = explode($this->Table_Delimiter, $line);                        $id             = trim($parts[0]);                        $barcode        = trim($parts[1]);                        $sku            = trim($parts[2]);                        $description    = trim($parts[4]);                        $quantity       = trim($parts[5]);                        $price_each     = $this->CleanMoney(trim($parts[6]));                        $price_total    = $this->CleanMoney(trim($parts[7]));                        $price          = ($price_total != '') ? $price_total : ($quantity * $price_each);                                                                        // ----- check that inventory still exists                        $row = $this->SQL->GetRecord(array(                            'table' => 'inventory_products',                            'keys'  => 'barcode',                            'where' => "barcode = '{$barcode}' AND active=1",                        ));                                                if (empty($row)) {                            $this->Error .= "<br />ERROR :: Inventory item does not exist. Barcode: {$barcode}";                            $passed = false;                        } else {                            $lines_array[] = array(                                'inventory_purchase_orders_id'      => 0,               // temporary holding value                                'inventory_purchase_order_lines_id' => $id,                                'barcode'                           => $barcode,                                'quantity'                          => $quantity,                                'price_total'                       => $price,                            );                        }                    } else {                        // have to set header to false here or it could trigger on blank first line                        $header_row     = false;                    }                } //end blank line check                            }        } //end empty table check                return $lines_array;    }                // ===== NOTES AREA FUNCTIONS =====    private function LoadNotesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the notes areas for this sales order                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                $output                                     = "";                                                                                   // initialize variable                $Obj_Notes                                  = new Inventory_InventoryPurchaseOrderNotes(0, $this->Inventory_Purchase_Orders_Id);    // instantiate class        $Obj_Notes->Inventory_Purchase_Orders_ID    = $this->Inventory_Purchase_Orders_Id;                                                  // set sales order id to get notes for        $Obj_Notes->Table_Width                     = $this->Notes_Width;                                                                   // set variable        $Obj_Notes->Notes_Font_Size                 = $this->Notes_Font_Size;                                                               // set variable        $this->Existing_Notes_Count                 = $Obj_Notes->GetExistingCount($this->Inventory_Purchase_Orders_Id);                    // get count of existing notes        $output                                    .= $Obj_Notes->AddRecordText();                                                          // display ability to add a new note        $output                                    .= "</br>";        $output                                    .= $Obj_Notes->ViewAllRecords(true);                                                     // get the existing records                return $output;                                                                                                                     // return the output    }        private function AddScript_NotesArea()    {        # FUNCTION :: Add needed scripts for this class                $eq                         = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                // ----- ADD SCRIPT TO ADD/EDIT NOTES AND WHITESHEETS -----        AddScript("            function LoadNotesArea() {                // ----- FUNTION :: Load the notes for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_notes;poid={$this->Edit_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Note_Area_Wrapper_Id}').html(data);                });            }        ");    }            // ==================== START :: UPLOAD FILES ====================        private function LoadFilesArea($AJAXOVERRIDE=false)    {        // FUNCTION :: Load the previously uploaded files area                $bypass_adding_script = false;                // ----- turn off AJAX flag or it will try to process instead of showing AddRecordText()        if ($AJAXOVERRIDE) {            global $AJAX;            $AJAX = false;        }                if (!$this->Inventory_Purchase_Orders_Id) {            $error = "Missing inventory_purchase_orders_id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output                                 = "";                                                                           // initialize variable                $Obj_Files                              = new Inventory_Uploadify_UploadedFiles();                                      // instantiate class        $Obj_Files->UID                         = $this->Inventory_Purchase_Orders_Id;                                          // set barcode to get files for        $Obj_Files->Upload_Type                 = $this->Files_Upload_Type;                                                     // set file type        $Obj_Files->Table_Width                 = $this->Files_Width;                                                           // set variable        $Obj_Files->Files_Font_Size             = $this->Files_Font_Size;                                                       // set variable        $Obj_Files->Files_Font_Size_2           = $this->Files_Font_Size_2;                                                     // set variable                $output                                .= "</br>";        $output                                .= $Obj_Files->ViewAllRecordsFromFolderWithDatabaseCrosscheck(true);             // get the existing records        $Obj_Files->AddScript();        $this->Existing_Files_Count             = $Obj_Files->Existing_Files_Count;                                             // get count of existing files                return $output;                                                                                                         // return the output    }        private function LoadFilesUploadArea()    {        // FUNCTION :: Load the 'upload a new file' area                if (!$this->Inventory_Purchase_Orders_Id) {            $error = "Missing inventory_purchase_orders_id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $output = '';        $Obj_Files_Upload                       = new Inventory_Uploadify_UploadFile($this->Files_Upload_Type, $this->Inventory_Purchase_Orders_Id);            // instantiate class        $Obj_Files_Upload->AddStyle();                                                                                      // add needed styles or stylesheet        $Obj_Files_Upload->AddScript();                                                                                     // add needed scripts        $output                                .= $Obj_Files_Upload->AddRecordText();                                       // display ability to add a new file                return $output;    }        public function AddScript_FileUpload()    {        # FUNCTION :: Script needed for File Uploading                $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)        AddScript("            function LoadFilesArea() {                // ----- FUNTION :: Load the files for this sales order and put into specified area                                var url     = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=load_files;ipoid={$this->Edit_Id}';                var data    = '';                $.get(url, data)                    .done(function(data) {                        //alert(data);                        $('#{$this->Files_Area_Wrapper_Id}').html(data);                });            }        ");    }        // ==================== END :: UPLOAD FILES ====================    }  // -------------- END CLASS --------------