<?phpclass Inventory_FixAssemblyNoBuildRecord extends Inventory_InventoryBase{    public $Show_Query                  = false;            public function  __construct()    {        parent::__construct();                $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-01-11',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => 'Inventory_FixAssemblyNoBuildRecord',            'Version'       => '1.0',            'Description'   => 'Fix bad data -  inventory_assembly_build with no build record.',            'Update Log'    => array(                '2013-01-11_001'    => "Module Created",            ),        );            } // -------------- END __construct --------------        public function Execute()    {        /* ===== P-CODE ===========================                1. Get all inventory_assembly_build with a non-matching date        2. Determine the actual date based on the record its tied to        3. Adjust the inventory_counts to correct date                ======================================== */                        $records = $this->GetAllRecords();        //$this->EchoVar('records', $records);                        $passed = false;        # ===== START TRANSACTION ============================================================        $this->SQL->StartTransaction();                                if ($records){                    // ----- initialize object for later use            $Obj = new Inventory_InventoryAssemblyBuild();                        foreach ($records as $record) {                                                // ----- GET THE ASSMEBLY INFORMATION -----                $inventory_assemblies_id = $record['inventory_assemblies_id'];                $records_assembly_lines = $this->SQL->GetArrayAll(array(                    'table' => " inventory_assembly_lines",                    'keys'  => "*",                    'where' => "`inventory_assemblies_id`='{$inventory_assemblies_id}' AND active=1",                ));                $this->EchoQuery();                                                                if (!$records_assembly_lines) {                    echo "<br />ERROR :: Inventory_FixAssemblyNoBuildRecord :: Execute() :: No assembly build record found";                    $this->EchoVar('inventory_assembly_build_id', $record['inventory_assembly_build_id']);                    $this->EchoVar('Barcode', $record['barcode']);                } else {                                        // ----- create the database information                    $build_record_array     = $Obj->CreateBuildRecord($records_assembly_lines);                    $date                   = date('Y-m-d');                    $notes                  = $record['notes'] . " Updated with build record on $date";                                        $db_record = array(                        'build_record_array'    => $build_record_array,                        'notes'                 => $notes,                    );                                            // ----- Update the inventory_assembly_build record -----                    if (false) {                        $where                      = "inventory_assembly_build_id='{$record['inventory_assembly_build_id']}'";                        $result                     = $this->UpdateRecordLoc('inventory_assembly_build', $db_record, $where);                        $this->EchoQuery(true);                    } else {                        echo "<br />";                        echo "<br />UPDATE QUERY NOT ACTIVE";                        $this->EchoVar('db_record', $db_record);                    }                                                    } // end checking for assembly record                            } // end foreach        } else {            echo "<h2>NO REOCRDS TO MODIFY</h2>";        } // end record check                        /*        if (!$passed) {            echo "<h2>QUERY FAILED - NOT PASSED</h2>";        }        */                $passed = true;        # ===== COMMIT TRANSACTION ============================================================        if ($passed) {            $this->SQL->TransactionCommit();        }    }          public function GetAllRecords()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_assembly_build',            'keys'  => "inventory_assemblies_id, inventory_assembly_build_id, barcode, notes",            'where' => "build_record_array = '' AND active = 1",        ));        $this->EchoQuery();        //$this->EchoVar('records', $records);                return $records;    }                }  // -------------- END CLASS --------------