<?phpclass Inventory_FixInventoryCountsNoDate extends Inventory_InventoryBase{    public $Show_Query                  = false;            public function  __construct()    {        parent::__construct();                $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2012-12-11',            'Updated By'    => '',            'Updated Date'  => '',            'Filename'      => 'Inventory_FixInventoryCountsNoDate',            'Version'       => '1.0',            'Description'   => 'Fix bad data - inventory counts with no date.',        );            } // -------------- END __construct --------------        public function Execute()    {        /* ===== P-CODE ===========================                1. Get all inventory_counts with a date 0000-00-00        2. Determine the actual date based on the record its tied to        3. Adjust the inventory_counts to correct date                ======================================== */                        $records = $this->GetAllRecords();        //$this->EchoVar('records', $records);                        $passed = false;        # ===== START TRANSACTION ============================================================        $this->SQL->StartTransaction();                                if ($records){        foreach ($records as $record) {                                    // ----- determine the date the inventory change was made with            $date               = '';            $date               = (isset($record['IN_DATE']))   ? $record['IN_DATE']        : $date;            $date               = (isset($record['ADJ_DATE']))  ? $record['ADJ_DATE']       : $date;            $date               = (isset($record['ASSY_DATE'])) ? $record['ASSY_DATE']      : $date;            $date               = (isset($record['OUT_DATE']))  ? $record['OUT_DATE']       : $date;                        $date_parts         = explode(" ", $date);            $date               = $date_parts[0];                        $this->EchoVar('date', $record['date']);                        if (true) {                // ----- Update the inventory_counts record -----                $db_record = array(                    'date' => $date,                );                                $where                      = "inventory_counts_id='{$record['inventory_counts_id']}'";                $result                     = $this->UpdateRecordLoc('inventory_counts', $db_record, $where);                $this->EchoQuery(true);            }                    } // end foreach        } else {            echo "<h2>NO REOCRDS TO MODIFY</h2>";        } // end record check                        /*        if (!$passed) {            echo "<h2>QUERY FAILED - NOT PASSED</h2>";        }        */                $passed = true;        # ===== COMMIT TRANSACTION ============================================================        if ($passed) {            $this->SQL->TransactionCommit();        }    }          public function GetAllRecords()    {        $records = $this->SQL->GetArrayAll(array(            'table' => 'inventory_counts',            'keys'  => "    inventory_counts.*,                             `inventory_purchase_order_received`.`date`                                      AS IN_DATE,                            `inventory_purchase_order_received`.`active`                                    AS IN_ACTIVE,                                                        `inventory_adjustments`.`date`                                                  AS ADJ_DATE,                            `inventory_adjustments`.`active`                                                AS ADJ_ACTIVE,                                                        `inventory_assembly_build`.`date`                                               AS ASSY_DATE,                            `inventory_assembly_build`.`active`                                             AS ASSY_ACTIVE,                                                        `inventory_sales_order_sent`.`date`                                             AS OUT_DATE,                            `inventory_sales_order_sent`.`active`                                           AS OUT_ACTIVE            ",                        'where' => "`inventory_counts`.`date`='0000-00-00' AND                                 (                `inventory_counts`.`active`=1 OR                 `inventory_purchase_order_received`.`active`=1 OR                 `inventory_adjustments`.`active`=1 OR                `inventory_assembly_build`.`active`=1  OR                 `inventory_sales_order_sent`.`active`=1                  )             ",                        'joins' => "                        LEFT JOIN `inventory_purchase_order_received`   ON `inventory_purchase_order_received`.`inventory_purchase_order_received_id`   = `inventory_counts`.`ref_purchase_orders_received_id`                         LEFT JOIN `inventory_adjustments`               ON `inventory_adjustments`.`inventory_adjustments_id`                           = `inventory_counts`.`ref_adjustment_id`                         LEFT JOIN `inventory_assembly_build`            ON `inventory_assembly_build`.`inventory_assembly_build_id`                     = `inventory_counts`.`ref_assembly_build_id`                         LEFT JOIN `inventory_sales_order_sent`          ON `inventory_sales_order_sent`.`inventory_sales_order_sent_id`                 = `inventory_counts`.`ref_sales_order_sent_id`                         LEFT JOIN `inventory_products`                  ON `inventory_products`.`barcode`                                               = `inventory_counts`.`barcode`            ",        ));        $this->EchoQuery();        //$this->EchoVar('records', $records);                return $records;            }                }  // -------------- END CLASS --------------