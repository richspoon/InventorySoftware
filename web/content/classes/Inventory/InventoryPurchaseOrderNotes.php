<?phpclass Inventory_InventoryPurchaseOrderNotes extends Inventory_InventoryBase{    public $Show_Query                          = false;    // (false) TRUE = display database queries used in this class            // ----- INPUT VARIABLES -----    public $Inventory_Purchase_Order_Notes_Id      = 0;    public $Inventory_Purchase_Orders_Id           = 0;            // ----- OUTPUT VARIABLES -----	        // ----- OTHER VARIABLES -----	public $Table_Width                         = 500;    public $Notes_Font_Size                     = 16;    private $Special_Prefix                     = "NOTE_";    private $Username                           = '';           // will hold login username (for notes tagging)            public function  __construct()    {        parent::__construct();        $this->SetSQLInventory();   // set the database connection to the inventory database                $this->Classname = get_class($this);        $this->ClassInfo = array(            'Created By'    => 'Richard Witherspoon',            'Created Date'  => '2013-08-17',            'Updated By'    => 'Richard Witherspoon',            'Updated Date'  => '2013-10-07',            'Filename'      => $this->Classname,            'Version'       => '1.1',            'Description'   => 'Adding notes to a given purchase order item',            'Update Log'    => array(                '2013-08-17_1.0'    => "Module Created",                '2013-10-07_1.1'    => "Added time to datestamp (in database). Modified how date is displayed in notes",            ),        );                        // ----- Process any parameters sent in construct        $this->SetParameters(func_get_args());                                          // get passed in parameters from class contruct        $this->Inventory_Purchase_Order_Notes_Id           = $this->GetParameter(0);       // store passed in parameter        $this->Inventory_Purchase_Orders_Id                = $this->GetParameter(1);       // store passed in parameter                        $this->Username     = "{$_SESSION['USER_LOGIN']['LOGIN_RECORD']['first_name']} {$_SESSION['USER_LOGIN']['LOGIN_RECORD']['last_name']}";                        // ----- Configuration for database table        $this->Table                = 'inventory_purchase_order_notes';                    // database table        $this->Add_Submit_Name      = "{$this->Table}_ADD";        $this->Edit_Submit_Name     = "{$this->Table}_EDIT";        $this->Index_Name           = 'inventory_purchase_order_notes_id';                 // index field for database table        $this->Flash_Field          = 'inventory_purchase_order_notes_id';        $this->Default_Where        = '';                                               // additional search conditions        $this->Default_Sort         = '';                                               // field for default table sort                $this->Field_Titles = array(            "{$this->Table}.inventory_sales_order_notes_id"         => 'Notes ID',            "{$this->Table}.inventory_sales_orders_id"              => 'Sales Order ID',            "{$this->Table}.user"                                   => 'User',            "{$this->Table}.date"                                   => 'Date/Time',            "{$this->Table}.title"                                  => 'Title',            "{$this->Table}.note"                                   => 'Note',                        "{$this->Table}.active"                                 => 'Active',            "{$this->Table}.updated"                                => 'Updated',            "{$this->Table}.created"                                => 'Created',        );                $this->Join_Array           = Array();        $this->Group_By             = "";        $this->Default_Fields       = 'user, date, title, note';        $this->Edit_Links_Count     = 3;        $this->Unique_Fields        = '';                $this->Default_Values   = array(            "{$this->Special_Prefix}date"                           => date('Y-m-d H:i:s'),            "{$this->Special_Prefix}inventory_purchase_orders_id"   => $this->Inventory_Purchase_Orders_Id,            "{$this->Special_Prefix}user"                           => $this->Username,        );                $this->Use_Selection_Tab    = true;         // (TRUE) false = hide the search tab on the table        $this->Default_List_Size    = 20;           // how many records to show when table initially loads (higher = slower performance but better user experience)        $this->Close_On_Success     = false;        // (TRUE) true = after editing a recod - close the edit window            } // -------------- END __construct --------------    public function Execute()    {        # FUNCTION :: Main function called after instantiating this class                        $action = Get('action');        switch ($action) {            case 'add':                // ----- add a new record                $this->AddRecord();            break;                        case 'edit':                // ----- add a new record                $this->EditRecord($this->Inventory_Purchase_Order_Notes_Id);            break;                        case 'viewall':                // ----- view all records tied to a specific production_board_id                $this->ViewAllRecords();            break;                        case 'list':            default:                // ----- list all existing records                $this->ListTable();            break;        }    }        public function ExecuteAjax()    {        # FUNCTION :: Function handles AJAXy calles to this class                $return     = 0;                            // initialize variable        $QDATA      = GetEncryptQuery('eq');        // decode the encrypted query passed in        $action     = Get('action');                // determine what action we're trying to do                                // ----- output debug variables to screen - this will probably kill the return values - but good for debug        //$_GET['show'] = true;        if (Get('show')) {            echo "<br />QDATA = " . ArrayToStr($QDATA);            echo "<br />action = $action";        }                                switch ($action) {                        case 'addnote':                                // ----- create the record                $db_record = array(                    'inventory_purchase_orders_id'  => Post('poid'),                    'user'                          => Post('user'),                    'date'                          => Post('date'),                    'note'                          => Post('note'),                    'title'                         => Post('title'),                );                                // ----- add the record to database                $result = $this->SQL->AddRecord(array(                    'table'     => $this->Table,                    'keys'      => $this->SQL->Keys($db_record),                    'values'    => $this->SQL->Values($db_record),                ));                //$this->SQL->EchoQuery($this->Classname, __FUNCTION__, false);                                // ----- return success variable                $return = (!$result) ? 0 : 1;            break;                        default:            break;        }                echo $return;    }        public function SetFormArrays()    {        # FUNCTION :: Output the main user form to the screen                        // ----- required javascript functions        $this->JavascriptDatepickerFunctionality(array("FORM_{$this->Special_Prefix}date"));       // date-picker functionality                // ----- create lists from existing database fields        $user_list              = Form_ArrayToList($this->SQL->GetFieldValues($this->Table, 'user', "user != ''"));                                        global $FormPrefix, $FORM_VAR;        $eq = EncryptQuery("class={$this->Classname}");       // Class the autocomplete should call (ideally this class)                $select_empty = $FORM_VAR['start_select_value'];                                $script = <<<SCRIPT            function saveNoteAjax() {                                var selectDefault   = "{$FORM_VAR['start_select_value']}";                var passed          = true;                var Zuser           = $('#{$FormPrefix}{$this->Special_Prefix}user').val();                var Zdate           = $('#{$FormPrefix}{$this->Special_Prefix}date').val();                var Znote           = $('#{$FormPrefix}{$this->Special_Prefix}note').val();                var Zpoid           = $('#{$FormPrefix}{$this->Special_Prefix}inventory_purchase_orders_id').val();                                                if (Zuser == selectDefault) {                    Zuser = '';                }                                if (Zpoid == '') {                    alert('ERROR :: No Purchase Order ID Found');                    passed = false;                }                                if (Znote == '') {                    alert('ERROR :: Missing note');                    passed = false;                }                                if (Zdate == '') {                    alert('ERROR :: Missing date');                    passed = false;                }                                                //alert('user --> ' + user);                //alert('date --> ' + date);                //alert('note --> ' + note);                //alert('inventory_sales_orders_id --> ' + poid);                                                if (passed) {                    var url = 'http://webmanager.whhub.com/office/AJAX/class_execute.php;eq={$eq};action=addnote';                    var data = { user:Zuser, date:Zdate, note:Znote, poid:Zpoid };                    $.post(url, data)                        .done(function(data) {                            //alert("Data Loaded: " + data);                                                        if (data == 1) {                                //alert('SUCCESS SAVING RECORD');                                //$('#note_add_record_wrapper').html('RECORD DONE');                                                                // ----- call function in parent to reload notes area                                LoadNotesArea();                                                            } else {                                alert('ERROR SAVING NOTE');                            }                    });                }                            }SCRIPT;        AddScript($script);                                $onclick 	        = "saveNoteAjax(); return false;";        $id 		        = 'btn_note_add';        $name 		        = 'btn_note_add';        $btn_note_add       = MakeButton('positive', 'SAVE NOTE', '', '', $id, $onclick, 'button', $name);                        $special_prefix = $this->Special_Prefix;                 $base_array = array(            //"form|$this->Action_Link|post|db_edit_form",                        "code|<div class='shadow form_section_wrapper'>",                'code|<div style="padding-right:20px;">',                                "hidden|{$special_prefix}user",                //"info|User|{$this->Username}",                //'text|Title|title|N|60|255',                "text|Date|{$special_prefix}date|N|20|255",                "textarea|Note|{$special_prefix}note|N|30|4",                                                // ----- NOTE :: Have to display off so ajax call can find value                "code|<div style='display:none;'>",                "text|purchase order ID|{$special_prefix}inventory_purchase_orders_id|N|20|255",                "code|</div>",                 "code|<div style='padding-left:120px;'>",                "code|{$btn_note_add}",                "code|</br>",                "code|</div>",                                                'code|</div>',            'code|</div>',        );                if ($this->Action == 'ADD') {            //$base_array[] = "submit|Add Record|$this->Add_Submit_Name";            //$base_array[] = 'endform';            $this->Form_Data_Array_Add = $base_array;        } else {            //$base_array[] = 'checkbox|Active|active||1|0';            //$base_array[] = "submit|Update Record|$this->Edit_Submit_Name";            //$base_array[] = 'endform';            $this->Form_Data_Array_Edit = $base_array;        }    }        public function ViewAllRecords($RETURN=false)    {        # FUNCTION :: View all the records tied to a specific Inventory_Purchase_Orders_Id                if (!$this->Inventory_Purchase_Orders_Id) {            $error = "Missing Inventory_Purchase_Orders_Id";            $this->AddError($this->Classname, __FUNCTION__, $error);            $this->EchoError($this->Classname, __FUNCTION__, $error, true);            exit();        }                $records = $this->GetExisting($this->Inventory_Purchase_Orders_Id);        $output = '';                if ($records) {            foreach ($records as $id => $record) {                $output .= $this->FormatRecordForOutput($record);            }        } else {            $output = "NO NOTES FOUND FOR RECORD";        }                if ($RETURN) {            return $output;        } else {            echo $output;        }    }        public function FormatRecordForOutput($RECORD)    {        # FUNCTION :: Format a record for output to the screen                $output = '';        if (is_array($RECORD)) {                        // remove empty time strings from date display            $dt_parts   = explode (' ', $RECORD['date']);             $date       = ($dt_parts[1] == '00:00:00') ? $dt_parts[0] : "{$dt_parts[0]} {$dt_parts[1]}";                        $output = "                <div class='pb_day_data' style='width:{$this->Table_Width}px;'>                    <div class='pb_day_data_title'><b>{$RECORD['user']}</b> ({$date})</div>                    <div class='pb_day_data_description' style='font-size:{$this->Notes_Font_Size}px'>{$RECORD['note']}</div>                </div>                ";        }                return $output;    }        public function GetExisting($ID)    {        $records = $this->SQL->GetArrayAll(array(            'table' => $this->Table,            'keys'  => '*',            'where' => "inventory_purchase_orders_id='{$ID}' AND active=1",            'order' => "date DESC, {$this->Index_Name} DESC",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                return $records;    }        public function GetExistingCount($ID)    {        $count = $this->SQL->Count(array(            'table' => $this->Table,            'where' => "inventory_purchase_orders_id='{$ID}' AND active=1",        ));        //$this->SQL->EchoQuery($this->Classname, __FUNCTION__);                return $count;    }        }  // -------------- END CLASS --------------